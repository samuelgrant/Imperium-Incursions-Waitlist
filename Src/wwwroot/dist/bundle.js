!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";e.exports=n(11)},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(12)},function(e,t,n){"use strict";var r,o,i,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=k(n(0)),s=k(n(17)),c=k(n(1)),f=k(n(20)),p=k(n(21)),d=k(n(22)),m=k(n(23)),h=k(n(24)),y=k(n(25)),v=k(n(26)),b=k(n(27)),g=k(n(28)),_=n(29),w=k(n(30)),E=k(n(31));function k(e){return e&&e.__esModule?e:{default:e}}var x=(0,p.default)(r=(0,d.default)(r=(0,m.default)(r=(0,h.default)(r=(0,y.default)(r=(0,v.default)((i=o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={place:e.place||"top",desiredPlace:e.place||"top",type:"dark",effect:"float",show:!1,border:!1,offset:{},extraClass:"",html:!1,delayHide:0,delayShow:0,event:e.event||null,eventOff:e.eventOff||null,currentEvent:null,currentTarget:null,ariaProps:(0,_.parseAria)(e),isEmptyTip:!1,disable:!1,originTooltip:null,isMultiline:!1},n.bind(["showTooltip","updateTooltip","hideTooltip","getTooltipContent","globalRebuild","globalShow","globalHide","onWindowResize","mouseOnToolTip"]),n.mount=!0,n.delayShowLoop=null,n.delayHideLoop=null,n.delayReshow=null,n.intervalUpdateContent=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),l(t,[{key:"bind",value:function(e){var t=this;e.forEach(function(e){t[e]=t[e].bind(t)})}},{key:"componentDidMount",value:function(){var e=this.props,t=e.insecure,n=e.resizeHide;t&&this.setStyleHeader(),this.bindListener(),this.bindWindowEvents(n)}},{key:"componentWillReceiveProps",value:function(e){var t=this.state.ariaProps,n=(0,_.parseAria)(e);Object.keys(n).some(function(e){return n[e]!==t[e]})&&this.setState({ariaProps:n})}},{key:"componentWillUnmount",value:function(){this.mount=!1,this.clearTimer(),this.unbindListener(),this.removeScrollListener(),this.unbindWindowEvents()}},{key:"mouseOnToolTip",value:function(){return!(!this.state.show||!this.tooltipRef)&&(this.tooltipRef.matches||(this.tooltipRef.msMatchesSelector?this.tooltipRef.matches=this.tooltipRef.msMatchesSelector:this.tooltipRef.matches=this.tooltipRef.mozMatchesSelector),this.tooltipRef.matches(":hover"))}},{key:"getTargetArray",value:function(e){var t=void 0;if(e){var n=e.replace(/\\/g,"\\\\").replace(/"/g,'\\"');t=document.querySelectorAll('[data-tip][data-for="'+n+'"]')}else t=document.querySelectorAll("[data-tip]:not([data-for])");return(0,w.default)(t)}},{key:"bindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff,o=t.isCapture;this.getTargetArray(n).forEach(function(t){var n=e.isCapture(t),r=e.getEffect(t);null===t.getAttribute("currentItem")&&t.setAttribute("currentItem","false"),e.unbindBasicListener(t),e.isCustomEvent(t)?e.customBindListener(t):(t.addEventListener("mouseenter",e.showTooltip,n),"float"===r&&t.addEventListener("mousemove",e.updateTooltip,n),t.addEventListener("mouseleave",e.hideTooltip,n))}),r&&(window.removeEventListener(r,this.hideTooltip),window.addEventListener(r,this.hideTooltip,o)),this.bindRemovalTracker()}},{key:"unbindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff;this.getTargetArray(n).forEach(function(t){e.unbindBasicListener(t),e.isCustomEvent(t)&&e.customUnbindListener(t)}),r&&window.removeEventListener(r,this.hideTooltip),this.unbindRemovalTracker()}},{key:"unbindBasicListener",value:function(e){var t=this.isCapture(e);e.removeEventListener("mouseenter",this.showTooltip,t),e.removeEventListener("mousemove",this.updateTooltip,t),e.removeEventListener("mouseleave",this.hideTooltip,t)}},{key:"getTooltipContent",value:function(){var e=this.props,t=e.getContent,n=e.children,r=void 0;return t&&(r=Array.isArray(t)?t[0]&&t[0](this.state.originTooltip):t(this.state.originTooltip)),(0,g.default)(this.state.originTooltip,n,r,this.state.isMultiline)}},{key:"isEmptyTip",value:function(e){return"string"==typeof e&&""===e||null===e}},{key:"showTooltip",value:function(e,t){if(t&&!this.getTargetArray(this.props.id).some(function(t){return t===e.currentTarget}))return;var n=this.props,r=n.multiline,o=n.getContent,i=e.currentTarget.getAttribute("data-tip"),a=e.currentTarget.getAttribute("data-multiline")||r||!1,l=e instanceof window.FocusEvent||t,u=!0;e.currentTarget.getAttribute("data-scroll-hide")?u="true"===e.currentTarget.getAttribute("data-scroll-hide"):null!=this.props.scrollHide&&(u=this.props.scrollHide);var s=e.currentTarget.getAttribute("data-place")||this.props.place||"top",f=l?"solid":this.getEffect(e.currentTarget),p=e.currentTarget.getAttribute("data-offset")||this.props.offset||{},d=(0,b.default)(e,e.currentTarget,c.default.findDOMNode(this),s,s,f,p),m=d.isNewState?d.newState.place:s;this.clearTimer();var h=e.currentTarget,y=this.state.show?h.getAttribute("data-delay-update")||this.props.delayUpdate:0,v=this,_=function(){v.setState({originTooltip:i,isMultiline:a,desiredPlace:s,place:m,type:h.getAttribute("data-type")||v.props.type||"dark",effect:f,offset:p,html:h.getAttribute("data-html")?"true"===h.getAttribute("data-html"):v.props.html||!1,delayShow:h.getAttribute("data-delay-show")||v.props.delayShow||0,delayHide:h.getAttribute("data-delay-hide")||v.props.delayHide||0,delayUpdate:h.getAttribute("data-delay-update")||v.props.delayUpdate||0,border:h.getAttribute("data-border")?"true"===h.getAttribute("data-border"):v.props.border||!1,extraClass:h.getAttribute("data-class")||v.props.class||v.props.className||"",disable:h.getAttribute("data-tip-disable")?"true"===h.getAttribute("data-tip-disable"):v.props.disable||!1,currentTarget:h},function(){u&&v.addScrollListener(v.state.currentTarget),v.updateTooltip(e),o&&Array.isArray(o)&&(v.intervalUpdateContent=setInterval(function(){if(v.mount){var e=v.props.getContent,t=(0,g.default)(i,"",e[0](),a),n=v.isEmptyTip(t);v.setState({isEmptyTip:n}),v.updatePosition()}},o[1]))})};y?this.delayReshow=setTimeout(_,y):_()}},{key:"updateTooltip",value:function(e){var t=this,n=this.state,r=n.delayShow,o=n.disable,i=this.props.afterShow,a=this.getTooltipContent(),l=parseInt(r,10),u=e.currentTarget||e.target;if(!this.mouseOnToolTip()&&!this.isEmptyTip(a)&&!o){var s=function(){if(Array.isArray(a)&&a.length>0||a){var n=!t.state.show;t.setState({currentEvent:e,currentTarget:u,show:!0},function(){t.updatePosition(),n&&i&&i(e)})}};clearTimeout(this.delayShowLoop),r?this.delayShowLoop=setTimeout(s,l):s()}}},{key:"listenForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.addEventListener("mouseleave",this.hideTooltip)}},{key:"removeListenerForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.removeEventListener("mouseleave",this.hideTooltip)}},{key:"hideTooltip",value:function(e,t){var n=this,r=this.state,o=r.delayHide,i=r.disable,a=this.props.afterHide,l=this.getTooltipContent();if(this.mount&&!this.isEmptyTip(l)&&!i){if(t)if(!this.getTargetArray(this.props.id).some(function(t){return t===e.currentTarget})||!this.state.show)return;var u=function(){var t=n.state.show;n.mouseOnToolTip()?n.listenForTooltipExit():(n.removeListenerForTooltipExit(),n.setState({show:!1},function(){n.removeScrollListener(),t&&a&&a(e)}))};this.clearTimer(),o?this.delayHideLoop=setTimeout(u,parseInt(o,10)):u()}}},{key:"addScrollListener",value:function(e){var t=this.isCapture(e);window.addEventListener("scroll",this.hideTooltip,t)}},{key:"removeScrollListener",value:function(){window.removeEventListener("scroll",this.hideTooltip)}},{key:"updatePosition",value:function(){var e=this,t=this.state,n=t.currentEvent,r=t.currentTarget,o=t.place,i=t.desiredPlace,a=t.effect,l=t.offset,u=c.default.findDOMNode(this),s=(0,b.default)(n,r,u,o,i,a,l);if(s.isNewState)return this.setState(s.newState,function(){e.updatePosition()});u.style.left=s.position.left+"px",u.style.top=s.position.top+"px"}},{key:"setStyleHeader",value:function(){var e=document.getElementsByTagName("head")[0];if(!e.querySelector('style[id="react-tooltip"]')){var t=document.createElement("style");t.id="react-tooltip",t.innerHTML=E.default,n.nc&&t.setAttribute("nonce",n.nc),e.insertBefore(t,e.firstChild)}}},{key:"clearTimer",value:function(){clearTimeout(this.delayShowLoop),clearTimeout(this.delayHideLoop),clearTimeout(this.delayReshow),clearInterval(this.intervalUpdateContent)}},{key:"render",value:function(){var e=this,n=this.state,r=n.extraClass,o=n.html,i=n.ariaProps,l=n.disable,s=this.getTooltipContent(),c=this.isEmptyTip(s),p=(0,f.default)("__react_component_tooltip",{show:this.state.show&&!l&&!c},{border:this.state.border},{"place-top":"top"===this.state.place},{"place-bottom":"bottom"===this.state.place},{"place-left":"left"===this.state.place},{"place-right":"right"===this.state.place},{"type-dark":"dark"===this.state.type},{"type-success":"success"===this.state.type},{"type-warning":"warning"===this.state.type},{"type-error":"error"===this.state.type},{"type-info":"info"===this.state.type},{"type-light":"light"===this.state.type},{allow_hover:this.props.delayUpdate},{allow_click:this.props.clickable}),d=this.props.wrapper;return t.supportedWrappers.indexOf(d)<0&&(d=t.defaultProps.wrapper),o?u.default.createElement(d,a({className:p+" "+r,id:this.props.id,ref:function(t){return e.tooltipRef=t}},i,{"data-id":"tooltip",dangerouslySetInnerHTML:{__html:s}})):u.default.createElement(d,a({className:p+" "+r,id:this.props.id},i,{ref:function(t){return e.tooltipRef=t},"data-id":"tooltip"}),s)}}]),t}(),o.propTypes={children:s.default.any,place:s.default.string,type:s.default.string,effect:s.default.string,offset:s.default.object,multiline:s.default.bool,border:s.default.bool,insecure:s.default.bool,class:s.default.string,className:s.default.string,id:s.default.string,html:s.default.bool,delayHide:s.default.number,delayUpdate:s.default.number,delayShow:s.default.number,event:s.default.string,eventOff:s.default.string,watchWindow:s.default.bool,isCapture:s.default.bool,globalEventOff:s.default.string,getContent:s.default.any,afterShow:s.default.func,afterHide:s.default.func,disable:s.default.bool,scrollHide:s.default.bool,resizeHide:s.default.bool,wrapper:s.default.string,clickable:s.default.bool},o.defaultProps={insecure:!0,resizeHide:!0,wrapper:"div",clickable:!1},o.supportedWrappers=["div","span"],o.displayName="ReactTooltip",r=i))||r)||r)||r)||r)||r)||r;e.exports=x},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(15),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(3))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={GLOBAL:{HIDE:"__react_tooltip_hide_event",REBUILD:"__react_tooltip_rebuild_event",SHOW:"__react_tooltip_show_event"}}},function(e,t,n){n(39),e.exports=n(35)},function(e,t,n){(function(e,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,a=200,l="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",s="__lodash_hash_undefined__",c=500,f="__lodash_placeholder__",p=1,d=2,m=4,h=1,y=2,v=1,b=2,g=4,_=8,w=16,E=32,k=64,x=128,S=256,T=512,O=30,C="...",P=800,N=16,j=1,I=2,R=1/0,A=9007199254740991,$=1.7976931348623157e308,F=NaN,L=4294967295,U=L-1,D=L>>>1,z=[["ary",x],["bind",v],["bindKey",b],["curry",_],["curryRight",w],["flip",T],["partial",E],["partialRight",k],["rearg",S]],M="[object Arguments]",B="[object Array]",W="[object AsyncFunction]",q="[object Boolean]",H="[object Date]",V="[object DOMException]",Y="[object Error]",Q="[object Function]",G="[object GeneratorFunction]",K="[object Map]",X="[object Number]",J="[object Null]",Z="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",oe="[object Symbol]",ie="[object Undefined]",ae="[object WeakMap]",le="[object WeakSet]",ue="[object ArrayBuffer]",se="[object DataView]",ce="[object Float32Array]",fe="[object Float64Array]",pe="[object Int8Array]",de="[object Int16Array]",me="[object Int32Array]",he="[object Uint8Array]",ye="[object Uint8ClampedArray]",ve="[object Uint16Array]",be="[object Uint32Array]",ge=/\b__p \+= '';/g,_e=/\b(__p \+=) '' \+/g,we=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Ee=/&(?:amp|lt|gt|quot|#39);/g,ke=/[&<>"']/g,xe=RegExp(Ee.source),Se=RegExp(ke.source),Te=/<%-([\s\S]+?)%>/g,Oe=/<%([\s\S]+?)%>/g,Ce=/<%=([\s\S]+?)%>/g,Pe=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ne=/^\w*$/,je=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ie=/[\\^$.*+?()[\]{}|]/g,Re=RegExp(Ie.source),Ae=/^\s+|\s+$/g,$e=/^\s+/,Fe=/\s+$/,Le=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ue=/\{\n\/\* \[wrapped with (.+)\] \*/,De=/,? & /,ze=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Me=/\\(\\)?/g,Be=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,We=/\w*$/,qe=/^[-+]0x[0-9a-f]+$/i,He=/^0b[01]+$/i,Ve=/^\[object .+?Constructor\]$/,Ye=/^0o[0-7]+$/i,Qe=/^(?:0|[1-9]\d*)$/,Ge=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ke=/($^)/,Xe=/['\n\r\u2028\u2029\\]/g,Je="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ze="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Ze+"]",nt="["+Je+"]",rt="\\d+",ot="[\\u2700-\\u27bf]",it="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Ze+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",lt="\\ud83c[\\udffb-\\udfff]",ut="[^\\ud800-\\udfff]",st="(?:\\ud83c[\\udde6-\\uddff]){2}",ct="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pt="(?:"+it+"|"+at+")",dt="(?:"+ft+"|"+at+")",mt="(?:"+nt+"|"+lt+")"+"?",ht="[\\ufe0e\\ufe0f]?"+mt+("(?:\\u200d(?:"+[ut,st,ct].join("|")+")[\\ufe0e\\ufe0f]?"+mt+")*"),yt="(?:"+[ot,st,ct].join("|")+")"+ht,vt="(?:"+[ut+nt+"?",nt,st,ct,et].join("|")+")",bt=RegExp("['’]","g"),gt=RegExp(nt,"g"),_t=RegExp(lt+"(?="+lt+")|"+vt+ht,"g"),wt=RegExp([ft+"?"+it+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+pt,"$"].join("|")+")",ft+"?"+pt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,yt].join("|"),"g"),Et=RegExp("[\\u200d\\ud800-\\udfff"+Je+"\\ufe0e\\ufe0f]"),kt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],St=-1,Tt={};Tt[ce]=Tt[fe]=Tt[pe]=Tt[de]=Tt[me]=Tt[he]=Tt[ye]=Tt[ve]=Tt[be]=!0,Tt[M]=Tt[B]=Tt[ue]=Tt[q]=Tt[se]=Tt[H]=Tt[Y]=Tt[Q]=Tt[K]=Tt[X]=Tt[Z]=Tt[te]=Tt[ne]=Tt[re]=Tt[ae]=!1;var Ot={};Ot[M]=Ot[B]=Ot[ue]=Ot[se]=Ot[q]=Ot[H]=Ot[ce]=Ot[fe]=Ot[pe]=Ot[de]=Ot[me]=Ot[K]=Ot[X]=Ot[Z]=Ot[te]=Ot[ne]=Ot[re]=Ot[oe]=Ot[he]=Ot[ye]=Ot[ve]=Ot[be]=!0,Ot[Y]=Ot[Q]=Ot[ae]=!1;var Ct={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pt=parseFloat,Nt=parseInt,jt="object"==typeof e&&e&&e.Object===Object&&e,It="object"==typeof self&&self&&self.Object===Object&&self,Rt=jt||It||Function("return this")(),At=t&&!t.nodeType&&t,$t=At&&"object"==typeof r&&r&&!r.nodeType&&r,Ft=$t&&$t.exports===At,Lt=Ft&&jt.process,Ut=function(){try{var e=$t&&$t.require&&$t.require("util").types;return e||Lt&&Lt.binding&&Lt.binding("util")}catch(e){}}(),Dt=Ut&&Ut.isArrayBuffer,zt=Ut&&Ut.isDate,Mt=Ut&&Ut.isMap,Bt=Ut&&Ut.isRegExp,Wt=Ut&&Ut.isSet,qt=Ut&&Ut.isTypedArray;function Ht(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Vt(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var a=e[o];t(r,a,n(a),e)}return r}function Yt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Qt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Kt(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}function Xt(e,t){return!!(null==e?0:e.length)&&un(e,t,0)>-1}function Jt(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function Zt(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function en(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function tn(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function nn(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=pn("length");function an(e,t,n){var r;return n(e,function(e,n,o){if(t(e,n,o))return r=n,!1}),r}function ln(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}function un(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):ln(e,cn,n)}function sn(e,t,n,r){for(var o=n-1,i=e.length;++o<i;)if(r(e[o],t))return o;return-1}function cn(e){return e!=e}function fn(e,t){var n=null==e?0:e.length;return n?hn(e,t)/n:F}function pn(e){return function(t){return null==t?i:t[e]}}function dn(e){return function(t){return null==e?i:e[t]}}function mn(e,t,n,r,o){return o(e,function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)}),n}function hn(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function yn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function vn(e){return function(t){return e(t)}}function bn(e,t){return Zt(t,function(t){return e[t]})}function gn(e,t){return e.has(t)}function _n(e,t){for(var n=-1,r=e.length;++n<r&&un(t,e[n],0)>-1;);return n}function wn(e,t){for(var n=e.length;n--&&un(t,e[n],0)>-1;);return n}var En=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),kn=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function xn(e){return"\\"+Ct[e]}function Sn(e){return Et.test(e)}function Tn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function On(e,t){return function(n){return e(t(n))}}function Cn(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n];a!==t&&a!==f||(e[n]=f,i[o++]=n)}return i}function Pn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function Nn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function jn(e){return Sn(e)?function(e){var t=_t.lastIndex=0;for(;_t.test(e);)++t;return t}(e):on(e)}function In(e){return Sn(e)?function(e){return e.match(_t)||[]}(e):function(e){return e.split("")}(e)}var Rn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var An=function e(t){var n,r=(t=null==t?Rt:An.defaults(Rt.Object(),t,An.pick(Rt,xt))).Array,o=t.Date,Je=t.Error,Ze=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,ot=t.TypeError,it=r.prototype,at=Ze.prototype,lt=tt.prototype,ut=t["__core-js_shared__"],st=at.toString,ct=lt.hasOwnProperty,ft=0,pt=(n=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=lt.toString,mt=st.call(tt),ht=Rt._,yt=nt("^"+st.call(ct).replace(Ie,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vt=Ft?t.Buffer:i,_t=t.Symbol,Et=t.Uint8Array,Ct=vt?vt.allocUnsafe:i,jt=On(tt.getPrototypeOf,tt),It=tt.create,At=lt.propertyIsEnumerable,$t=it.splice,Lt=_t?_t.isConcatSpreadable:i,Ut=_t?_t.iterator:i,on=_t?_t.toStringTag:i,dn=function(){try{var e=Di(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),$n=t.clearTimeout!==Rt.clearTimeout&&t.clearTimeout,Fn=o&&o.now!==Rt.Date.now&&o.now,Ln=t.setTimeout!==Rt.setTimeout&&t.setTimeout,Un=et.ceil,Dn=et.floor,zn=tt.getOwnPropertySymbols,Mn=vt?vt.isBuffer:i,Bn=t.isFinite,Wn=it.join,qn=On(tt.keys,tt),Hn=et.max,Vn=et.min,Yn=o.now,Qn=t.parseInt,Gn=et.random,Kn=it.reverse,Xn=Di(t,"DataView"),Jn=Di(t,"Map"),Zn=Di(t,"Promise"),er=Di(t,"Set"),tr=Di(t,"WeakMap"),nr=Di(tt,"create"),rr=tr&&new tr,or={},ir=fa(Xn),ar=fa(Jn),lr=fa(Zn),ur=fa(er),sr=fa(tr),cr=_t?_t.prototype:i,fr=cr?cr.valueOf:i,pr=cr?cr.toString:i;function dr(e){if(Cl(e)&&!vl(e)&&!(e instanceof vr)){if(e instanceof yr)return e;if(ct.call(e,"__wrapped__"))return pa(e)}return new yr(e)}var mr=function(){function e(){}return function(t){if(!Ol(t))return{};if(It)return It(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function hr(){}function yr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function vr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=L,this.__views__=[]}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function gr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new _r;++t<n;)this.add(e[t])}function Er(e){var t=this.__data__=new gr(e);this.size=t.size}function kr(e,t){var n=vl(e),r=!n&&yl(e),o=!n&&!r&&wl(e),i=!n&&!r&&!o&&Fl(e),a=n||r||o||i,l=a?yn(e.length,rt):[],u=l.length;for(var s in e)!t&&!ct.call(e,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Vi(s,u))||l.push(s);return l}function xr(e){var t=e.length;return t?e[Eo(0,t-1)]:i}function Sr(e,t){return ua(ri(e),Ar(t,0,e.length))}function Tr(e){return ua(ri(e))}function Or(e,t,n){(n===i||dl(e[t],n))&&(n!==i||t in e)||Ir(e,t,n)}function Cr(e,t,n){var r=e[t];ct.call(e,t)&&dl(r,n)&&(n!==i||t in e)||Ir(e,t,n)}function Pr(e,t){for(var n=e.length;n--;)if(dl(e[n][0],t))return n;return-1}function Nr(e,t,n,r){return Dr(e,function(e,o,i){t(r,e,n(e),i)}),r}function jr(e,t){return e&&oi(t,ou(t),e)}function Ir(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Rr(e,t){for(var n=-1,o=t.length,a=r(o),l=null==e;++n<o;)a[n]=l?i:Zl(e,t[n]);return a}function Ar(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function $r(e,t,n,r,o,a){var l,u=t&p,s=t&d,c=t&m;if(n&&(l=o?n(e,r,o,a):n(e)),l!==i)return l;if(!Ol(e))return e;var f=vl(e);if(f){if(l=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ct.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!u)return ri(e,l)}else{var h=Bi(e),y=h==Q||h==G;if(wl(e))return Xo(e,u);if(h==Z||h==M||y&&!o){if(l=s||y?{}:qi(e),!u)return s?function(e,t){return oi(e,Mi(e),t)}(e,function(e,t){return e&&oi(t,iu(t),e)}(l,e)):function(e,t){return oi(e,zi(e),t)}(e,jr(l,e))}else{if(!Ot[h])return o?e:{};l=function(e,t,n){var r,o=e.constructor;switch(t){case ue:return Jo(e);case q:case H:return new o(+e);case se:return function(e,t){var n=t?Jo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case ce:case fe:case pe:case de:case me:case he:case ye:case ve:case be:return Zo(e,n);case K:return new o;case X:case re:return new o(e);case te:return function(e){var t=new e.constructor(e.source,We.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new o;case oe:return r=e,fr?tt(fr.call(r)):{}}}(e,h,u)}}a||(a=new Er);var v=a.get(e);if(v)return v;if(a.set(e,l),Rl(e))return e.forEach(function(r){l.add($r(r,t,n,r,e,a))}),l;if(Pl(e))return e.forEach(function(r,o){l.set(o,$r(r,t,n,o,e,a))}),l;var b=f?i:(c?s?Ii:ji:s?iu:ou)(e);return Yt(b||e,function(r,o){b&&(r=e[o=r]),Cr(l,o,$r(r,t,n,o,e,a))}),l}function Fr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var o=n[r],a=t[o],l=e[o];if(l===i&&!(o in e)||!a(l))return!1}return!0}function Lr(e,t,n){if("function"!=typeof e)throw new ot(u);return oa(function(){e.apply(i,n)},t)}function Ur(e,t,n,r){var o=-1,i=Xt,l=!0,u=e.length,s=[],c=t.length;if(!u)return s;n&&(t=Zt(t,vn(n))),r?(i=Jt,l=!1):t.length>=a&&(i=gn,l=!1,t=new wr(t));e:for(;++o<u;){var f=e[o],p=null==n?f:n(f);if(f=r||0!==f?f:0,l&&p==p){for(var d=c;d--;)if(t[d]===p)continue e;s.push(f)}else i(t,p,r)||s.push(f)}return s}dr.templateSettings={escape:Te,evaluate:Oe,interpolate:Ce,variable:"",imports:{_:dr}},dr.prototype=hr.prototype,dr.prototype.constructor=dr,yr.prototype=mr(hr.prototype),yr.prototype.constructor=yr,vr.prototype=mr(hr.prototype),vr.prototype.constructor=vr,br.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},br.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},br.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===s?i:n}return ct.call(t,e)?t[e]:i},br.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==i:ct.call(t,e)},br.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===i?s:t,this},gr.prototype.clear=function(){this.__data__=[],this.size=0},gr.prototype.delete=function(e){var t=this.__data__,n=Pr(t,e);return!(n<0||(n==t.length-1?t.pop():$t.call(t,n,1),--this.size,0))},gr.prototype.get=function(e){var t=this.__data__,n=Pr(t,e);return n<0?i:t[n][1]},gr.prototype.has=function(e){return Pr(this.__data__,e)>-1},gr.prototype.set=function(e,t){var n=this.__data__,r=Pr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},_r.prototype.clear=function(){this.size=0,this.__data__={hash:new br,map:new(Jn||gr),string:new br}},_r.prototype.delete=function(e){var t=Li(this,e).delete(e);return this.size-=t?1:0,t},_r.prototype.get=function(e){return Li(this,e).get(e)},_r.prototype.has=function(e){return Li(this,e).has(e)},_r.prototype.set=function(e,t){var n=Li(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(e){return this.__data__.set(e,s),this},wr.prototype.has=function(e){return this.__data__.has(e)},Er.prototype.clear=function(){this.__data__=new gr,this.size=0},Er.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Er.prototype.get=function(e){return this.__data__.get(e)},Er.prototype.has=function(e){return this.__data__.has(e)},Er.prototype.set=function(e,t){var n=this.__data__;if(n instanceof gr){var r=n.__data__;if(!Jn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new _r(r)}return n.set(e,t),this.size=n.size,this};var Dr=li(Yr),zr=li(Qr,!0);function Mr(e,t){var n=!0;return Dr(e,function(e,r,o){return n=!!t(e,r,o)}),n}function Br(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],l=t(a);if(null!=l&&(u===i?l==l&&!$l(l):n(l,u)))var u=l,s=a}return s}function Wr(e,t){var n=[];return Dr(e,function(e,r,o){t(e,r,o)&&n.push(e)}),n}function qr(e,t,n,r,o){var i=-1,a=e.length;for(n||(n=Hi),o||(o=[]);++i<a;){var l=e[i];t>0&&n(l)?t>1?qr(l,t-1,n,r,o):en(o,l):r||(o[o.length]=l)}return o}var Hr=ui(),Vr=ui(!0);function Yr(e,t){return e&&Hr(e,t,ou)}function Qr(e,t){return e&&Vr(e,t,ou)}function Gr(e,t){return Kt(t,function(t){return xl(e[t])})}function Kr(e,t){for(var n=0,r=(t=Yo(t,e)).length;null!=e&&n<r;)e=e[ca(t[n++])];return n&&n==r?e:i}function Xr(e,t,n){var r=t(e);return vl(e)?r:en(r,n(e))}function Jr(e){return null==e?e===i?ie:J:on&&on in tt(e)?function(e){var t=ct.call(e,on),n=e[on];try{e[on]=i;var r=!0}catch(e){}var o=dt.call(e);return r&&(t?e[on]=n:delete e[on]),o}(e):function(e){return dt.call(e)}(e)}function Zr(e,t){return e>t}function eo(e,t){return null!=e&&ct.call(e,t)}function to(e,t){return null!=e&&t in tt(e)}function no(e,t,n){for(var o=n?Jt:Xt,a=e[0].length,l=e.length,u=l,s=r(l),c=1/0,f=[];u--;){var p=e[u];u&&t&&(p=Zt(p,vn(t))),c=Vn(p.length,c),s[u]=!n&&(t||a>=120&&p.length>=120)?new wr(u&&p):i}p=e[0];var d=-1,m=s[0];e:for(;++d<a&&f.length<c;){var h=p[d],y=t?t(h):h;if(h=n||0!==h?h:0,!(m?gn(m,y):o(f,y,n))){for(u=l;--u;){var v=s[u];if(!(v?gn(v,y):o(e[u],y,n)))continue e}m&&m.push(y),f.push(h)}}return f}function ro(e,t,n){var r=null==(e=ta(e,t=Yo(t,e)))?e:e[ca(ka(t))];return null==r?i:Ht(r,e,n)}function oo(e){return Cl(e)&&Jr(e)==M}function io(e,t,n,r,o){return e===t||(null==e||null==t||!Cl(e)&&!Cl(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var l=vl(e),u=vl(t),s=l?B:Bi(e),c=u?B:Bi(t),f=(s=s==M?Z:s)==Z,p=(c=c==M?Z:c)==Z,d=s==c;if(d&&wl(e)){if(!wl(t))return!1;l=!0,f=!1}if(d&&!f)return a||(a=new Er),l||Fl(e)?Pi(e,t,n,r,o,a):function(e,t,n,r,o,i,a){switch(n){case se:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ue:return!(e.byteLength!=t.byteLength||!i(new Et(e),new Et(t)));case q:case H:case X:return dl(+e,+t);case Y:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case K:var l=Tn;case ne:var u=r&h;if(l||(l=Pn),e.size!=t.size&&!u)return!1;var s=a.get(e);if(s)return s==t;r|=y,a.set(e,t);var c=Pi(l(e),l(t),r,o,i,a);return a.delete(e),c;case oe:if(fr)return fr.call(e)==fr.call(t)}return!1}(e,t,s,n,r,o,a);if(!(n&h)){var m=f&&ct.call(e,"__wrapped__"),v=p&&ct.call(t,"__wrapped__");if(m||v){var b=m?e.value():e,g=v?t.value():t;return a||(a=new Er),o(b,g,n,r,a)}}return!!d&&(a||(a=new Er),function(e,t,n,r,o,a){var l=n&h,u=ji(e),s=u.length,c=ji(t).length;if(s!=c&&!l)return!1;for(var f=s;f--;){var p=u[f];if(!(l?p in t:ct.call(t,p)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var m=!0;a.set(e,t),a.set(t,e);for(var y=l;++f<s;){p=u[f];var v=e[p],b=t[p];if(r)var g=l?r(b,v,p,t,e,a):r(v,b,p,e,t,a);if(!(g===i?v===b||o(v,b,n,r,a):g)){m=!1;break}y||(y="constructor"==p)}if(m&&!y){var _=e.constructor,w=t.constructor;_!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(m=!1)}return a.delete(e),a.delete(t),m}(e,t,n,r,o,a))}(e,t,n,r,io,o))}function ao(e,t,n,r){var o=n.length,a=o,l=!r;if(null==e)return!a;for(e=tt(e);o--;){var u=n[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var s=(u=n[o])[0],c=e[s],f=u[1];if(l&&u[2]){if(c===i&&!(s in e))return!1}else{var p=new Er;if(r)var d=r(c,f,s,e,t,p);if(!(d===i?io(f,c,h|y,r,p):d))return!1}}return!0}function lo(e){return!(!Ol(e)||(t=e,pt&&pt in t))&&(xl(e)?yt:Ve).test(fa(e));var t}function uo(e){return"function"==typeof e?e:null==e?Nu:"object"==typeof e?vl(e)?ho(e[0],e[1]):mo(e):Du(e)}function so(e){if(!Xi(e))return qn(e);var t=[];for(var n in tt(e))ct.call(e,n)&&"constructor"!=n&&t.push(n);return t}function co(e){if(!Ol(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Xi(e),n=[];for(var r in e)("constructor"!=r||!t&&ct.call(e,r))&&n.push(r);return n}function fo(e,t){return e<t}function po(e,t){var n=-1,o=gl(e)?r(e.length):[];return Dr(e,function(e,r,i){o[++n]=t(e,r,i)}),o}function mo(e){var t=Ui(e);return 1==t.length&&t[0][2]?Zi(t[0][0],t[0][1]):function(n){return n===e||ao(n,e,t)}}function ho(e,t){return Qi(e)&&Ji(t)?Zi(ca(e),t):function(n){var r=Zl(n,e);return r===i&&r===t?eu(n,e):io(t,r,h|y)}}function yo(e,t,n,r,o){e!==t&&Hr(t,function(a,l){if(Ol(a))o||(o=new Er),function(e,t,n,r,o,a,l){var u=na(e,n),s=na(t,n),c=l.get(s);if(c)Or(e,n,c);else{var f=a?a(u,s,n+"",e,t,l):i,p=f===i;if(p){var d=vl(s),m=!d&&wl(s),h=!d&&!m&&Fl(s);f=s,d||m||h?vl(u)?f=u:_l(u)?f=ri(u):m?(p=!1,f=Xo(s,!0)):h?(p=!1,f=Zo(s,!0)):f=[]:jl(s)||yl(s)?(f=u,yl(u)?f=ql(u):Ol(u)&&!xl(u)||(f=qi(s))):p=!1}p&&(l.set(s,f),o(f,s,r,a,l),l.delete(s)),Or(e,n,f)}}(e,t,l,n,yo,r,o);else{var u=r?r(na(e,l),a,l+"",e,t,o):i;u===i&&(u=a),Or(e,l,u)}},iu)}function vo(e,t){var n=e.length;if(n)return Vi(t+=t<0?n:0,n)?e[t]:i}function bo(e,t,n){var r=-1;return t=Zt(t.length?t:[Nu],vn(Fi())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(po(e,function(e,n,o){return{criteria:Zt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){for(var r=-1,o=e.criteria,i=t.criteria,a=o.length,l=n.length;++r<a;){var u=ei(o[r],i[r]);if(u){if(r>=l)return u;var s=n[r];return u*("desc"==s?-1:1)}}return e.index-t.index}(e,t,n)})}function go(e,t,n){for(var r=-1,o=t.length,i={};++r<o;){var a=t[r],l=Kr(e,a);n(l,a)&&Oo(i,Yo(a,e),l)}return i}function _o(e,t,n,r){var o=r?sn:un,i=-1,a=t.length,l=e;for(e===t&&(t=ri(t)),n&&(l=Zt(e,vn(n)));++i<a;)for(var u=0,s=t[i],c=n?n(s):s;(u=o(l,c,u,r))>-1;)l!==e&&$t.call(l,u,1),$t.call(e,u,1);return e}function wo(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==i){var i=o;Vi(o)?$t.call(e,o,1):Do(e,o)}}return e}function Eo(e,t){return e+Dn(Gn()*(t-e+1))}function ko(e,t){var n="";if(!e||t<1||t>A)return n;do{t%2&&(n+=e),(t=Dn(t/2))&&(e+=e)}while(t);return n}function xo(e,t){return ia(ea(e,t,Nu),e+"")}function So(e){return xr(du(e))}function To(e,t){var n=du(e);return ua(n,Ar(t,0,n.length))}function Oo(e,t,n,r){if(!Ol(e))return e;for(var o=-1,a=(t=Yo(t,e)).length,l=a-1,u=e;null!=u&&++o<a;){var s=ca(t[o]),c=n;if(o!=l){var f=u[s];(c=r?r(f,s,u):i)===i&&(c=Ol(f)?f:Vi(t[o+1])?[]:{})}Cr(u,s,c),u=u[s]}return e}var Co=rr?function(e,t){return rr.set(e,t),e}:Nu,Po=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:Ou(t),writable:!0})}:Nu;function No(e){return ua(du(e))}function jo(e,t,n){var o=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var a=r(i);++o<i;)a[o]=e[o+t];return a}function Io(e,t){var n;return Dr(e,function(e,r,o){return!(n=t(e,r,o))}),!!n}function Ro(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=D){for(;r<o;){var i=r+o>>>1,a=e[i];null!==a&&!$l(a)&&(n?a<=t:a<t)?r=i+1:o=i}return o}return Ao(e,t,Nu,n)}function Ao(e,t,n,r){t=n(t);for(var o=0,a=null==e?0:e.length,l=t!=t,u=null===t,s=$l(t),c=t===i;o<a;){var f=Dn((o+a)/2),p=n(e[f]),d=p!==i,m=null===p,h=p==p,y=$l(p);if(l)var v=r||h;else v=c?h&&(r||d):u?h&&d&&(r||!m):s?h&&d&&!m&&(r||!y):!m&&!y&&(r?p<=t:p<t);v?o=f+1:a=f}return Vn(a,U)}function $o(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n],l=t?t(a):a;if(!n||!dl(l,u)){var u=l;i[o++]=0===a?0:a}}return i}function Fo(e){return"number"==typeof e?e:$l(e)?F:+e}function Lo(e){if("string"==typeof e)return e;if(vl(e))return Zt(e,Lo)+"";if($l(e))return pr?pr.call(e):"";var t=e+"";return"0"==t&&1/e==-R?"-0":t}function Uo(e,t,n){var r=-1,o=Xt,i=e.length,l=!0,u=[],s=u;if(n)l=!1,o=Jt;else if(i>=a){var c=t?null:ki(e);if(c)return Pn(c);l=!1,o=gn,s=new wr}else s=t?[]:u;e:for(;++r<i;){var f=e[r],p=t?t(f):f;if(f=n||0!==f?f:0,l&&p==p){for(var d=s.length;d--;)if(s[d]===p)continue e;t&&s.push(p),u.push(f)}else o(s,p,n)||(s!==u&&s.push(p),u.push(f))}return u}function Do(e,t){return null==(e=ta(e,t=Yo(t,e)))||delete e[ca(ka(t))]}function zo(e,t,n,r){return Oo(e,t,n(Kr(e,t)),r)}function Mo(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?jo(e,r?0:i,r?i+1:o):jo(e,r?i+1:0,r?o:i)}function Bo(e,t){var n=e;return n instanceof vr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Wo(e,t,n){var o=e.length;if(o<2)return o?Uo(e[0]):[];for(var i=-1,a=r(o);++i<o;)for(var l=e[i],u=-1;++u<o;)u!=i&&(a[i]=Ur(a[i]||l,e[u],t,n));return Uo(qr(a,1),t,n)}function qo(e,t,n){for(var r=-1,o=e.length,a=t.length,l={};++r<o;){var u=r<a?t[r]:i;n(l,e[r],u)}return l}function Ho(e){return _l(e)?e:[]}function Vo(e){return"function"==typeof e?e:Nu}function Yo(e,t){return vl(e)?e:Qi(e,t)?[e]:sa(Hl(e))}var Qo=xo;function Go(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:jo(e,t,n)}var Ko=$n||function(e){return Rt.clearTimeout(e)};function Xo(e,t){if(t)return e.slice();var n=e.length,r=Ct?Ct(n):new e.constructor(n);return e.copy(r),r}function Jo(e){var t=new e.constructor(e.byteLength);return new Et(t).set(new Et(e)),t}function Zo(e,t){var n=t?Jo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ei(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,a=$l(e),l=t!==i,u=null===t,s=t==t,c=$l(t);if(!u&&!c&&!a&&e>t||a&&l&&s&&!u&&!c||r&&l&&s||!n&&s||!o)return 1;if(!r&&!a&&!c&&e<t||c&&n&&o&&!r&&!a||u&&n&&o||!l&&o||!s)return-1}return 0}function ti(e,t,n,o){for(var i=-1,a=e.length,l=n.length,u=-1,s=t.length,c=Hn(a-l,0),f=r(s+c),p=!o;++u<s;)f[u]=t[u];for(;++i<l;)(p||i<a)&&(f[n[i]]=e[i]);for(;c--;)f[u++]=e[i++];return f}function ni(e,t,n,o){for(var i=-1,a=e.length,l=-1,u=n.length,s=-1,c=t.length,f=Hn(a-u,0),p=r(f+c),d=!o;++i<f;)p[i]=e[i];for(var m=i;++s<c;)p[m+s]=t[s];for(;++l<u;)(d||i<a)&&(p[m+n[l]]=e[i++]);return p}function ri(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function oi(e,t,n,r){var o=!n;n||(n={});for(var a=-1,l=t.length;++a<l;){var u=t[a],s=r?r(n[u],e[u],u,n,e):i;s===i&&(s=e[u]),o?Ir(n,u,s):Cr(n,u,s)}return n}function ii(e,t){return function(n,r){var o=vl(n)?Vt:Nr,i=t?t():{};return o(n,e,Fi(r,2),i)}}function ai(e){return xo(function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,l=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,l&&Yi(n[0],n[1],l)&&(a=o<3?i:a,o=1),t=tt(t);++r<o;){var u=n[r];u&&e(t,u,r,a)}return t})}function li(e,t){return function(n,r){if(null==n)return n;if(!gl(n))return e(n,r);for(var o=n.length,i=t?o:-1,a=tt(n);(t?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function ui(e){return function(t,n,r){for(var o=-1,i=tt(t),a=r(t),l=a.length;l--;){var u=a[e?l:++o];if(!1===n(i[u],u,i))break}return t}}function si(e){return function(t){var n=Sn(t=Hl(t))?In(t):i,r=n?n[0]:t.charAt(0),o=n?Go(n,1).join(""):t.slice(1);return r[e]()+o}}function ci(e){return function(t){return tn(xu(yu(t).replace(bt,"")),e,"")}}function fi(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=mr(e.prototype),r=e.apply(n,t);return Ol(r)?r:n}}function pi(e){return function(t,n,r){var o=tt(t);if(!gl(t)){var a=Fi(n,3);t=ou(t),n=function(e){return a(o[e],e,o)}}var l=e(t,n,r);return l>-1?o[a?t[l]:l]:i}}function di(e){return Ni(function(t){var n=t.length,r=n,o=yr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new ot(u);if(o&&!l&&"wrapper"==Ai(a))var l=new yr([],!0)}for(r=l?r:n;++r<n;){var s=Ai(a=t[r]),c="wrapper"==s?Ri(a):i;l=c&&Gi(c[0])&&c[1]==(x|_|E|S)&&!c[4].length&&1==c[9]?l[Ai(c[0])].apply(l,c[3]):1==a.length&&Gi(a)?l[s]():l.thru(a)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&vl(r))return l.plant(r).value();for(var o=0,i=n?t[o].apply(this,e):r;++o<n;)i=t[o].call(this,i);return i}})}function mi(e,t,n,o,a,l,u,s,c,f){var p=t&x,d=t&v,m=t&b,h=t&(_|w),y=t&T,g=m?i:fi(e);return function v(){for(var b=arguments.length,_=r(b),w=b;w--;)_[w]=arguments[w];if(h)var E=$i(v),k=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(_,E);if(o&&(_=ti(_,o,a,h)),l&&(_=ni(_,l,u,h)),b-=k,h&&b<f){var x=Cn(_,E);return wi(e,t,mi,v.placeholder,n,_,x,s,c,f-b)}var S=d?n:this,T=m?S[e]:e;return b=_.length,s?_=function(e,t){for(var n=e.length,r=Vn(t.length,n),o=ri(e);r--;){var a=t[r];e[r]=Vi(a,n)?o[a]:i}return e}(_,s):y&&b>1&&_.reverse(),p&&c<b&&(_.length=c),this&&this!==Rt&&this instanceof v&&(T=g||fi(T)),T.apply(S,_)}}function hi(e,t){return function(n,r){return function(e,t,n,r){return Yr(e,function(e,o,i){t(r,n(e),o,i)}),r}(n,e,t(r),{})}}function yi(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=Lo(n),r=Lo(r)):(n=Fo(n),r=Fo(r)),o=e(n,r)}return o}}function vi(e){return Ni(function(t){return t=Zt(t,vn(Fi())),xo(function(n){var r=this;return e(t,function(e){return Ht(e,r,n)})})})}function bi(e,t){var n=(t=t===i?" ":Lo(t)).length;if(n<2)return n?ko(t,e):t;var r=ko(t,Un(e/jn(t)));return Sn(t)?Go(In(r),0,e).join(""):r.slice(0,e)}function gi(e){return function(t,n,o){return o&&"number"!=typeof o&&Yi(t,n,o)&&(n=o=i),t=zl(t),n===i?(n=t,t=0):n=zl(n),function(e,t,n,o){for(var i=-1,a=Hn(Un((t-e)/(n||1)),0),l=r(a);a--;)l[o?a:++i]=e,e+=n;return l}(t,n,o=o===i?t<n?1:-1:zl(o),e)}}function _i(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Wl(t),n=Wl(n)),e(t,n)}}function wi(e,t,n,r,o,a,l,u,s,c){var f=t&_;t|=f?E:k,(t&=~(f?k:E))&g||(t&=~(v|b));var p=[e,t,o,f?a:i,f?l:i,f?i:a,f?i:l,u,s,c],d=n.apply(i,p);return Gi(e)&&ra(d,p),d.placeholder=r,aa(d,e,t)}function Ei(e){var t=et[e];return function(e,n){if(e=Wl(e),n=null==n?0:Vn(Ml(n),292)){var r=(Hl(e)+"e").split("e");return+((r=(Hl(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var ki=er&&1/Pn(new er([,-0]))[1]==R?function(e){return new er(e)}:$u;function xi(e){return function(t){var n=Bi(t);return n==K?Tn(t):n==ne?Nn(t):function(e,t){return Zt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Si(e,t,n,o,a,l,s,c){var p=t&b;if(!p&&"function"!=typeof e)throw new ot(u);var d=o?o.length:0;if(d||(t&=~(E|k),o=a=i),s=s===i?s:Hn(Ml(s),0),c=c===i?c:Ml(c),d-=a?a.length:0,t&k){var m=o,h=a;o=a=i}var y=p?i:Ri(e),T=[e,t,n,o,a,m,h,l,s,c];if(y&&function(e,t){var n=e[1],r=t[1],o=n|r,i=o<(v|b|x),a=r==x&&n==_||r==x&&n==S&&e[7].length<=t[8]||r==(x|S)&&t[7].length<=t[8]&&n==_;if(!i&&!a)return e;r&v&&(e[2]=t[2],o|=n&v?0:g);var l=t[3];if(l){var u=e[3];e[3]=u?ti(u,l,t[4]):l,e[4]=u?Cn(e[3],f):t[4]}(l=t[5])&&(u=e[5],e[5]=u?ni(u,l,t[6]):l,e[6]=u?Cn(e[5],f):t[6]),(l=t[7])&&(e[7]=l),r&x&&(e[8]=null==e[8]?t[8]:Vn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=o}(T,y),e=T[0],t=T[1],n=T[2],o=T[3],a=T[4],!(c=T[9]=T[9]===i?p?0:e.length:Hn(T[9]-d,0))&&t&(_|w)&&(t&=~(_|w)),t&&t!=v)O=t==_||t==w?function(e,t,n){var o=fi(e);return function a(){for(var l=arguments.length,u=r(l),s=l,c=$i(a);s--;)u[s]=arguments[s];var f=l<3&&u[0]!==c&&u[l-1]!==c?[]:Cn(u,c);return(l-=f.length)<n?wi(e,t,mi,a.placeholder,i,u,f,i,i,n-l):Ht(this&&this!==Rt&&this instanceof a?o:e,this,u)}}(e,t,c):t!=E&&t!=(v|E)||a.length?mi.apply(i,T):function(e,t,n,o){var i=t&v,a=fi(e);return function t(){for(var l=-1,u=arguments.length,s=-1,c=o.length,f=r(c+u),p=this&&this!==Rt&&this instanceof t?a:e;++s<c;)f[s]=o[s];for(;u--;)f[s++]=arguments[++l];return Ht(p,i?n:this,f)}}(e,t,n,o);else var O=function(e,t,n){var r=t&v,o=fi(e);return function t(){return(this&&this!==Rt&&this instanceof t?o:e).apply(r?n:this,arguments)}}(e,t,n);return aa((y?Co:ra)(O,T),e,t)}function Ti(e,t,n,r){return e===i||dl(e,lt[n])&&!ct.call(r,n)?t:e}function Oi(e,t,n,r,o,a){return Ol(e)&&Ol(t)&&(a.set(t,e),yo(e,t,i,Oi,a),a.delete(t)),e}function Ci(e){return jl(e)?i:e}function Pi(e,t,n,r,o,a){var l=n&h,u=e.length,s=t.length;if(u!=s&&!(l&&s>u))return!1;var c=a.get(e);if(c&&a.get(t))return c==t;var f=-1,p=!0,d=n&y?new wr:i;for(a.set(e,t),a.set(t,e);++f<u;){var m=e[f],v=t[f];if(r)var b=l?r(v,m,f,t,e,a):r(m,v,f,e,t,a);if(b!==i){if(b)continue;p=!1;break}if(d){if(!rn(t,function(e,t){if(!gn(d,t)&&(m===e||o(m,e,n,r,a)))return d.push(t)})){p=!1;break}}else if(m!==v&&!o(m,v,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function Ni(e){return ia(ea(e,i,ba),e+"")}function ji(e){return Xr(e,ou,zi)}function Ii(e){return Xr(e,iu,Mi)}var Ri=rr?function(e){return rr.get(e)}:$u;function Ai(e){for(var t=e.name+"",n=or[t],r=ct.call(or,t)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function $i(e){return(ct.call(dr,"placeholder")?dr:e).placeholder}function Fi(){var e=dr.iteratee||ju;return e=e===ju?uo:e,arguments.length?e(arguments[0],arguments[1]):e}function Li(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Ui(e){for(var t=ou(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,Ji(o)]}return t}function Di(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return lo(n)?n:i}var zi=zn?function(e){return null==e?[]:(e=tt(e),Kt(zn(e),function(t){return At.call(e,t)}))}:Bu,Mi=zn?function(e){for(var t=[];e;)en(t,zi(e)),e=jt(e);return t}:Bu,Bi=Jr;function Wi(e,t,n){for(var r=-1,o=(t=Yo(t,e)).length,i=!1;++r<o;){var a=ca(t[r]);if(!(i=null!=e&&n(e,a)))break;e=e[a]}return i||++r!=o?i:!!(o=null==e?0:e.length)&&Tl(o)&&Vi(a,o)&&(vl(e)||yl(e))}function qi(e){return"function"!=typeof e.constructor||Xi(e)?{}:mr(jt(e))}function Hi(e){return vl(e)||yl(e)||!!(Lt&&e&&e[Lt])}function Vi(e,t){var n=typeof e;return!!(t=null==t?A:t)&&("number"==n||"symbol"!=n&&Qe.test(e))&&e>-1&&e%1==0&&e<t}function Yi(e,t,n){if(!Ol(n))return!1;var r=typeof t;return!!("number"==r?gl(n)&&Vi(t,n.length):"string"==r&&t in n)&&dl(n[t],e)}function Qi(e,t){if(vl(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!$l(e))||Ne.test(e)||!Pe.test(e)||null!=t&&e in tt(t)}function Gi(e){var t=Ai(e),n=dr[t];if("function"!=typeof n||!(t in vr.prototype))return!1;if(e===n)return!0;var r=Ri(n);return!!r&&e===r[0]}(Xn&&Bi(new Xn(new ArrayBuffer(1)))!=se||Jn&&Bi(new Jn)!=K||Zn&&"[object Promise]"!=Bi(Zn.resolve())||er&&Bi(new er)!=ne||tr&&Bi(new tr)!=ae)&&(Bi=function(e){var t=Jr(e),n=t==Z?e.constructor:i,r=n?fa(n):"";if(r)switch(r){case ir:return se;case ar:return K;case lr:return"[object Promise]";case ur:return ne;case sr:return ae}return t});var Ki=ut?xl:Wu;function Xi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||lt)}function Ji(e){return e==e&&!Ol(e)}function Zi(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in tt(n))}}function ea(e,t,n){return t=Hn(t===i?e.length-1:t,0),function(){for(var o=arguments,i=-1,a=Hn(o.length-t,0),l=r(a);++i<a;)l[i]=o[t+i];i=-1;for(var u=r(t+1);++i<t;)u[i]=o[i];return u[t]=n(l),Ht(e,this,u)}}function ta(e,t){return t.length<2?e:Kr(e,jo(t,0,-1))}function na(e,t){if("__proto__"!=t)return e[t]}var ra=la(Co),oa=Ln||function(e,t){return Rt.setTimeout(e,t)},ia=la(Po);function aa(e,t,n){var r=t+"";return ia(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Le,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Yt(z,function(n){var r="_."+n[0];t&n[1]&&!Xt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(Ue);return t?t[1].split(De):[]}(r),n)))}function la(e){var t=0,n=0;return function(){var r=Yn(),o=N-(r-n);if(n=r,o>0){if(++t>=P)return arguments[0]}else t=0;return e.apply(i,arguments)}}function ua(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=Eo(n,o),l=e[a];e[a]=e[n],e[n]=l}return e.length=t,e}var sa=function(e){var t=ll(e,function(e){return n.size===c&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(je,function(e,n,r,o){t.push(r?o.replace(Me,"$1"):n||e)}),t});function ca(e){if("string"==typeof e||$l(e))return e;var t=e+"";return"0"==t&&1/e==-R?"-0":t}function fa(e){if(null!=e){try{return st.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function pa(e){if(e instanceof vr)return e.clone();var t=new yr(e.__wrapped__,e.__chain__);return t.__actions__=ri(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var da=xo(function(e,t){return _l(e)?Ur(e,qr(t,1,_l,!0)):[]}),ma=xo(function(e,t){var n=ka(t);return _l(n)&&(n=i),_l(e)?Ur(e,qr(t,1,_l,!0),Fi(n,2)):[]}),ha=xo(function(e,t){var n=ka(t);return _l(n)&&(n=i),_l(e)?Ur(e,qr(t,1,_l,!0),i,n):[]});function ya(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Ml(n);return o<0&&(o=Hn(r+o,0)),ln(e,Fi(t,3),o)}function va(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=Ml(n),o=n<0?Hn(r+o,0):Vn(o,r-1)),ln(e,Fi(t,3),o,!0)}function ba(e){return null!=e&&e.length?qr(e,1):[]}function ga(e){return e&&e.length?e[0]:i}var _a=xo(function(e){var t=Zt(e,Ho);return t.length&&t[0]===e[0]?no(t):[]}),wa=xo(function(e){var t=ka(e),n=Zt(e,Ho);return t===ka(n)?t=i:n.pop(),n.length&&n[0]===e[0]?no(n,Fi(t,2)):[]}),Ea=xo(function(e){var t=ka(e),n=Zt(e,Ho);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?no(n,i,t):[]});function ka(e){var t=null==e?0:e.length;return t?e[t-1]:i}var xa=xo(Sa);function Sa(e,t){return e&&e.length&&t&&t.length?_o(e,t):e}var Ta=Ni(function(e,t){var n=null==e?0:e.length,r=Rr(e,t);return wo(e,Zt(t,function(e){return Vi(e,n)?+e:e}).sort(ei)),r});function Oa(e){return null==e?e:Kn.call(e)}var Ca=xo(function(e){return Uo(qr(e,1,_l,!0))}),Pa=xo(function(e){var t=ka(e);return _l(t)&&(t=i),Uo(qr(e,1,_l,!0),Fi(t,2))}),Na=xo(function(e){var t=ka(e);return t="function"==typeof t?t:i,Uo(qr(e,1,_l,!0),i,t)});function ja(e){if(!e||!e.length)return[];var t=0;return e=Kt(e,function(e){if(_l(e))return t=Hn(e.length,t),!0}),yn(t,function(t){return Zt(e,pn(t))})}function Ia(e,t){if(!e||!e.length)return[];var n=ja(e);return null==t?n:Zt(n,function(e){return Ht(t,i,e)})}var Ra=xo(function(e,t){return _l(e)?Ur(e,t):[]}),Aa=xo(function(e){return Wo(Kt(e,_l))}),$a=xo(function(e){var t=ka(e);return _l(t)&&(t=i),Wo(Kt(e,_l),Fi(t,2))}),Fa=xo(function(e){var t=ka(e);return t="function"==typeof t?t:i,Wo(Kt(e,_l),i,t)}),La=xo(ja);var Ua=xo(function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,Ia(e,n)});function Da(e){var t=dr(e);return t.__chain__=!0,t}function za(e,t){return t(e)}var Ma=Ni(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return Rr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof vr&&Vi(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:za,args:[o],thisArg:i}),new yr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(i),e})):this.thru(o)});var Ba=ii(function(e,t,n){ct.call(e,n)?++e[n]:Ir(e,n,1)});var Wa=pi(ya),qa=pi(va);function Ha(e,t){return(vl(e)?Yt:Dr)(e,Fi(t,3))}function Va(e,t){return(vl(e)?Qt:zr)(e,Fi(t,3))}var Ya=ii(function(e,t,n){ct.call(e,n)?e[n].push(t):Ir(e,n,[t])});var Qa=xo(function(e,t,n){var o=-1,i="function"==typeof t,a=gl(e)?r(e.length):[];return Dr(e,function(e){a[++o]=i?Ht(t,e,n):ro(e,t,n)}),a}),Ga=ii(function(e,t,n){Ir(e,n,t)});function Ka(e,t){return(vl(e)?Zt:po)(e,Fi(t,3))}var Xa=ii(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Ja=xo(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Yi(e,t[0],t[1])?t=[]:n>2&&Yi(t[0],t[1],t[2])&&(t=[t[0]]),bo(e,qr(t,1),[])}),Za=Fn||function(){return Rt.Date.now()};function el(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Si(e,x,i,i,i,i,t)}function tl(e,t){var n;if("function"!=typeof t)throw new ot(u);return e=Ml(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var nl=xo(function(e,t,n){var r=v;if(n.length){var o=Cn(n,$i(nl));r|=E}return Si(e,r,t,n,o)}),rl=xo(function(e,t,n){var r=v|b;if(n.length){var o=Cn(n,$i(rl));r|=E}return Si(t,r,e,n,o)});function ol(e,t,n){var r,o,a,l,s,c,f=0,p=!1,d=!1,m=!0;if("function"!=typeof e)throw new ot(u);function h(t){var n=r,a=o;return r=o=i,f=t,l=e.apply(a,n)}function y(e){var n=e-c;return c===i||n>=t||n<0||d&&e-f>=a}function v(){var e=Za();if(y(e))return b(e);s=oa(v,function(e){var n=t-(e-c);return d?Vn(n,a-(e-f)):n}(e))}function b(e){return s=i,m&&r?h(e):(r=o=i,l)}function g(){var e=Za(),n=y(e);if(r=arguments,o=this,c=e,n){if(s===i)return function(e){return f=e,s=oa(v,t),p?h(e):l}(c);if(d)return s=oa(v,t),h(c)}return s===i&&(s=oa(v,t)),l}return t=Wl(t)||0,Ol(n)&&(p=!!n.leading,a=(d="maxWait"in n)?Hn(Wl(n.maxWait)||0,t):a,m="trailing"in n?!!n.trailing:m),g.cancel=function(){s!==i&&Ko(s),f=0,r=c=o=s=i},g.flush=function(){return s===i?l:b(Za())},g}var il=xo(function(e,t){return Lr(e,1,t)}),al=xo(function(e,t,n){return Lr(e,Wl(t)||0,n)});function ll(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ot(u);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(ll.Cache||_r),n}function ul(e){if("function"!=typeof e)throw new ot(u);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}ll.Cache=_r;var sl=Qo(function(e,t){var n=(t=1==t.length&&vl(t[0])?Zt(t[0],vn(Fi())):Zt(qr(t,1),vn(Fi()))).length;return xo(function(r){for(var o=-1,i=Vn(r.length,n);++o<i;)r[o]=t[o].call(this,r[o]);return Ht(e,this,r)})}),cl=xo(function(e,t){var n=Cn(t,$i(cl));return Si(e,E,i,t,n)}),fl=xo(function(e,t){var n=Cn(t,$i(fl));return Si(e,k,i,t,n)}),pl=Ni(function(e,t){return Si(e,S,i,i,i,t)});function dl(e,t){return e===t||e!=e&&t!=t}var ml=_i(Zr),hl=_i(function(e,t){return e>=t}),yl=oo(function(){return arguments}())?oo:function(e){return Cl(e)&&ct.call(e,"callee")&&!At.call(e,"callee")},vl=r.isArray,bl=Dt?vn(Dt):function(e){return Cl(e)&&Jr(e)==ue};function gl(e){return null!=e&&Tl(e.length)&&!xl(e)}function _l(e){return Cl(e)&&gl(e)}var wl=Mn||Wu,El=zt?vn(zt):function(e){return Cl(e)&&Jr(e)==H};function kl(e){if(!Cl(e))return!1;var t=Jr(e);return t==Y||t==V||"string"==typeof e.message&&"string"==typeof e.name&&!jl(e)}function xl(e){if(!Ol(e))return!1;var t=Jr(e);return t==Q||t==G||t==W||t==ee}function Sl(e){return"number"==typeof e&&e==Ml(e)}function Tl(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=A}function Ol(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Cl(e){return null!=e&&"object"==typeof e}var Pl=Mt?vn(Mt):function(e){return Cl(e)&&Bi(e)==K};function Nl(e){return"number"==typeof e||Cl(e)&&Jr(e)==X}function jl(e){if(!Cl(e)||Jr(e)!=Z)return!1;var t=jt(e);if(null===t)return!0;var n=ct.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&st.call(n)==mt}var Il=Bt?vn(Bt):function(e){return Cl(e)&&Jr(e)==te};var Rl=Wt?vn(Wt):function(e){return Cl(e)&&Bi(e)==ne};function Al(e){return"string"==typeof e||!vl(e)&&Cl(e)&&Jr(e)==re}function $l(e){return"symbol"==typeof e||Cl(e)&&Jr(e)==oe}var Fl=qt?vn(qt):function(e){return Cl(e)&&Tl(e.length)&&!!Tt[Jr(e)]};var Ll=_i(fo),Ul=_i(function(e,t){return e<=t});function Dl(e){if(!e)return[];if(gl(e))return Al(e)?In(e):ri(e);if(Ut&&e[Ut])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ut]());var t=Bi(e);return(t==K?Tn:t==ne?Pn:du)(e)}function zl(e){return e?(e=Wl(e))===R||e===-R?(e<0?-1:1)*$:e==e?e:0:0===e?e:0}function Ml(e){var t=zl(e),n=t%1;return t==t?n?t-n:t:0}function Bl(e){return e?Ar(Ml(e),0,L):0}function Wl(e){if("number"==typeof e)return e;if($l(e))return F;if(Ol(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ol(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Ae,"");var n=He.test(e);return n||Ye.test(e)?Nt(e.slice(2),n?2:8):qe.test(e)?F:+e}function ql(e){return oi(e,iu(e))}function Hl(e){return null==e?"":Lo(e)}var Vl=ai(function(e,t){if(Xi(t)||gl(t))oi(t,ou(t),e);else for(var n in t)ct.call(t,n)&&Cr(e,n,t[n])}),Yl=ai(function(e,t){oi(t,iu(t),e)}),Ql=ai(function(e,t,n,r){oi(t,iu(t),e,r)}),Gl=ai(function(e,t,n,r){oi(t,ou(t),e,r)}),Kl=Ni(Rr);var Xl=xo(function(e,t){e=tt(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&Yi(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],l=iu(a),u=-1,s=l.length;++u<s;){var c=l[u],f=e[c];(f===i||dl(f,lt[c])&&!ct.call(e,c))&&(e[c]=a[c])}return e}),Jl=xo(function(e){return e.push(i,Oi),Ht(lu,i,e)});function Zl(e,t,n){var r=null==e?i:Kr(e,t);return r===i?n:r}function eu(e,t){return null!=e&&Wi(e,t,to)}var tu=hi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n},Ou(Nu)),nu=hi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),ct.call(e,t)?e[t].push(n):e[t]=[n]},Fi),ru=xo(ro);function ou(e){return gl(e)?kr(e):so(e)}function iu(e){return gl(e)?kr(e,!0):co(e)}var au=ai(function(e,t,n){yo(e,t,n)}),lu=ai(function(e,t,n,r){yo(e,t,n,r)}),uu=Ni(function(e,t){var n={};if(null==e)return n;var r=!1;t=Zt(t,function(t){return t=Yo(t,e),r||(r=t.length>1),t}),oi(e,Ii(e),n),r&&(n=$r(n,p|d|m,Ci));for(var o=t.length;o--;)Do(n,t[o]);return n});var su=Ni(function(e,t){return null==e?{}:function(e,t){return go(e,t,function(t,n){return eu(e,n)})}(e,t)});function cu(e,t){if(null==e)return{};var n=Zt(Ii(e),function(e){return[e]});return t=Fi(t),go(e,n,function(e,n){return t(e,n[0])})}var fu=xi(ou),pu=xi(iu);function du(e){return null==e?[]:bn(e,ou(e))}var mu=ci(function(e,t,n){return t=t.toLowerCase(),e+(n?hu(t):t)});function hu(e){return ku(Hl(e).toLowerCase())}function yu(e){return(e=Hl(e))&&e.replace(Ge,En).replace(gt,"")}var vu=ci(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),bu=ci(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),gu=si("toLowerCase");var _u=ci(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var wu=ci(function(e,t,n){return e+(n?" ":"")+ku(t)});var Eu=ci(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),ku=si("toUpperCase");function xu(e,t,n){return e=Hl(e),(t=n?i:t)===i?function(e){return kt.test(e)}(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.match(ze)||[]}(e):e.match(t)||[]}var Su=xo(function(e,t){try{return Ht(e,i,t)}catch(e){return kl(e)?e:new Je(e)}}),Tu=Ni(function(e,t){return Yt(t,function(t){t=ca(t),Ir(e,t,nl(e[t],e))}),e});function Ou(e){return function(){return e}}var Cu=di(),Pu=di(!0);function Nu(e){return e}function ju(e){return uo("function"==typeof e?e:$r(e,p))}var Iu=xo(function(e,t){return function(n){return ro(n,e,t)}}),Ru=xo(function(e,t){return function(n){return ro(e,n,t)}});function Au(e,t,n){var r=ou(t),o=Gr(t,r);null!=n||Ol(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=Gr(t,ou(t)));var i=!(Ol(n)&&"chain"in n&&!n.chain),a=xl(e);return Yt(o,function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__);return(n.__actions__=ri(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function $u(){}var Fu=vi(Zt),Lu=vi(Gt),Uu=vi(rn);function Du(e){return Qi(e)?pn(ca(e)):function(e){return function(t){return Kr(t,e)}}(e)}var zu=gi(),Mu=gi(!0);function Bu(){return[]}function Wu(){return!1}var qu=yi(function(e,t){return e+t},0),Hu=Ei("ceil"),Vu=yi(function(e,t){return e/t},1),Yu=Ei("floor");var Qu,Gu=yi(function(e,t){return e*t},1),Ku=Ei("round"),Xu=yi(function(e,t){return e-t},0);return dr.after=function(e,t){if("function"!=typeof t)throw new ot(u);return e=Ml(e),function(){if(--e<1)return t.apply(this,arguments)}},dr.ary=el,dr.assign=Vl,dr.assignIn=Yl,dr.assignInWith=Ql,dr.assignWith=Gl,dr.at=Kl,dr.before=tl,dr.bind=nl,dr.bindAll=Tu,dr.bindKey=rl,dr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return vl(e)?e:[e]},dr.chain=Da,dr.chunk=function(e,t,n){t=(n?Yi(e,t,n):t===i)?1:Hn(Ml(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,l=0,u=r(Un(o/t));a<o;)u[l++]=jo(e,a,a+=t);return u},dr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var i=e[t];i&&(o[r++]=i)}return o},dr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return en(vl(n)?ri(n):[n],qr(t,1))},dr.cond=function(e){var t=null==e?0:e.length,n=Fi();return e=t?Zt(e,function(e){if("function"!=typeof e[1])throw new ot(u);return[n(e[0]),e[1]]}):[],xo(function(n){for(var r=-1;++r<t;){var o=e[r];if(Ht(o[0],this,n))return Ht(o[1],this,n)}})},dr.conforms=function(e){return function(e){var t=ou(e);return function(n){return Fr(n,e,t)}}($r(e,p))},dr.constant=Ou,dr.countBy=Ba,dr.create=function(e,t){var n=mr(e);return null==t?n:jr(n,t)},dr.curry=function e(t,n,r){var o=Si(t,_,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},dr.curryRight=function e(t,n,r){var o=Si(t,w,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},dr.debounce=ol,dr.defaults=Xl,dr.defaultsDeep=Jl,dr.defer=il,dr.delay=al,dr.difference=da,dr.differenceBy=ma,dr.differenceWith=ha,dr.drop=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,(t=n||t===i?1:Ml(t))<0?0:t,r):[]},dr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,0,(t=r-(t=n||t===i?1:Ml(t)))<0?0:t):[]},dr.dropRightWhile=function(e,t){return e&&e.length?Mo(e,Fi(t,3),!0,!0):[]},dr.dropWhile=function(e,t){return e&&e.length?Mo(e,Fi(t,3),!0):[]},dr.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Yi(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=Ml(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:Ml(r))<0&&(r+=o),r=n>r?0:Bl(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},dr.filter=function(e,t){return(vl(e)?Kt:Wr)(e,Fi(t,3))},dr.flatMap=function(e,t){return qr(Ka(e,t),1)},dr.flatMapDeep=function(e,t){return qr(Ka(e,t),R)},dr.flatMapDepth=function(e,t,n){return n=n===i?1:Ml(n),qr(Ka(e,t),n)},dr.flatten=ba,dr.flattenDeep=function(e){return null!=e&&e.length?qr(e,R):[]},dr.flattenDepth=function(e,t){return null!=e&&e.length?qr(e,t=t===i?1:Ml(t)):[]},dr.flip=function(e){return Si(e,T)},dr.flow=Cu,dr.flowRight=Pu,dr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},dr.functions=function(e){return null==e?[]:Gr(e,ou(e))},dr.functionsIn=function(e){return null==e?[]:Gr(e,iu(e))},dr.groupBy=Ya,dr.initial=function(e){return null!=e&&e.length?jo(e,0,-1):[]},dr.intersection=_a,dr.intersectionBy=wa,dr.intersectionWith=Ea,dr.invert=tu,dr.invertBy=nu,dr.invokeMap=Qa,dr.iteratee=ju,dr.keyBy=Ga,dr.keys=ou,dr.keysIn=iu,dr.map=Ka,dr.mapKeys=function(e,t){var n={};return t=Fi(t,3),Yr(e,function(e,r,o){Ir(n,t(e,r,o),e)}),n},dr.mapValues=function(e,t){var n={};return t=Fi(t,3),Yr(e,function(e,r,o){Ir(n,r,t(e,r,o))}),n},dr.matches=function(e){return mo($r(e,p))},dr.matchesProperty=function(e,t){return ho(e,$r(t,p))},dr.memoize=ll,dr.merge=au,dr.mergeWith=lu,dr.method=Iu,dr.methodOf=Ru,dr.mixin=Au,dr.negate=ul,dr.nthArg=function(e){return e=Ml(e),xo(function(t){return vo(t,e)})},dr.omit=uu,dr.omitBy=function(e,t){return cu(e,ul(Fi(t)))},dr.once=function(e){return tl(2,e)},dr.orderBy=function(e,t,n,r){return null==e?[]:(vl(t)||(t=null==t?[]:[t]),vl(n=r?i:n)||(n=null==n?[]:[n]),bo(e,t,n))},dr.over=Fu,dr.overArgs=sl,dr.overEvery=Lu,dr.overSome=Uu,dr.partial=cl,dr.partialRight=fl,dr.partition=Xa,dr.pick=su,dr.pickBy=cu,dr.property=Du,dr.propertyOf=function(e){return function(t){return null==e?i:Kr(e,t)}},dr.pull=xa,dr.pullAll=Sa,dr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?_o(e,t,Fi(n,2)):e},dr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?_o(e,t,i,n):e},dr.pullAt=Ta,dr.range=zu,dr.rangeRight=Mu,dr.rearg=pl,dr.reject=function(e,t){return(vl(e)?Kt:Wr)(e,ul(Fi(t,3)))},dr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],i=e.length;for(t=Fi(t,3);++r<i;){var a=e[r];t(a,r,e)&&(n.push(a),o.push(r))}return wo(e,o),n},dr.rest=function(e,t){if("function"!=typeof e)throw new ot(u);return xo(e,t=t===i?t:Ml(t))},dr.reverse=Oa,dr.sampleSize=function(e,t,n){return t=(n?Yi(e,t,n):t===i)?1:Ml(t),(vl(e)?Sr:To)(e,t)},dr.set=function(e,t,n){return null==e?e:Oo(e,t,n)},dr.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Oo(e,t,n,r)},dr.shuffle=function(e){return(vl(e)?Tr:No)(e)},dr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Yi(e,t,n)?(t=0,n=r):(t=null==t?0:Ml(t),n=n===i?r:Ml(n)),jo(e,t,n)):[]},dr.sortBy=Ja,dr.sortedUniq=function(e){return e&&e.length?$o(e):[]},dr.sortedUniqBy=function(e,t){return e&&e.length?$o(e,Fi(t,2)):[]},dr.split=function(e,t,n){return n&&"number"!=typeof n&&Yi(e,t,n)&&(t=n=i),(n=n===i?L:n>>>0)?(e=Hl(e))&&("string"==typeof t||null!=t&&!Il(t))&&!(t=Lo(t))&&Sn(e)?Go(In(e),0,n):e.split(t,n):[]},dr.spread=function(e,t){if("function"!=typeof e)throw new ot(u);return t=null==t?0:Hn(Ml(t),0),xo(function(n){var r=n[t],o=Go(n,0,t);return r&&en(o,r),Ht(e,this,o)})},dr.tail=function(e){var t=null==e?0:e.length;return t?jo(e,1,t):[]},dr.take=function(e,t,n){return e&&e.length?jo(e,0,(t=n||t===i?1:Ml(t))<0?0:t):[]},dr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,(t=r-(t=n||t===i?1:Ml(t)))<0?0:t,r):[]},dr.takeRightWhile=function(e,t){return e&&e.length?Mo(e,Fi(t,3),!1,!0):[]},dr.takeWhile=function(e,t){return e&&e.length?Mo(e,Fi(t,3)):[]},dr.tap=function(e,t){return t(e),e},dr.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new ot(u);return Ol(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ol(e,t,{leading:r,maxWait:t,trailing:o})},dr.thru=za,dr.toArray=Dl,dr.toPairs=fu,dr.toPairsIn=pu,dr.toPath=function(e){return vl(e)?Zt(e,ca):$l(e)?[e]:ri(sa(Hl(e)))},dr.toPlainObject=ql,dr.transform=function(e,t,n){var r=vl(e),o=r||wl(e)||Fl(e);if(t=Fi(t,4),null==n){var i=e&&e.constructor;n=o?r?new i:[]:Ol(e)&&xl(i)?mr(jt(e)):{}}return(o?Yt:Yr)(e,function(e,r,o){return t(n,e,r,o)}),n},dr.unary=function(e){return el(e,1)},dr.union=Ca,dr.unionBy=Pa,dr.unionWith=Na,dr.uniq=function(e){return e&&e.length?Uo(e):[]},dr.uniqBy=function(e,t){return e&&e.length?Uo(e,Fi(t,2)):[]},dr.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?Uo(e,i,t):[]},dr.unset=function(e,t){return null==e||Do(e,t)},dr.unzip=ja,dr.unzipWith=Ia,dr.update=function(e,t,n){return null==e?e:zo(e,t,Vo(n))},dr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:zo(e,t,Vo(n),r)},dr.values=du,dr.valuesIn=function(e){return null==e?[]:bn(e,iu(e))},dr.without=Ra,dr.words=xu,dr.wrap=function(e,t){return cl(Vo(t),e)},dr.xor=Aa,dr.xorBy=$a,dr.xorWith=Fa,dr.zip=La,dr.zipObject=function(e,t){return qo(e||[],t||[],Cr)},dr.zipObjectDeep=function(e,t){return qo(e||[],t||[],Oo)},dr.zipWith=Ua,dr.entries=fu,dr.entriesIn=pu,dr.extend=Yl,dr.extendWith=Ql,Au(dr,dr),dr.add=qu,dr.attempt=Su,dr.camelCase=mu,dr.capitalize=hu,dr.ceil=Hu,dr.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=Wl(n))==n?n:0),t!==i&&(t=(t=Wl(t))==t?t:0),Ar(Wl(e),t,n)},dr.clone=function(e){return $r(e,m)},dr.cloneDeep=function(e){return $r(e,p|m)},dr.cloneDeepWith=function(e,t){return $r(e,p|m,t="function"==typeof t?t:i)},dr.cloneWith=function(e,t){return $r(e,m,t="function"==typeof t?t:i)},dr.conformsTo=function(e,t){return null==t||Fr(e,t,ou(t))},dr.deburr=yu,dr.defaultTo=function(e,t){return null==e||e!=e?t:e},dr.divide=Vu,dr.endsWith=function(e,t,n){e=Hl(e),t=Lo(t);var r=e.length,o=n=n===i?r:Ar(Ml(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},dr.eq=dl,dr.escape=function(e){return(e=Hl(e))&&Se.test(e)?e.replace(ke,kn):e},dr.escapeRegExp=function(e){return(e=Hl(e))&&Re.test(e)?e.replace(Ie,"\\$&"):e},dr.every=function(e,t,n){var r=vl(e)?Gt:Mr;return n&&Yi(e,t,n)&&(t=i),r(e,Fi(t,3))},dr.find=Wa,dr.findIndex=ya,dr.findKey=function(e,t){return an(e,Fi(t,3),Yr)},dr.findLast=qa,dr.findLastIndex=va,dr.findLastKey=function(e,t){return an(e,Fi(t,3),Qr)},dr.floor=Yu,dr.forEach=Ha,dr.forEachRight=Va,dr.forIn=function(e,t){return null==e?e:Hr(e,Fi(t,3),iu)},dr.forInRight=function(e,t){return null==e?e:Vr(e,Fi(t,3),iu)},dr.forOwn=function(e,t){return e&&Yr(e,Fi(t,3))},dr.forOwnRight=function(e,t){return e&&Qr(e,Fi(t,3))},dr.get=Zl,dr.gt=ml,dr.gte=hl,dr.has=function(e,t){return null!=e&&Wi(e,t,eo)},dr.hasIn=eu,dr.head=ga,dr.identity=Nu,dr.includes=function(e,t,n,r){e=gl(e)?e:du(e),n=n&&!r?Ml(n):0;var o=e.length;return n<0&&(n=Hn(o+n,0)),Al(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&un(e,t,n)>-1},dr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Ml(n);return o<0&&(o=Hn(r+o,0)),un(e,t,o)},dr.inRange=function(e,t,n){return t=zl(t),n===i?(n=t,t=0):n=zl(n),function(e,t,n){return e>=Vn(t,n)&&e<Hn(t,n)}(e=Wl(e),t,n)},dr.invoke=ru,dr.isArguments=yl,dr.isArray=vl,dr.isArrayBuffer=bl,dr.isArrayLike=gl,dr.isArrayLikeObject=_l,dr.isBoolean=function(e){return!0===e||!1===e||Cl(e)&&Jr(e)==q},dr.isBuffer=wl,dr.isDate=El,dr.isElement=function(e){return Cl(e)&&1===e.nodeType&&!jl(e)},dr.isEmpty=function(e){if(null==e)return!0;if(gl(e)&&(vl(e)||"string"==typeof e||"function"==typeof e.splice||wl(e)||Fl(e)||yl(e)))return!e.length;var t=Bi(e);if(t==K||t==ne)return!e.size;if(Xi(e))return!so(e).length;for(var n in e)if(ct.call(e,n))return!1;return!0},dr.isEqual=function(e,t){return io(e,t)},dr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?io(e,t,i,n):!!r},dr.isError=kl,dr.isFinite=function(e){return"number"==typeof e&&Bn(e)},dr.isFunction=xl,dr.isInteger=Sl,dr.isLength=Tl,dr.isMap=Pl,dr.isMatch=function(e,t){return e===t||ao(e,t,Ui(t))},dr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,ao(e,t,Ui(t),n)},dr.isNaN=function(e){return Nl(e)&&e!=+e},dr.isNative=function(e){if(Ki(e))throw new Je(l);return lo(e)},dr.isNil=function(e){return null==e},dr.isNull=function(e){return null===e},dr.isNumber=Nl,dr.isObject=Ol,dr.isObjectLike=Cl,dr.isPlainObject=jl,dr.isRegExp=Il,dr.isSafeInteger=function(e){return Sl(e)&&e>=-A&&e<=A},dr.isSet=Rl,dr.isString=Al,dr.isSymbol=$l,dr.isTypedArray=Fl,dr.isUndefined=function(e){return e===i},dr.isWeakMap=function(e){return Cl(e)&&Bi(e)==ae},dr.isWeakSet=function(e){return Cl(e)&&Jr(e)==le},dr.join=function(e,t){return null==e?"":Wn.call(e,t)},dr.kebabCase=vu,dr.last=ka,dr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=Ml(n))<0?Hn(r+o,0):Vn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):ln(e,cn,o,!0)},dr.lowerCase=bu,dr.lowerFirst=gu,dr.lt=Ll,dr.lte=Ul,dr.max=function(e){return e&&e.length?Br(e,Nu,Zr):i},dr.maxBy=function(e,t){return e&&e.length?Br(e,Fi(t,2),Zr):i},dr.mean=function(e){return fn(e,Nu)},dr.meanBy=function(e,t){return fn(e,Fi(t,2))},dr.min=function(e){return e&&e.length?Br(e,Nu,fo):i},dr.minBy=function(e,t){return e&&e.length?Br(e,Fi(t,2),fo):i},dr.stubArray=Bu,dr.stubFalse=Wu,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Gu,dr.nth=function(e,t){return e&&e.length?vo(e,Ml(t)):i},dr.noConflict=function(){return Rt._===this&&(Rt._=ht),this},dr.noop=$u,dr.now=Za,dr.pad=function(e,t,n){e=Hl(e);var r=(t=Ml(t))?jn(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return bi(Dn(o),n)+e+bi(Un(o),n)},dr.padEnd=function(e,t,n){e=Hl(e);var r=(t=Ml(t))?jn(e):0;return t&&r<t?e+bi(t-r,n):e},dr.padStart=function(e,t,n){e=Hl(e);var r=(t=Ml(t))?jn(e):0;return t&&r<t?bi(t-r,n)+e:e},dr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Qn(Hl(e).replace($e,""),t||0)},dr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Yi(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=zl(e),t===i?(t=e,e=0):t=zl(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=Gn();return Vn(e+o*(t-e+Pt("1e-"+((o+"").length-1))),t)}return Eo(e,t)},dr.reduce=function(e,t,n){var r=vl(e)?tn:mn,o=arguments.length<3;return r(e,Fi(t,4),n,o,Dr)},dr.reduceRight=function(e,t,n){var r=vl(e)?nn:mn,o=arguments.length<3;return r(e,Fi(t,4),n,o,zr)},dr.repeat=function(e,t,n){return t=(n?Yi(e,t,n):t===i)?1:Ml(t),ko(Hl(e),t)},dr.replace=function(){var e=arguments,t=Hl(e[0]);return e.length<3?t:t.replace(e[1],e[2])},dr.result=function(e,t,n){var r=-1,o=(t=Yo(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[ca(t[r])];a===i&&(r=o,a=n),e=xl(a)?a.call(e):a}return e},dr.round=Ku,dr.runInContext=e,dr.sample=function(e){return(vl(e)?xr:So)(e)},dr.size=function(e){if(null==e)return 0;if(gl(e))return Al(e)?jn(e):e.length;var t=Bi(e);return t==K||t==ne?e.size:so(e).length},dr.snakeCase=_u,dr.some=function(e,t,n){var r=vl(e)?rn:Io;return n&&Yi(e,t,n)&&(t=i),r(e,Fi(t,3))},dr.sortedIndex=function(e,t){return Ro(e,t)},dr.sortedIndexBy=function(e,t,n){return Ao(e,t,Fi(n,2))},dr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Ro(e,t);if(r<n&&dl(e[r],t))return r}return-1},dr.sortedLastIndex=function(e,t){return Ro(e,t,!0)},dr.sortedLastIndexBy=function(e,t,n){return Ao(e,t,Fi(n,2),!0)},dr.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=Ro(e,t,!0)-1;if(dl(e[n],t))return n}return-1},dr.startCase=wu,dr.startsWith=function(e,t,n){return e=Hl(e),n=null==n?0:Ar(Ml(n),0,e.length),t=Lo(t),e.slice(n,n+t.length)==t},dr.subtract=Xu,dr.sum=function(e){return e&&e.length?hn(e,Nu):0},dr.sumBy=function(e,t){return e&&e.length?hn(e,Fi(t,2)):0},dr.template=function(e,t,n){var r=dr.templateSettings;n&&Yi(e,t,n)&&(t=i),e=Hl(e),t=Ql({},t,r,Ti);var o,a,l=Ql({},t.imports,r.imports,Ti),u=ou(l),s=bn(l,u),c=0,f=t.interpolate||Ke,p="__p += '",d=nt((t.escape||Ke).source+"|"+f.source+"|"+(f===Ce?Be:Ke).source+"|"+(t.evaluate||Ke).source+"|$","g"),m="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++St+"]")+"\n";e.replace(d,function(t,n,r,i,l,u){return r||(r=i),p+=e.slice(c,u).replace(Xe,xn),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),l&&(a=!0,p+="';\n"+l+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+t.length,t}),p+="';\n";var h=t.variable;h||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(ge,""):p).replace(_e,"$1").replace(we,"$1;"),p="function("+(h||"obj")+") {\n"+(h?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var y=Su(function(){return Ze(u,m+"return "+p).apply(i,s)});if(y.source=p,kl(y))throw y;return y},dr.times=function(e,t){if((e=Ml(e))<1||e>A)return[];var n=L,r=Vn(e,L);t=Fi(t),e-=L;for(var o=yn(r,t);++n<e;)t(n);return o},dr.toFinite=zl,dr.toInteger=Ml,dr.toLength=Bl,dr.toLower=function(e){return Hl(e).toLowerCase()},dr.toNumber=Wl,dr.toSafeInteger=function(e){return e?Ar(Ml(e),-A,A):0===e?e:0},dr.toString=Hl,dr.toUpper=function(e){return Hl(e).toUpperCase()},dr.trim=function(e,t,n){if((e=Hl(e))&&(n||t===i))return e.replace(Ae,"");if(!e||!(t=Lo(t)))return e;var r=In(e),o=In(t);return Go(r,_n(r,o),wn(r,o)+1).join("")},dr.trimEnd=function(e,t,n){if((e=Hl(e))&&(n||t===i))return e.replace(Fe,"");if(!e||!(t=Lo(t)))return e;var r=In(e);return Go(r,0,wn(r,In(t))+1).join("")},dr.trimStart=function(e,t,n){if((e=Hl(e))&&(n||t===i))return e.replace($e,"");if(!e||!(t=Lo(t)))return e;var r=In(e);return Go(r,_n(r,In(t))).join("")},dr.truncate=function(e,t){var n=O,r=C;if(Ol(t)){var o="separator"in t?t.separator:o;n="length"in t?Ml(t.length):n,r="omission"in t?Lo(t.omission):r}var a=(e=Hl(e)).length;if(Sn(e)){var l=In(e);a=l.length}if(n>=a)return e;var u=n-jn(r);if(u<1)return r;var s=l?Go(l,0,u).join(""):e.slice(0,u);if(o===i)return s+r;if(l&&(u+=s.length-u),Il(o)){if(e.slice(u).search(o)){var c,f=s;for(o.global||(o=nt(o.source,Hl(We.exec(o))+"g")),o.lastIndex=0;c=o.exec(f);)var p=c.index;s=s.slice(0,p===i?u:p)}}else if(e.indexOf(Lo(o),u)!=u){var d=s.lastIndexOf(o);d>-1&&(s=s.slice(0,d))}return s+r},dr.unescape=function(e){return(e=Hl(e))&&xe.test(e)?e.replace(Ee,Rn):e},dr.uniqueId=function(e){var t=++ft;return Hl(e)+t},dr.upperCase=Eu,dr.upperFirst=ku,dr.each=Ha,dr.eachRight=Va,dr.first=ga,Au(dr,(Qu={},Yr(dr,function(e,t){ct.call(dr.prototype,t)||(Qu[t]=e)}),Qu),{chain:!1}),dr.VERSION="4.17.11",Yt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){dr[e].placeholder=dr}),Yt(["drop","take"],function(e,t){vr.prototype[e]=function(n){n=n===i?1:Hn(Ml(n),0);var r=this.__filtered__&&!t?new vr(this):this.clone();return r.__filtered__?r.__takeCount__=Vn(n,r.__takeCount__):r.__views__.push({size:Vn(n,L),type:e+(r.__dir__<0?"Right":"")}),r},vr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Yt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==j||3==n;vr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Fi(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Yt(["head","last"],function(e,t){var n="take"+(t?"Right":"");vr.prototype[e]=function(){return this[n](1).value()[0]}}),Yt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");vr.prototype[e]=function(){return this.__filtered__?new vr(this):this[n](1)}}),vr.prototype.compact=function(){return this.filter(Nu)},vr.prototype.find=function(e){return this.filter(e).head()},vr.prototype.findLast=function(e){return this.reverse().find(e)},vr.prototype.invokeMap=xo(function(e,t){return"function"==typeof e?new vr(this):this.map(function(n){return ro(n,e,t)})}),vr.prototype.reject=function(e){return this.filter(ul(Fi(e)))},vr.prototype.slice=function(e,t){e=Ml(e);var n=this;return n.__filtered__&&(e>0||t<0)?new vr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=Ml(t))<0?n.dropRight(-t):n.take(t-e)),n)},vr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},vr.prototype.toArray=function(){return this.take(L)},Yr(vr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=dr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(dr.prototype[t]=function(){var t=this.__wrapped__,l=r?[1]:arguments,u=t instanceof vr,s=l[0],c=u||vl(t),f=function(e){var t=o.apply(dr,en([e],l));return r&&p?t[0]:t};c&&n&&"function"==typeof s&&1!=s.length&&(u=c=!1);var p=this.__chain__,d=!!this.__actions__.length,m=a&&!p,h=u&&!d;if(!a&&c){t=h?t:new vr(this);var y=e.apply(t,l);return y.__actions__.push({func:za,args:[f],thisArg:i}),new yr(y,p)}return m&&h?e.apply(this,l):(y=this.thru(f),m?r?y.value()[0]:y.value():y)})}),Yt(["pop","push","shift","sort","splice","unshift"],function(e){var t=it[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);dr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(vl(o)?o:[],e)}return this[n](function(n){return t.apply(vl(n)?n:[],e)})}}),Yr(vr.prototype,function(e,t){var n=dr[t];if(n){var r=n.name+"";(or[r]||(or[r]=[])).push({name:t,func:n})}}),or[mi(i,b).name]=[{name:"wrapper",func:i}],vr.prototype.clone=function(){var e=new vr(this.__wrapped__);return e.__actions__=ri(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=ri(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=ri(this.__views__),e},vr.prototype.reverse=function(){if(this.__filtered__){var e=new vr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},vr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=vl(e),r=t<0,o=n?e.length:0,i=function(e,t,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=Vn(t,e+a);break;case"takeRight":e=Hn(e,t-a)}}return{start:e,end:t}}(0,o,this.__views__),a=i.start,l=i.end,u=l-a,s=r?l:a-1,c=this.__iteratees__,f=c.length,p=0,d=Vn(u,this.__takeCount__);if(!n||!r&&o==u&&d==u)return Bo(e,this.__actions__);var m=[];e:for(;u--&&p<d;){for(var h=-1,y=e[s+=t];++h<f;){var v=c[h],b=v.iteratee,g=v.type,_=b(y);if(g==I)y=_;else if(!_){if(g==j)continue e;break e}}m[p++]=y}return m},dr.prototype.at=Ma,dr.prototype.chain=function(){return Da(this)},dr.prototype.commit=function(){return new yr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===i&&(this.__values__=Dl(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},dr.prototype.plant=function(e){for(var t,n=this;n instanceof hr;){var r=pa(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},dr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof vr){var t=e;return this.__actions__.length&&(t=new vr(this)),(t=t.reverse()).__actions__.push({func:za,args:[Oa],thisArg:i}),new yr(t,this.__chain__)}return this.thru(Oa)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Bo(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,Ut&&(dr.prototype[Ut]=function(){return this}),dr}();Rt._=An,(o=function(){return An}.call(t,n,t,r))===i||(r.exports=o)}).call(this)}).call(this,n(3),n(9)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";(function(e){function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}for(var r=["native code","[object MutationObserverConstructor]"],o="undefined"!=typeof window,i=["Edge","Trident","Firefox"],a=0,l=0;l<i.length;l+=1)if(o&&0<=navigator.userAgent.indexOf(i[l])){a=1;break}var u,s=o&&function(e){return r.some(function(t){return-1<(e||"").toString().indexOf(t)})}(window.MutationObserver)?function(e){var t=!1,n=0,r=document.createElement("span");return new MutationObserver(function(){e(),t=!1}).observe(r,{attributes:!0}),function(){t||(t=!0,r.setAttribute("x-index",n),++n)}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},a))}};function c(e){return e&&"[object Function]"==={}.toString.call(e)}function f(e,t){if(1!==e.nodeType)return[];var n=window.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function d(e){if(!e||-1!==["HTML","BODY","#document"].indexOf(e.nodeName))return window.document.body;var t=f(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll)/.test(n+o+r)?e:d(p(e))}function m(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===f(t,"position")?m(t):t:window.document.documentElement}function h(e){return null===e.parentNode?e:h(e.parentNode)}function y(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return window.document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a=i.commonAncestorContainer;if(e!==a&&t!==a||r.contains(o))return function(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||m(e.firstElementChild)===e)}(a)?a:m(a);var l=h(e);return l.host?y(l.host,t):y(e,h(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=window.document.documentElement;return(window.document.scrollingElement||r)[t]}return e[t]}function b(e,t){var n="x"===t?"Left":"Top",r="Left"==n?"Right":"Bottom";return+e["border".concat(n,"Width")].split("px")[0]+ +e["border".concat(r,"Width")].split("px")[0]}var g=function(){return null==u&&(u=-1!==navigator.appVersion.indexOf("MSIE 10")),u};function _(e,t,n,r){return Math.max(t["offset".concat(e)],t["scroll".concat(e)],n["client".concat(e)],n["offset".concat(e)],n["scroll".concat(e)],g()?n["offset".concat(e)]+r["margin".concat("Height"===e?"Top":"Left")]+r["margin".concat("Height"===e?"Bottom":"Right")]:0)}function w(){var e=window.document.body,t=window.document.documentElement,n=g()&&window.getComputedStyle(t);return{height:_("Height",e,t,n),width:_("Width",e,t,n)}}var E=Object.assign||function(e){for(var t,n=1;n<arguments.length;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e};function k(e){return E({},e,{right:e.left+e.width,bottom:e.top+e.height})}function x(e){var t={};if(g())try{t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}catch(e){}else t=e.getBoundingClientRect();var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?w():{},a=i.width||e.clientWidth||o.right-o.left,l=i.height||e.clientHeight||o.bottom-o.top,u=e.offsetWidth-a,s=e.offsetHeight-l;if(u||s){var c=f(e);u-=b(c,"x"),s-=b(c,"y"),o.width-=u,o.height-=s}return k(o)}function S(e,t){var n=g(),r="HTML"===t.nodeName,o=x(e),i=x(t),a=d(e),l=f(t),u=+l.borderTopWidth.split("px")[0],s=+l.borderLeftWidth.split("px")[0],c=k({top:o.top-i.top-u,left:o.left-i.left-s,width:o.width,height:o.height});if(c.marginTop=0,c.marginLeft=0,!n&&r){var p=+l.marginTop.split("px")[0],m=+l.marginLeft.split("px")[0];c.top-=u-p,c.bottom-=u-p,c.left-=s-m,c.right-=s-m,c.marginTop=p,c.marginLeft=m}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),o=v(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}(c,t)),c}function T(e,t,n,r){var o={top:0,left:0},i=y(e,t);if("viewport"===r)o=function(e){var t=Math.max,n=window.document.documentElement,r=S(e,n),o=t(n.clientWidth,window.innerWidth||0),i=t(n.clientHeight,window.innerHeight||0),a=v(n),l=v(n,"left");return k({top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:i})}(i);else{var a;"scrollParent"===r?"BODY"===(a=d(p(e))).nodeName&&(a=window.document.documentElement):a="window"===r?window.document.documentElement:r;var l=S(a,i);if("HTML"!==a.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&(!("fixed"!==f(t,"position"))||e(p(t)))}(i))o=l;else{var u=w(),s=u.height,c=u.width;o.top+=l.top-l.marginTop,o.bottom=s+l.top,o.left+=l.left-l.marginLeft,o.right=c+l.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function O(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=T(n,r,i,o),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(l).map(function(e){return E({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),s=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=0<s.length?s[0].key:u[0].key,f=e.split("-")[1];return c+(f?"-".concat(f):"")}function C(e,t,n){return S(n,y(t,n))}function P(e){var t=window.getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function N(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function j(e,t,n){n=n.split("-")[0];var r=P(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",l=i?"left":"top",u=i?"height":"width",s=i?"width":"height";return o[a]=t[a]+t[u]/2-r[u]/2,o[l]=n===l?t[l]-r[s]:t[N(l)],o}function I(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=I(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&c(n)&&(t.offsets.popper=k(t.offsets.popper),t.offsets.reference=k(t.offsets.reference),t=n(t,e))}),t}function A(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function $(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length-1;r++){var o=t[r],i=o?"".concat(o).concat(n):e;if(void 0!==window.document.body.style[i])return i}return null}function F(e,t,n,r){n.updateBound=r,window.addEventListener("resize",n.updateBound,{passive:!0});var o=d(e);return function e(t,n,r,o){var i="BODY"===t.nodeName,a=i?window:t;a.addEventListener(n,r,{passive:!0}),i||e(d(a.parentNode),n,r,o),o.push(a)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function L(){var e;this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=(this.reference,e=this.state,window.removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function D(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(r="px"),e.style[n]=t[n]+r})}function z(e,t,n){var r=I(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var i="`".concat(t,"`"),a="`".concat(n,"`");console.warn("".concat(a," modifier is required by ").concat(i," modifier in order to work, be sure to include it before ").concat(i,"!"))}return o}var M=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],B=M.slice(3);function W(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=B.indexOf(e),r=B.slice(n+1).concat(B.slice(0,n));return t?r.reverse():r}var q={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function H(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=a.indexOf(I(a,function(e){return-1!==e.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1===l?[a]:[a.slice(0,l).concat([a[l].split(u)[0]]),[a[l].split(u)[1]].concat(a.slice(l+1))];return(s=s.map(function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=Math.max,i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],l=i[2];if(!a)return e;if(0===l.indexOf("%")){var u;switch(l){case"%p":u=n;break;case"%":case"%r":default:u=r}return k(u)[t]/100*a}return"vh"===l||"vw"===l?("vh"===l?o(document.documentElement.clientHeight,window.innerHeight||0):o(document.documentElement.clientWidth,window.innerWidth||0))/100*a:a}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){U(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var V={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,r=t.split("-")[0],o=t.split("-")[1];if(o){var i=e.offsets,a=i.reference,l=i.popper,u=-1!==["bottom","top"].indexOf(r),s=u?"left":"top",c=u?"width":"height",f={start:n({},s,a[s]),end:n({},s,a[s]+a[c]-l[c])};e.offsets.popper=E({},l,f[o])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n,r=t.offset,o=e.placement,i=e.offsets,a=i.popper,l=i.reference,u=o.split("-")[0];return n=U(+r)?[+r,0]:H(r,a,l,u),"left"===u?(a.top+=n[0],a.left-=n[1]):"right"===u?(a.top+=n[0],a.left+=n[1]):"top"===u?(a.left+=n[0],a.top-=n[1]):"bottom"===u&&(a.left+=n[0],a.top+=n[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var r=t.boundariesElement||m(e.instance.popper);e.instance.reference===r&&(r=m(r));var o=T(e.instance.popper,e.instance.reference,t.padding,r);t.boundaries=o;var i=t.priority,a=e.offsets.popper,l={primary:function(e){var r=a[e];return a[e]<o[e]&&!t.escapeWithReference&&(r=Math.max(a[e],o[e])),n({},e,r)},secondary:function(e){var r="right"===e?"left":"top",i=a[r];return a[e]>o[e]&&!t.escapeWithReference&&(i=Math.min(a[r],o[e]-("right"===e?a.width:a.height))),n({},r,i)}};return i.forEach(function(e){var t=-1===["left","top"].indexOf(e)?"secondary":"primary";a=E({},a,l[t](e))}),e.offsets.popper=a,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",u=a?"left":"top",s=a?"width":"height";return n[l]<i(r[u])&&(e.offsets.popper[u]=i(r[u])-n[s]),n[u]>i(r[l])&&(e.offsets.popper[u]=i(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){if(!z(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,i=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),u=l?"height":"width",s=l?"Top":"Left",c=s.toLowerCase(),p=l?"left":"top",d=l?"bottom":"right",m=P(n)[u];a[d]-m<i[c]&&(e.offsets.popper[c]-=i[c]-(a[d]-m)),a[c]+m>i[d]&&(e.offsets.popper[c]+=a[c]+m-i[d]);var h=a[c]+a[u]/2-m/2,y=f(e.instance.popper,"margin".concat(s)).replace("px",""),v=h-k(e.offsets.popper)[c]-y;return v=Math.max(Math.min(i[u]-m,v),0),e.arrowElement=n,e.offsets.arrow={},e.offsets.arrow[c]=Math.round(v),e.offsets.arrow[p]="",e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(A(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=T(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),r=e.placement.split("-")[0],o=N(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case q.FLIP:a=[r,o];break;case q.CLOCKWISE:a=W(r);break;case q.COUNTERCLOCKWISE:a=W(r,!0);break;default:a=t.behavior}return a.forEach(function(l,u){if(r!==l||a.length===u+1)return e;r=e.placement.split("-")[0],o=N(r);var s=e.offsets.popper,c=e.offsets.reference,f=Math.floor,p="left"===r&&f(s.right)>f(c.left)||"right"===r&&f(s.left)<f(c.right)||"top"===r&&f(s.bottom)>f(c.top)||"bottom"===r&&f(s.top)<f(c.bottom),d=f(s.left)<f(n.left),m=f(s.right)>f(n.right),h=f(s.top)<f(n.top),y=f(s.bottom)>f(n.bottom),v="left"===r&&d||"right"===r&&m||"top"===r&&h||"bottom"===r&&y,b=-1!==["top","bottom"].indexOf(r),g=!!t.flipVariations&&(b&&"start"===i&&d||b&&"end"===i&&m||!b&&"start"===i&&h||!b&&"end"===i&&y);(p||v||g)&&(e.flipped=!0,(p||v)&&(r=a[u+1]),g&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=E({},e.offsets.popper,j(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(l?o[a?"width":"height"]:0),e.placement=N(t),e.offsets.popper=k(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!z(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=I(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=Math.floor,r=t.x,o=t.y,i=e.offsets.popper,a=I(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var l,u,s=void 0===a?t.gpuAcceleration:a,c=x(m(e.instance.popper)),f={position:i.position},p={left:n(i.left),top:n(i.top),bottom:n(i.bottom),right:n(i.right)},d="bottom"===r?"top":"bottom",h="right"===o?"left":"right",y=$("transform");if(u="bottom"==d?-c.height+p.bottom:p.top,l="right"==h?-c.width+p.right:p.left,s&&y)f[y]="translate3d(".concat(l,"px, ").concat(u,"px, 0)"),f[d]=0,f[h]=0,f.willChange="transform";else{var v="bottom"==d?-1:1,b="right"==h?-1:1;f[d]=u*v,f[h]=l*b,f.willChange="".concat(d,", ").concat(h)}var g={"x-placement":e.placement};return e.attributes=E({},g,e.attributes),e.styles=E({},f,e.styles),e.arrowStyles=E({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return D(e.instance.popper,e.styles),function(e,t){Object.keys(t).forEach(function(n){!1===t[n]?e.removeAttribute(n):e.setAttribute(n,t[n])})}(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&D(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=C(0,t,e),a=O(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),D(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},Y=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=s(this.update.bind(this)),this.options=E({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t.jquery?t[0]:t,this.popper=n.jquery?n[0]:n,this.options.modifiers={},Object.keys(E({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=E({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return E({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&c(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}var n,r,o;return n=e,(r=[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=C(this.state,this.popper,this.reference),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=j(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,A(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[$("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return L.call(this)}}])&&t(n.prototype,r),o&&t(n,o),e}();Y.Utils=("undefined"==typeof window?e:window).PopperUtils,Y.placements=M,Y.Defaults=V}).call(this,n(3))},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(5),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,m=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function w(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||g}function E(){}function k(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var x=k.prototype=new E;x.constructor=k,r(x,w.prototype),x.isPureReactComponent=!0;var S={current:null},T={current:null},O=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:T.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,I=[];function R(e,t,n,r){if(I.length){var o=I.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function $(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+F(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+F(l=t[s],s);u+=e(l,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+F(l,s++),r,o);else"object"===l&&b("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),$(e,U,t=R(t,i,r,o)),A(t)}function z(){var e=S.current;return null===e&&b("321"),e}var M={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;$(e,L,t=R(null,null,t,n)),A(t)},count:function(e){return $(e,function(){return null},null)},toArray:function(e){var t=[];return D(e,t,null,function(e){return e}),t},only:function(e){return N(e)||b("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:l,StrictMode:u,Suspense:m,createElement:P,cloneElement:function(e,t,n){null==e&&b("267",e);var o=void 0,a=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=T.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)O.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:l,ref:u,props:a,_owner:s}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentOwner:T,assign:r}},B={default:M},W=B&&M||B;e.exports=W.default||W},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(5),i=n(13);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,u=null,s=!1,c=null,f={onError:function(e){l=!0,u=e}};function p(e,t,n,r,o,i,a,s,c){l=!1,u=null,function(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,m={};function h(){if(d)for(var e in m){var t=m[e],n=d.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;b.hasOwnProperty(u)&&a("99",u),b[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&y(s[o],l,u);o=!0}else i.registrationName?(y(i.registrationName,l,u),o=!0):o=!1;o||a("98",r,e)}}}function y(e,t,n){g[e]&&a("100",e),g[e]=t,_[e]=t.eventTypes[n].dependencies}var v=[],b={},g={},_={},w=null,E=null,k=null;function x(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,o,i,f,d,m){if(p.apply(this,arguments),l){if(l){var h=u;l=!1,u=null}else a("198"),h=void 0;s||(s=!0,c=h)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)x(e,t[r],n[r]);else t&&x(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var P={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),h()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&a("102",t),m[t]=r,n=!0)}n&&h()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function j(e){if(null!==e&&(O=S(O,e)),e=O,O=null,e&&(T(e,C),O&&a("95"),s))throw e=c,s=!1,c=null,e}var I=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+I,A="__reactEventHandlers$"+I;function $(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function F(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e}function L(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function U(e){return e[A]||null}function D(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function M(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=D(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function B(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function W(e){e&&e.dispatchConfig.registrationName&&B(e._targetInst,null,e)}function q(e){T(e,M)}var H=!("undefined"==typeof window||!window.document||!window.document.createElement);function V(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Y={animationend:V("Animation","AnimationEnd"),animationiteration:V("Animation","AnimationIteration"),animationstart:V("Animation","AnimationStart"),transitionend:V("Transition","TransitionEnd")},Q={},G={};function K(e){if(Q[e])return Q[e];if(!Y[e])return e;var t,n=Y[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return Q[e]=n[t];return e}H&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete Y.animationend.animation,delete Y.animationiteration.animation,delete Y.animationstart.animation),"TransitionEvent"in window||delete Y.transitionend.transition);var X=K("animationend"),J=K("animationiteration"),Z=K("animationstart"),ee=K("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}o(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var pe=ue.extend({data:null}),de=ue.extend({data:null}),me=[9,13,27,32],he=H&&"CompositionEvent"in window,ye=null;H&&"documentMode"in document&&(ye=document.documentMode);var ve=H&&"TextEvent"in window&&!ye,be=H&&(!he||ye&&8<ye&&11>=ye),ge=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function Ee(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var xe=!1;var Se={eventTypes:_e,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(he)e:{switch(e){case"compositionstart":o=_e.compositionStart;break e;case"compositionend":o=_e.compositionEnd;break e;case"compositionupdate":o=_e.compositionUpdate;break e}o=void 0}else xe?Ee(e,n)&&(o=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=_e.compositionStart);return o?(be&&"ko"!==n.locale&&(xe||o!==_e.compositionStart?o===_e.compositionEnd&&xe&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,xe=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),q(o),i=o):i=null,(e=ve?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(we=!0,ge);case"textInput":return(e=t.data)===ge&&we?null:e;default:return null}}(e,n):function(e,t){if(xe)return"compositionend"===e||!he&&Ee(e,t)?(e=ie(),oe=re=ne=null,xe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(_e.beforeInput,t,n,r)).data=e,q(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Oe=null,Ce=null;function Pe(e){if(e=E(e)){"function"!=typeof Te&&a("280");var t=w(e.stateNode);Te(e.stateNode,e.type,t)}}function Ne(e){Oe?Ce?Ce.push(e):Ce=[e]:Oe=e}function je(){if(Oe){var e=Oe,t=Ce;if(Ce=Oe=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Ie(e,t){return e(t)}function Re(e,t,n){return e(t,n)}function Ae(){}var $e=!1;function Fe(e,t){if($e)return e(t);$e=!0;try{return Ie(e,t)}finally{$e=!1,(null!==Oe||null!==Ce)&&(Ae(),je())}}var Le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Le[e.type]:"textarea"===t}function De(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!H)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Be(e){e._valueTracker||(e._valueTracker=function(e){var t=Me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function We(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;qe.hasOwnProperty("ReactCurrentDispatcher")||(qe.ReactCurrentDispatcher={current:null});var He=/^(.*)[\\\/]/,Ve="function"==typeof Symbol&&Symbol.for,Ye=Ve?Symbol.for("react.element"):60103,Qe=Ve?Symbol.for("react.portal"):60106,Ge=Ve?Symbol.for("react.fragment"):60107,Ke=Ve?Symbol.for("react.strict_mode"):60108,Xe=Ve?Symbol.for("react.profiler"):60114,Je=Ve?Symbol.for("react.provider"):60109,Ze=Ve?Symbol.for("react.context"):60110,et=Ve?Symbol.for("react.concurrent_mode"):60111,tt=Ve?Symbol.for("react.forward_ref"):60112,nt=Ve?Symbol.for("react.suspense"):60113,rt=Ve?Symbol.for("react.memo"):60115,ot=Ve?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ge:return"Fragment";case Qe:return"Portal";case Xe:return"Profiler";case Ke:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case ot:if(e=1===e._status?e._result:null)return lt(e)}return null}function ut(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=lt(e.type);n=null,r&&(n=lt(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(He,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){mt[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){mt[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){mt[e]=new dt(e,5,!1,e.toLowerCase(),null)});var ht=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=mt.hasOwnProperty(t)?mt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(pt,e)||!ct.call(ft,e)&&(st.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function gt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=bt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Et(e,t){wt(e,t);var n=bt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?xt(e,t.type,n):t.hasOwnProperty("defaultValue")&&xt(e,t.type,bt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function kt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function xt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(ht,yt);mt[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(ht,yt);mt[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(ht,yt);mt[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){mt[e]=new dt(e,1,!1,e.toLowerCase(),null)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=ue.getPooled(St.change,e,t,n)).type="change",Ne(n),q(e),e}var Ot=null,Ct=null;function Pt(e){j(e)}function Nt(e){if(We(L(e)))return e}function jt(e,t){if("change"===e)return t}var It=!1;function Rt(){Ot&&(Ot.detachEvent("onpropertychange",At),Ct=Ot=null)}function At(e){"value"===e.propertyName&&Nt(Ct)&&Fe(Pt,e=Tt(Ct,e,De(e)))}function $t(e,t,n){"focus"===e?(Rt(),Ct=n,(Ot=t).attachEvent("onpropertychange",At)):"blur"===e&&Rt()}function Ft(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Ct)}function Lt(e,t){if("click"===e)return Nt(t)}function Ut(e,t){if("input"===e||"change"===e)return Nt(t)}H&&(It=ze("input")&&(!document.documentMode||9<document.documentMode));var Dt={eventTypes:St,_isInputEventSupported:It,extractEvents:function(e,t,n,r){var o=t?L(t):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=jt:Ue(o)?It?i=Ut:(i=Ft,a=$t):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&xt(o,"number",o.value)}},zt=ue.extend({view:null,detail:null}),Mt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Mt[e])&&!!t[e]}function Wt(){return Bt}var qt=0,Ht=0,Vt=!1,Yt=!1,Qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Vt?"mousemove"===e.type?e.screenX-t:0:(Vt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ht;return Ht=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Gt=Qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Kt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Kt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?$(t):null):i=null,i===t)return null;var a=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Qt,l=Kt.mouseLeave,u=Kt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Gt,l=Kt.pointerLeave,u=Kt.pointerEnter,s="pointer");var c=null==i?o:L(i);if(o=null==t?o:L(t),(e=a.getPooled(l,i,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,s=0,a=t=i;a;a=D(a))s++;for(a=0,u=o;u;u=D(u))a++;for(;0<s-a;)t=D(t),s--;for(;0<a-s;)o=D(o),a--;for(;s--;){if(t===o||t===o.alternate)break e;t=D(t),o=D(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)t.push(i),i=D(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=D(r);for(r=0;r<t.length;r++)B(t[r],"bubbled",e);for(r=i.length;0<r--;)B(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var l=o.child;l;){if(l===n)return nn(o),e;if(l===r)return nn(o),t;l=l.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{l=!1;for(var u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=zt.extend({relatedTarget:null});function un(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=un(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?un(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?un(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Qt.extend({dataTransfer:null}),dn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),mn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),hn=Qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},bn={};function gn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,bn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){gn(e,!0)}),yn.forEach(function(e){gn(e,!1)});var _n={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=bn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=bn[e];if(!o)return null;switch(e){case"keypress":if(0===un(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case X:case J:case Z:e=on;break;case ee:e=mn;break;case"scroll":e=zt;break;case"wheel":e=hn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Gt;break;default:e=ue}return q(t=e.getPooled(o,t,n,r)),t}},wn=_n.isInteractiveTopLevelEventType,En=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=$(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=De(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,l=0;l<v.length;l++){var u=v[l];u&&(u=u.extractEvents(r,t,i,o))&&(a=S(a,u))}j(a)}}var xn=!0;function Sn(e,t){if(!t)return null;var n=(wn(e)?On:Cn).bind(null,e);t.addEventListener(e,n,!1)}function Tn(e,t){if(!t)return null;var n=(wn(e)?On:Cn).bind(null,e);t.addEventListener(e,n,!0)}function On(e,t){Re(Cn,e,t)}function Cn(e,t){if(xn){var n=De(t);if(null===(n=$(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),En.length){var r=En.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Fe(kn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>En.length&&En.push(e)}}}var Pn={},Nn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function In(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Nn++,Pn[e[jn]]={}),Pn[e[jn]]}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function An(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function $n(e,t){var n,r=An(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=An(r)}}function Fn(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Rn((e=t.contentWindow).document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Un(e){var t=Fn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Ln(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=$n(n,i);var a=$n(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Dn=H&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Mn=null,Bn=null,Wn=null,qn=!1;function Hn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return qn||null==Mn||Mn!==Rn(n)?null:("selectionStart"in(n=Mn)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wn&&en(Wn,n)?null:(Wn=n,(e=ue.getPooled(zn.select,Bn,e,t)).type="select",e.target=Mn,q(e),e))}var Vn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=In(i),o=_.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?L(t):window,e){case"focus":(Ue(i)||"true"===i.contentEditable)&&(Mn=i,Bn=t,Wn=null);break;case"blur":Wn=Bn=Mn=null;break;case"mousedown":qn=!0;break;case"contextmenu":case"mouseup":case"dragend":return qn=!1,Hn(n,r);case"selectionchange":if(Dn)break;case"keydown":case"keyup":return Hn(n,r)}return null}};function Yn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Qn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Kn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:bt(n)}}function Xn(e,t){var n=bt(t.value),r=bt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=U,E=F,k=L,P.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Dt,SelectEventPlugin:Vn,BeforeInputEventPlugin:Se});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lr=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function sr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ar).forEach(function(e){lr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Tn("scroll",e);break;case"focus":case"blur":Tn("focus",e),Tn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Tn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function mr(){}var hr=null,yr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gr="function"==typeof setTimeout?setTimeout:void 0,_r="function"==typeof clearTimeout?clearTimeout:void 0,wr=i.unstable_scheduleCallback,Er=i.unstable_cancelCallback;function kr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function xr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Sr=[],Tr=-1;function Or(e){0>Tr||(e.current=Sr[Tr],Sr[Tr]=null,Tr--)}function Cr(e,t){Sr[++Tr]=e.current,e.current=t}var Pr={},Nr={current:Pr},jr={current:!1},Ir=Pr;function Rr(e,t){var n=e.type.contextTypes;if(!n)return Pr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Ar(e){return null!=(e=e.childContextTypes)}function $r(e){Or(jr),Or(Nr)}function Fr(e){Or(jr),Or(Nr)}function Lr(e,t,n){Nr.current!==Pr&&a("168"),Cr(Nr,t),Cr(jr,n)}function Ur(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",lt(t)||"Unknown",i);return o({},n,r)}function Dr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Pr,Ir=Nr.current,Cr(Nr,t),Cr(jr,jr.current),!0}function zr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Ur(e,t,Ir),r.__reactInternalMemoizedMergedChildContext=t,Or(jr),Or(Nr),Cr(Nr,t)):Or(jr),Cr(jr,n)}var Mr=null,Br=null;function Wr(e){return function(t){try{return e(t)}catch(e){}}}function qr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Hr(e,t,n,r){return new qr(e,t,n,r)}function Vr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Yr(e,t){var n=e.alternate;return null===n?((n=Hr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qr(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Vr(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ge:return Gr(n.children,o,i,t);case et:return Kr(n,3|o,i,t);case Ke:return Kr(n,2|o,i,t);case Xe:return(e=Hr(12,n,t,4|o)).elementType=Xe,e.type=Xe,e.expirationTime=i,e;case nt:return(e=Hr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case ot:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Hr(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Gr(e,t,n,r){return(e=Hr(7,e,r,t)).expirationTime=n,e}function Kr(e,t,n,r){return e=Hr(8,e,r,t),t=0==(1&t)?Ke:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Hr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=Hr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=El(),o=Ki(r=Ga(r,e));o.payload=t,null!=n&&(o.callback=n),Wa(),Ji(e,o),Ja(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=El(),o=Ki(r=Ga(r,e));o.tag=qi,o.payload=t,null!=n&&(o.callback=n),Wa(),Ji(e,o),Ja(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=El(),r=Ki(n=Ga(n,e));r.tag=Hi,null!=t&&(r.callback=t),Wa(),Ji(e,r),Ja(e,n)}};function lo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function uo(e,t,n){var r=!1,o=Pr,i=t.contextType;return"object"==typeof i&&null!==i?i=Bi(i):(o=Ar(t)?Ir:Nr.current,i=(r=null!=(r=t.contextTypes))?Rr(e,o):Pr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function so(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ao.enqueueReplaceState(t,t.state,null)}function co(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Bi(i):(i=Ar(t)?Ir:Nr.current,o.context=Rr(e,i)),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(io(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ao.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function mo(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Yr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Qr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Gr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=Qr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Qe:return(t=Jr(t,e.mode,n)).return=e,t}if(fo(t)||at(t))return(t=Gr(t,e.mode,n,null)).return=e,t;mo(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===o?n.type===Ge?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case Qe:return n.key===o?c(e,t,n,r):null}if(fo(n)||at(n))return null!==o?null:f(e,t,n,r,null);mo(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ye:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case Qe:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);mo(t,r)}return null}function h(o,a,l,u){for(var s=null,c=null,f=a,h=a=0,y=null;null!==f&&h<l.length;h++){f.index>h?(y=f,f=null):y=f.sibling;var v=d(o,f,l[h],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,h),null===c?s=v:c.sibling=v,c=v,f=y}if(h===l.length)return n(o,f),s;if(null===f){for(;h<l.length;h++)(f=p(o,l[h],u))&&(a=i(f,a,h),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);h<l.length;h++)(y=m(f,o,h,l[h],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?h:y.key),a=i(y,a,h),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(o,e)}),s}function y(o,l,u,s){var c=at(u);"function"!=typeof c&&a("150"),null==(u=c.call(u))&&a("151");for(var f=c=null,h=l,y=l=0,v=null,b=u.next();null!==h&&!b.done;y++,b=u.next()){h.index>y?(v=h,h=null):v=h.sibling;var g=d(o,h,b.value,s);if(null===g){h||(h=v);break}e&&h&&null===g.alternate&&t(o,h),l=i(g,l,y),null===f?c=g:f.sibling=g,f=g,h=v}if(b.done)return n(o,h),c;if(null===h){for(;!b.done;y++,b=u.next())null!==(b=p(o,b.value,s))&&(l=i(b,l,y),null===f?c=b:f.sibling=b,f=b);return c}for(h=r(o,h);!b.done;y++,b=u.next())null!==(b=m(h,o,y,b.value,s))&&(e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),l=i(b,l,y),null===f?c=b:f.sibling=b,f=b);return e&&h.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===Ge&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Ye:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?i.type===Ge:s.elementType===i.type){n(e,s.sibling),(r=o(s,i.type===Ge?i.props.children:i.props)).ref=po(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===Ge?((r=Gr(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Qr(i.type,i.key,i.props,null,e.mode,u)).ref=po(e,r,i),u.return=e,e=u)}return l(e);case Qe:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,u)).return=e,e=r),l(e);if(fo(i))return h(e,r,i,u);if(at(i))return y(e,r,i,u);if(c&&mo(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:a("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var yo=ho(!0),vo=ho(!1),bo={},go={current:bo},_o={current:bo},wo={current:bo};function Eo(e){return e===bo&&a("174"),e}function ko(e,t){Cr(wo,t),Cr(_o,e),Cr(go,bo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Or(go),Cr(go,t)}function xo(e){Or(go),Or(_o),Or(wo)}function So(e){Eo(wo.current);var t=Eo(go.current),n=tr(t,e.type);t!==n&&(Cr(_o,e),Cr(go,n))}function To(e){_o.current===e&&(Or(go),Or(_o))}var Oo=0,Co=2,Po=4,No=8,jo=16,Io=32,Ro=64,Ao=128,$o=qe.ReactCurrentDispatcher,Fo=0,Lo=null,Uo=null,Do=null,zo=null,Mo=null,Bo=null,Wo=0,qo=null,Ho=0,Vo=!1,Yo=null,Qo=0;function Go(){a("321")}function Ko(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,i){if(Fo=i,Lo=t,Do=null!==e?e.memoizedState:null,$o.current=null===Do?ci:fi,t=n(r,o),Vo){do{Vo=!1,Qo+=1,Do=null!==e?e.memoizedState:null,Bo=zo,qo=Mo=Uo=null,$o.current=fi,t=n(r,o)}while(Vo);Yo=null,Qo=0}return $o.current=si,(e=Lo).memoizedState=zo,e.expirationTime=Wo,e.updateQueue=qo,e.effectTag|=Ho,e=null!==Uo&&null!==Uo.next,Fo=0,Bo=Mo=zo=Do=Uo=Lo=null,Wo=0,qo=null,Ho=0,e&&a("300"),t}function Jo(){$o.current=si,Fo=0,Bo=Mo=zo=Do=Uo=Lo=null,Wo=0,qo=null,Ho=0,Vo=!1,Yo=null,Qo=0}function Zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Mo?zo=Mo=e:Mo=Mo.next=e,Mo}function ei(){if(null!==Bo)Bo=(Mo=Bo).next,Do=null!==(Uo=Do)?Uo.next:null;else{null===Do&&a("310");var e={memoizedState:(Uo=Do).memoizedState,baseState:Uo.baseState,queue:Uo.queue,baseUpdate:Uo.baseUpdate,next:null};Mo=null===Mo?zo=e:Mo.next=e,Do=Uo.next}return Mo}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n&&a("311"),n.lastRenderedReducer=e,0<Qo){var r=n.dispatch;if(null!==Yo){var o=Yo.get(n);if(void 0!==o){Yo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(Ei=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(i=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=o=null,s=r,c=!1;do{var f=s.expirationTime;f<Fo?(c||(c=!0,u=l,o=i),f>Wo&&(Wo=f)):i=s.eagerReducer===e?s.eagerState:e(i,s.action),l=s,s=s.next}while(null!==s&&s!==r);c||(u=l,o=i),Jt(i,t.memoizedState)||(Ei=!0),t.memoizedState=i,t.baseUpdate=u,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===qo?(qo={lastEffect:null}).lastEffect=e.next=e:null===(t=qo.lastEffect)?qo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,qo.lastEffect=e),e}function oi(e,t,n,r){var o=Zo();Ho|=e,o.memoizedState=ri(t,n,void 0,void 0===r?null:r)}function ii(e,t,n,r){var o=ei();r=void 0===r?null:r;var i=void 0;if(null!==Uo){var a=Uo.memoizedState;if(i=a.destroy,null!==r&&Ko(r,a.deps))return void ri(Oo,n,i,r)}Ho|=e,o.memoizedState=ri(t,n,i,r)}function ai(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function li(){}function ui(e,t,n){25>Qo||a("301");var r=e.alternate;if(e===Lo||null!==r&&r===Lo)if(Vo=!0,e={expirationTime:Fo,action:n,eagerReducer:null,eagerState:null,next:null},null===Yo&&(Yo=new Map),void 0===(n=Yo.get(t)))Yo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Wa();var o=El(),i={expirationTime:o=Ga(o,e),action:n,eagerReducer:null,eagerState:null,next:null},l=t.last;if(null===l)i.next=i;else{var u=l.next;null!==u&&(i.next=u),l.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(i.eagerReducer=r,i.eagerState=c,Jt(c,s))return}catch(e){}Ja(e,o)}}var si={readContext:Bi,useCallback:Go,useContext:Go,useEffect:Go,useImperativeHandle:Go,useLayoutEffect:Go,useMemo:Go,useReducer:Go,useRef:Go,useState:Go,useDebugValue:Go},ci={readContext:Bi,useCallback:function(e,t){return Zo().memoizedState=[e,void 0===t?null:t],e},useContext:Bi,useEffect:function(e,t){return oi(516,Ao|Ro,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Po|Io,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Po|Io,e,t)},useMemo:function(e,t){var n=Zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ui.bind(null,Lo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zo().memoizedState=e},useState:function(e){var t=Zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ti,lastRenderedState:e}).dispatch=ui.bind(null,Lo,e),[t.memoizedState,e]},useDebugValue:li},fi={readContext:Bi,useCallback:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ko(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Bi,useEffect:function(e,t){return ii(516,Ao|Ro,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ii(4,Po|Io,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ii(4,Po|Io,e,t)},useMemo:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ko(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ni,useRef:function(){return ei().memoizedState},useState:function(e){return ni(ti)},useDebugValue:li},pi=null,di=null,mi=!1;function hi(e,t){var n=Hr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vi(e){if(mi){var t=di;if(t){var n=t;if(!yi(e,t)){if(!(t=kr(n))||!yi(e,t))return e.effectTag|=2,mi=!1,void(pi=e);hi(pi,n)}pi=e,di=xr(t)}else e.effectTag|=2,mi=!1,pi=e}}function bi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;pi=e}function gi(e){if(e!==pi)return!1;if(!mi)return bi(e),mi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=di;t;)hi(e,t),t=kr(t);return bi(e),di=pi?kr(e.stateNode):null,!0}function _i(){di=pi=null,mi=!1}var wi=qe.ReactCurrentOwner,Ei=!1;function ki(e,t,n,r){t.child=null===e?vo(t,null,n,r):yo(t,e.child,n,r)}function xi(e,t,n,r,o){n=n.render;var i=t.ref;return Mi(t,o),r=Xo(e,t,n,r,i,o),null===e||Ei?(t.effectTag|=1,ki(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ri(e,t,o))}function Si(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Vr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ti(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ri(e,t,i):(t.effectTag|=1,(e=Yr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ti(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(Ei=!1,o<i)?Ri(e,t,i):Ci(e,t,n,r,i)}function Oi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ci(e,t,n,r,o){var i=Ar(n)?Ir:Nr.current;return i=Rr(t,i),Mi(t,o),n=Xo(e,t,n,r,i,o),null===e||Ei?(t.effectTag|=1,ki(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ri(e,t,o))}function Pi(e,t,n,r,o){if(Ar(n)){var i=!0;Dr(t)}else i=!1;if(Mi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),uo(t,n,r),co(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=Bi(s):s=Rr(t,s=Ar(n)?Ir:Nr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&so(t,a,r,s),Yi=!1;var p=t.memoizedState;u=a.state=p;var d=t.updateQueue;null!==d&&(na(t,d,r,a,o),u=t.memoizedState),l!==r||p!==u||jr.current||Yi?("function"==typeof c&&(io(t,n,c,r),u=t.memoizedState),(l=Yi||lo(t,n,l,r,p,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:ro(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=Bi(s):s=Rr(t,s=Ar(n)?Ir:Nr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&so(t,a,r,s),Yi=!1,u=t.memoizedState,p=a.state=u,null!==(d=t.updateQueue)&&(na(t,d,r,a,o),p=t.memoizedState),l!==r||u!==p||jr.current||Yi?("function"==typeof c&&(io(t,n,c,r),p=t.memoizedState),(c=Yi||lo(t,n,l,r,u,p,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ni(e,t,n,r,i,o)}function Ni(e,t,n,r,o,i){Oi(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&zr(t,n,!1),Ri(e,t,i);r=t.stateNode,wi.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=yo(t,e.child,null,i),t.child=yo(t,null,l,i)):ki(e,t,l,i),t.memoizedState=r.state,o&&zr(t,n,!0),t.child}function ji(e){var t=e.stateNode;t.pendingContext?Lr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lr(0,t.context,!1),ko(e,t.containerInfo)}function Ii(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var l=o.fallback;e=Gr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Gr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=vo(t,null,o.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,a?(n=o.fallback,o=Yr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Yr(l,n,l.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=yo(t,r.child,o.children,n)):(l=e.child,a?(a=o.fallback,(o=Gr(null,r,0,null)).child=l,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Gr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=yo(t,l,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ri(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Yr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Yr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ai(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||jr.current)Ei=!0;else if(r<n){switch(Ei=!1,t.tag){case 3:ji(t),_i();break;case 5:So(t);break;case 1:Ar(t.type)&&Dr(t);break;case 4:ko(t,t.stateNode.containerInfo);break;case 10:Di(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ii(e,t,n):null!==(t=Ri(e,t,n))?t.sibling:null}return Ri(e,t,n)}}else Ei=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Rr(t,Nr.current);if(Mi(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Jo(),Ar(r)){var i=!0;Dr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&io(t,r,l,e),o.updater=ao,t.stateNode=o,o._reactInternalFiber=t,co(t,r,e,n),t=Ni(null,t,r,!0,i,n)}else t.tag=0,ki(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Vr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=ro(e,i),l=void 0,o){case 0:l=Ci(null,t,e,i,n);break;case 1:l=Pi(null,t,e,i,n);break;case 11:l=xi(null,t,e,i,n);break;case 14:l=Si(null,t,e,ro(e.type,i),r,n);break;default:a("306",e,"")}return l;case 0:return r=t.type,o=t.pendingProps,Ci(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return ji(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,na(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(_i(),t=Ri(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(di=xr(t.stateNode.containerInfo),pi=t,o=mi=!0),o?(t.effectTag|=2,t.child=vo(t,null,r,n)):(ki(e,t,r,n),_i()),t=t.child),t;case 5:return So(t),null===e&&vi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,br(r,o)?l=null:null!==i&&br(r,i)&&(t.effectTag|=16),Oi(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ki(e,t,l,n),t=t.child),t;case 6:return null===e&&vi(t),null;case 13:return Ii(e,t,n);case 4:return ko(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=yo(t,null,r,n):ki(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,xi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return ki(e,t,t.pendingProps,n),t.child;case 8:case 12:return ki(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,Di(t,i=o.value),null!==l){var u=l.value;if(0===(i=Jt(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!jr.current){t=Ri(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.contextDependencies;if(null!==s){l=u.child;for(var c=s.first;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=Ki(n)).tag=Hi,Ji(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),c=n;for(var f=u.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<c)f.childExpirationTime=c,null!==p&&p.childExpirationTime<c&&(p.childExpirationTime=c);else{if(!(null!==p&&p.childExpirationTime<c))break;p.childExpirationTime=c}f=f.return}s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}ki(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Mi(t,n),r=r(o=Bi(o,i.unstable_observedBits)),t.effectTag|=1,ki(e,t,r,n),t.child;case 14:return i=ro(o=t.type,t.pendingProps),Si(e,t,o,i=ro(o.type,i),r,n);case 15:return Ti(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ar(r)?(e=!0,Dr(t)):e=!1,Mi(t,n),uo(t,r,o),co(t,r,o,n),Ni(null,t,r,!0,e,n)}a("156")}var $i={current:null},Fi=null,Li=null,Ui=null;function Di(e,t){var n=e.type._context;Cr($i,n._currentValue),n._currentValue=t}function zi(e){var t=$i.current;Or($i),e.type._context._currentValue=t}function Mi(e,t){Fi=e,Ui=Li=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(Ei=!0),e.contextDependencies=null}function Bi(e,t){return Ui!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Ui=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Li?(null===Fi&&a("308"),Li=t,Fi.contextDependencies={first:t,expirationTime:0}):Li=Li.next=t),e._currentValue}var Wi=0,qi=1,Hi=2,Vi=3,Yi=!1;function Qi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Gi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ki(e){return{expirationTime:e,tag:Wi,payload:null,callback:null,next:null,nextEffect:null}}function Xi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ji(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Qi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Qi(e.memoizedState),o=n.updateQueue=Qi(n.memoizedState)):r=e.updateQueue=Gi(o):null===o&&(o=n.updateQueue=Gi(r));null===o||r===o?Xi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xi(r,t),Xi(o,t)):(Xi(r,t),o.lastUpdate=t)}function Zi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Qi(e.memoizedState):ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Gi(t)),t}function ta(e,t,n,r,i,a){switch(n.tag){case qi:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case Vi:e.effectTag=-2049&e.effectTag|64;case Wi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case Hi:Yi=!0}return r}function na(e,t,n,r,o){Yi=!1;for(var i=(t=ea(e,t)).baseState,a=null,l=0,u=t.firstUpdate,s=i;null!==u;){var c=u.expirationTime;c<o?(null===a&&(a=u,i=s),l<c&&(l=c)):(s=ta(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<o?(null===c&&(c=u,null===a&&(i=s)),l<f&&(l=f)):(s=ta(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function ra(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oa(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oa(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oa(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function ia(e,t){return{value:e,source:t,stack:ut(t)}}function aa(e){e.effectTag|=4}var la=void 0,ua=void 0,sa=void 0,ca=void 0;la=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ua=function(){},sa=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(Eo(go.current),e=null,n){case"input":a=gt(l,a),r=gt(l,r),e=[];break;case"option":a=Yn(l,a),r=Yn(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Gn(l,a),r=Gn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=mr)}fr(n,r),l=n=void 0;var u=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(g.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(g.hasOwnProperty(n)?(null!=c&&dr(i,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),i=e,(t.updateQueue=i)&&aa(t)}},ca=function(e,t,n,r){n!==r&&aa(t)};var fa="function"==typeof WeakSet?WeakSet:Set;function pa(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ut(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function da(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Qa(e,t)}else t.current=null}function ma(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Oo){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Oo&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ha(e){switch("function"==typeof Br&&Br(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(da(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Qa(e,t)}break;case 5:da(e);break;case 4:ba(e)}}function ya(e){return 5===e.tag||3===e.tag||4===e.tag}function va(e){e:{for(var t=e.return;null!==t;){if(ya(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ya(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,l=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(l,u):i.insertBefore(l,u)}else t.insertBefore(o.stateNode,n);else r?(l=t,u=o.stateNode,8===l.nodeType?(i=l.parentNode).insertBefore(u,l):(i=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=mr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ba(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,l=i;;)if(ha(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===i)break;for(;null===l.sibling;){if(null===l.return||l.return===i)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(i=r,l=t.stateNode,8===i.nodeType?i.parentNode.removeChild(l):i.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(ha(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ga(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ma(Po,No,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[A]=o,"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),pr(n,r),r=pr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?sr(e,l):"dangerouslySetInnerHTML"===a?or(e,l):"children"===a?ir(e,l):vt(e,a,l,r)}switch(n){case"input":Et(e,o);break;case"textarea":Xn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Qn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Qn(e,!!o.multiple,o.defaultValue,!0):Qn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=El())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ur("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new fa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ga(t=El(),e),null!==(e=Xa(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&kl(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var _a="function"==typeof WeakMap?WeakMap:Map;function wa(e,t,n){(n=Ki(n)).tag=Vi,n.payload={element:null};var r=t.value;return n.callback=function(){Il(r),pa(e,t)},n}function Ea(e,t,n){(n=Ki(n)).tag=Vi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ua?Ua=new Set([this]):Ua.add(this));var n=t.value,o=t.stack;pa(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function ka(e){switch(e.tag){case 1:Ar(e.type)&&$r();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return xo(),Fr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return To(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return xo(),null;case 10:return zi(e),null;default:return null}}var xa=qe.ReactCurrentDispatcher,Sa=qe.ReactCurrentOwner,Ta=1073741822,Oa=!1,Ca=null,Pa=null,Na=0,ja=-1,Ia=!1,Ra=null,Aa=!1,$a=null,Fa=null,La=null,Ua=null;function Da(){if(null!==Ca)for(var e=Ca.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&$r();break;case 3:xo(),Fr();break;case 5:To(t);break;case 4:xo();break;case 10:zi(t)}e=e.return}Pa=null,Na=0,ja=-1,Ia=!1,Ca=null}function za(){for(;null!==Ra;){var e=Ra.effectTag;if(16&e&&ir(Ra.stateNode,""),128&e){var t=Ra.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:va(Ra),Ra.effectTag&=-3;break;case 6:va(Ra),Ra.effectTag&=-3,ga(Ra.alternate,Ra);break;case 4:ga(Ra.alternate,Ra);break;case 8:ba(e=Ra),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Ra=Ra.nextEffect}}function Ma(){for(;null!==Ra;){if(256&Ra.effectTag)e:{var e=Ra.alternate,t=Ra;switch(t.tag){case 0:case 11:case 15:ma(Co,Oo,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Ra=Ra.nextEffect}}function Ba(e,t){for(;null!==Ra;){var n=Ra.effectTag;if(36&n){var r=Ra.alternate,o=Ra,i=t;switch(o.tag){case 0:case 11:case 15:ma(jo,Io,o);break;case 1:var l=o.stateNode;if(4&o.effectTag)if(null===r)l.componentDidMount();else{var u=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);l.componentDidUpdate(u,r.memoizedState,l.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ra(0,r,l);break;case 3:if(null!==(r=o.updateQueue)){if(l=null,null!==o.child)switch(o.child.tag){case 5:l=o.child.stateNode;break;case 1:l=o.child.stateNode}ra(0,r,l)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&vr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=Ra.ref)&&(i=Ra.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&($a=e),Ra=Ra.nextEffect}}function Wa(){null!==Fa&&Er(Fa),null!==La&&La()}function qa(e,t){Aa=Oa=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}no(0,e)}(e,o>r?o:r),Sa.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=xn,yr=function(){var e=Fn();if(Ln(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,l=-1,u=0,s=0,c=e,f=null;t:for(;;){for(var p;c!==t||0!==r&&3!==c.nodeType||(a=i+r),c!==o||0!==n&&3!==c.nodeType||(l=i+n),3===c.nodeType&&(i+=c.nodeValue.length),null!==(p=c.firstChild);)f=c,c=p;for(;;){if(c===e)break t;if(f===t&&++u===r&&(a=i),f===o&&++s===n&&(l=i),null!==(p=c.nextSibling))break;f=(c=f).parentNode}c=p}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),xn=!1,Ra=r;null!==Ra;){o=!1;var l=void 0;try{Ma()}catch(e){o=!0,l=e}o&&(null===Ra&&a("178"),Qa(Ra,l),null!==Ra&&(Ra=Ra.nextEffect))}for(Ra=r;null!==Ra;){o=!1,l=void 0;try{za()}catch(e){o=!0,l=e}o&&(null===Ra&&a("178"),Qa(Ra,l),null!==Ra&&(Ra=Ra.nextEffect))}for(Un(yr),yr=null,xn=!!hr,hr=null,e.current=t,Ra=r;null!==Ra;){o=!1,l=void 0;try{Ba(e,n)}catch(e){o=!0,l=e}o&&(null===Ra&&a("178"),Qa(Ra,l),null!==Ra&&(Ra=Ra.nextEffect))}if(null!==r&&null!==$a){var u=function(e,t){La=Fa=$a=null;var n=ol;ol=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;ma(Ao,Oo,i),ma(Oo,Ro,i)}catch(e){r=!0,o=e}r&&Qa(t,o)}t=t.nextEffect}while(null!==t);ol=n,0!==(n=e.expirationTime)&&kl(e,n),cl||ol||Cl(1073741823,!1)}.bind(null,e,r);Fa=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return wr(u)}),La=u}Oa=Aa=!1,"function"==typeof Mr&&Mr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Ua=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Ha(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Ca=e;e:{var i=t,l=Na,u=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ar(t.type)&&$r();break;case 3:xo(),Fr(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==i&&null!==i.child||(gi(t),t.effectTag&=-3),ua(t);break;case 5:To(t);var s=Eo(wo.current);if(l=t.type,null!==i&&null!=t.stateNode)sa(i,t,l,u,s),i.ref!==t.ref&&(t.effectTag|=128);else if(u){var c=Eo(go.current);if(gi(t)){i=(u=t).stateNode;var f=u.type,p=u.memoizedProps,d=s;switch(i[R]=u,i[A]=p,l=void 0,s=f){case"iframe":case"object":Sn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Sn(te[f],i);break;case"source":Sn("error",i);break;case"img":case"image":case"link":Sn("error",i),Sn("load",i);break;case"form":Sn("reset",i),Sn("submit",i);break;case"details":Sn("toggle",i);break;case"input":_t(i,p),Sn("invalid",i),dr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Sn("invalid",i),dr(d,"onChange");break;case"textarea":Kn(i,p),Sn("invalid",i),dr(d,"onChange")}for(l in fr(s,p),f=null,p)p.hasOwnProperty(l)&&(c=p[l],"children"===l?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):g.hasOwnProperty(l)&&null!=c&&dr(d,l));switch(s){case"input":Be(i),kt(i,p,!0);break;case"textarea":Be(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=mr)}l=f,u.updateQueue=l,(u=null!==l)&&aa(t)}else{p=t,d=l,i=u,f=9===s.nodeType?s:s.ownerDocument,c===Zn.html&&(c=er(d)),c===Zn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(c,d),(i=f)[R]=p,i[A]=u,la(i,t,!1,!1),d=i;var m=s,h=pr(f=l,p=u);switch(f){case"iframe":case"object":Sn("load",d),s=p;break;case"video":case"audio":for(s=0;s<te.length;s++)Sn(te[s],d);s=p;break;case"source":Sn("error",d),s=p;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),s=p;break;case"form":Sn("reset",d),Sn("submit",d),s=p;break;case"details":Sn("toggle",d),s=p;break;case"input":_t(d,p),s=gt(d,p),Sn("invalid",d),dr(m,"onChange");break;case"option":s=Yn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},s=o({},p,{value:void 0}),Sn("invalid",d),dr(m,"onChange");break;case"textarea":Kn(d,p),s=Gn(d,p),Sn("invalid",d),dr(m,"onChange");break;default:s=p}fr(f,s),c=void 0;var y=f,v=d,b=s;for(c in b)if(b.hasOwnProperty(c)){var _=b[c];"style"===c?sr(v,_):"dangerouslySetInnerHTML"===c?null!=(_=_?_.__html:void 0)&&or(v,_):"children"===c?"string"==typeof _?("textarea"!==y||""!==_)&&ir(v,_):"number"==typeof _&&ir(v,""+_):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(g.hasOwnProperty(c)?null!=_&&dr(m,c):null!=_&&vt(v,c,_,h))}switch(f){case"input":Be(d),kt(d,p,!1);break;case"textarea":Be(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+bt(p.value));break;case"select":(s=d).multiple=!!p.multiple,null!=(d=p.value)?Qn(s,!!p.multiple,d,!1):null!=p.defaultValue&&Qn(s,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof s.onClick&&(d.onclick=mr)}(u=vr(l,u))&&aa(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?ca(i,t,i.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),i=Eo(wo.current),Eo(go.current),gi(t)?(l=(u=t).stateNode,i=u.memoizedProps,l[R]=u,(u=l.nodeValue!==i)&&aa(t)):(l=t,(u=(9===i.nodeType?i:i.ownerDocument).createTextNode(u))[R]=t,l.stateNode=u));break;case 11:break;case 13:if(u=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Ca=t;break e}u=null!==u,l=null!==i&&null!==i.memoizedState,null!==i&&!u&&l&&(null!==(i=i.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(u||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:xo(),ua(t);break;case 10:zi(t);break;case 9:case 14:break;case 17:Ar(t.type)&&$r();break;case 18:break;default:a("156")}Ca=null}if(t=e,1===Na||1!==t.childExpirationTime){for(u=0,l=t.child;null!==l;)(i=l.expirationTime)>u&&(u=i),(s=l.childExpirationTime)>u&&(u=s),l=l.sibling;t.childExpirationTime=u}if(null!==Ca)return Ca;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=ka(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Va(e){var t=Ai(e.alternate,e,Na);return e.memoizedProps=e.pendingProps,null===t&&(t=Ha(e)),Sa.current=null,t}function Ya(e,t){Oa&&a("243"),Wa(),Oa=!0;var n=xa.current;xa.current=si;var r=e.nextExpirationTimeToWorkOn;r===Na&&e===Pa&&null!==Ca||(Da(),Na=r,Ca=Yr((Pa=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Ca&&!Tl();)Ca=Va(Ca);else for(;null!==Ca;)Ca=Va(Ca)}catch(t){if(Ui=Li=Fi=null,Jo(),null===Ca)o=!0,Il(t);else{null===Ca&&a("271");var i=Ca,l=i.return;if(null!==l){e:{var u=e,s=l,c=i,f=t;if(l=Na,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=s;var d=-1,m=-1;do{if(13===f.tag){var h=f.alternate;if(null!==h&&null!==(h=h.memoizedState)){m=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=f.pendingProps.maxDuration)&&(0>=h?d=0:(-1===d||h<d)&&(d=h))}f=f.return}while(null!==f);f=s;do{if((h=13===f.tag)&&(h=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),h){if(null===(s=f.updateQueue)?((s=new Set).add(p),f.updateQueue=s):s.add(p),0==(1&f.mode)){f.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((l=Ki(1073741823)).tag=Hi,Ji(c,l))),c.expirationTime=1073741823;break e}s=l;var y=(c=u).pingCache;null===y?(y=c.pingCache=new _a,h=new Set,y.set(p,h)):void 0===(h=y.get(p))&&(h=new Set,y.set(p,h)),h.has(s)||(h.add(s),c=Ka.bind(null,c,p,s),p.then(c,c)),-1===d?u=1073741823:(-1===m&&(m=10*(1073741822-to(u,l))-5e3),u=m+d),0<=u&&ja<u&&(ja=u),f.effectTag|=2048,f.expirationTime=l;break e}f=f.return}while(null!==f);f=Error((lt(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ut(c))}Ia=!0,f=ia(f,c),u=s;do{switch(u.tag){case 3:u.effectTag|=2048,u.expirationTime=l,Zi(u,l=wa(u,f,l));break e;case 1:if(d=f,m=u.type,c=u.stateNode,0==(64&u.effectTag)&&("function"==typeof m.getDerivedStateFromError||null!==c&&"function"==typeof c.componentDidCatch&&(null===Ua||!Ua.has(c)))){u.effectTag|=2048,u.expirationTime=l,Zi(u,l=Ea(u,d,l));break e}}u=u.return}while(null!==u)}Ca=Ha(i);continue}o=!0,Il(t)}}break}if(Oa=!1,xa.current=n,Ui=Li=Fi=null,Jo(),o)Pa=null,e.finishedWork=null;else if(null!==Ca)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Pa=null,Ia){if(o=e.latestPendingTime,i=e.latestSuspendedTime,l=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==l&&l<r)return eo(e,r),void wl(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void wl(e,n,r,t,-1)}t&&-1!==ja?(eo(e,r),(t=10*(1073741822-to(e,r)))<ja&&(ja=t),t=10*(1073741822-El()),t=ja-t,wl(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ua||!Ua.has(r)))return Ji(n,e=Ea(n,e=ia(t,e),1073741823)),void Ja(n,1073741823);break;case 3:return Ji(n,e=wa(n,e=ia(t,e),1073741823)),void Ja(n,1073741823)}n=n.return}3===e.tag&&(Ji(e,n=wa(e,n=ia(t,e),1073741823)),Ja(e,1073741823))}function Ga(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Oa&&!Aa)r=Na;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==Pa&&r===Na&&--r}return n===i.unstable_UserBlockingPriority&&(0===ll||r<ll)&&(ll=r),r}function Ka(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Pa&&Na===n?Pa=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&kl(e,n)))}function Xa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ja(e,t){null!==(e=Xa(e,t))&&(!Oa&&0!==Na&&t>Na&&Da(),Zr(e,t),Oa&&!Aa&&Pa===e||kl(e,e.expirationTime),vl>yl&&(vl=0,a("185")))}function Za(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var el=null,tl=null,nl=0,rl=void 0,ol=!1,il=null,al=0,ll=0,ul=!1,sl=null,cl=!1,fl=!1,pl=null,dl=i.unstable_now(),ml=1073741822-(dl/10|0),hl=ml,yl=50,vl=0,bl=null;function gl(){ml=1073741822-((i.unstable_now()-dl)/10|0)}function _l(e,t){if(0!==nl){if(t<nl)return;null!==rl&&i.unstable_cancelCallback(rl)}nl=t,e=i.unstable_now()-dl,rl=i.unstable_scheduleCallback(Ol,{timeout:10*(1073741822-t)-e})}function wl(e,t,n,r,o){e.expirationTime=r,0!==o||Tl()?0<o&&(e.timeoutHandle=gr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,gl(),hl=ml,Pl(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function El(){return ol?hl:(xl(),0!==al&&1!==al||(gl(),hl=ml),hl)}function kl(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tl?(el=tl=e,e.nextScheduledRoot=e):(tl=tl.nextScheduledRoot=e).nextScheduledRoot=el):t>e.expirationTime&&(e.expirationTime=t),ol||(cl?fl&&(il=e,al=1073741823,Nl(e,1073741823,!1)):1073741823===t?Cl(1073741823,!1):_l(e,t))}function xl(){var e=0,t=null;if(null!==tl)for(var n=tl,r=el;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===tl)&&a("244"),r===r.nextScheduledRoot){el=tl=r.nextScheduledRoot=null;break}if(r===el)el=o=r.nextScheduledRoot,tl.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===tl){(tl=n).nextScheduledRoot=el,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===tl)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}il=t,al=e}var Sl=!1;function Tl(){return!!Sl||!!i.unstable_shouldYield()&&(Sl=!0)}function Ol(){try{if(!Tl()&&null!==el){gl();var e=el;do{var t=e.expirationTime;0!==t&&ml<=t&&(e.nextExpirationTimeToWorkOn=ml),e=e.nextScheduledRoot}while(e!==el)}Cl(0,!0)}finally{Sl=!1}}function Cl(e,t){if(xl(),t)for(gl(),hl=ml;null!==il&&0!==al&&e<=al&&!(Sl&&ml>al);)Nl(il,al,ml>al),xl(),gl(),hl=ml;else for(;null!==il&&0!==al&&e<=al;)Nl(il,al,!1),xl();if(t&&(nl=0,rl=null),0!==al&&_l(il,al),vl=0,bl=null,null!==pl)for(e=pl,pl=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ul||(ul=!0,sl=e)}}if(ul)throw e=sl,sl=null,ul=!1,e}function Pl(e,t){ol&&a("253"),il=e,al=t,Nl(e,t,!1),Cl(1073741823,!1)}function Nl(e,t,n){if(ol&&a("245"),ol=!0,n){var r=e.finishedWork;null!==r?jl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,_r(r)),Ya(e,n),null!==(r=e.finishedWork)&&(Tl()?e.finishedWork=r:jl(e,r,t)))}else null!==(r=e.finishedWork)?jl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,_r(r)),Ya(e,n),null!==(r=e.finishedWork)&&jl(e,r,t));ol=!1}function jl(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===pl?pl=[r]:pl.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===bl?vl++:(bl=e,vl=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){qa(e,t)})}function Il(e){null===il&&a("246"),il.expirationTime=0,ul||(ul=!0,sl=e)}function Rl(e,t){var n=cl;cl=!0;try{return e(t)}finally{(cl=n)||ol||Cl(1073741823,!1)}}function Al(e,t){if(cl&&!fl){fl=!0;try{return e(t)}finally{fl=!1}}return e(t)}function $l(e,t,n){cl||ol||0===ll||(Cl(ll,!1),ll=0);var r=cl;cl=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(cl=r)||ol||Cl(1073741823,!1)}}function Fl(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Ar(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var u=n.type;if(Ar(u)){n=Ur(n,u,l);break e}}n=l}else n=Pr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Ki(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Wa(),Ji(i,o),Ja(i,r),r}function Ll(e,t,n,r){var o=t.current;return Fl(e,t,n,o=Ga(El(),o),r)}function Ul(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Dl(e){var t=1073741822-25*(1+((1073741822-El()+500)/25|0));t>=Ta&&(t=Ta-1),this._expirationTime=Ta=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function zl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ml(e,t,n){e={current:t=Hr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Bl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wl(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Ul(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ml(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=Ul(i._internalRoot);l.call(e)}}Al(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Ul(i._internalRoot)}function ql(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Bl(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Qe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=U(r);o||a("90"),We(r),Et(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Qn(e,!!n.multiple,t,!1)}},Dl.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new zl;return Fl(e,t,null,n,r._onCommit),r},Dl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Dl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Pl(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Dl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},zl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},zl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Ml.prototype.render=function(e,t){var n=this._internalRoot,r=new zl;return null!==(t=void 0===t?null:t)&&r.then(t),Ll(e,n,null,r._onCommit),r},Ml.prototype.unmount=function(e){var t=this._internalRoot,n=new zl;return null!==(e=void 0===e?null:e)&&n.then(e),Ll(null,t,null,n._onCommit),n},Ml.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new zl;return null!==(n=void 0===n?null:n)&&o.then(n),Ll(t,r,e,o._onCommit),o},Ml.prototype.createBatch=function(){var e=new Dl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ie=Rl,Re=$l,Ae=function(){ol||0===ll||(Cl(ll,!1),ll=0)};var Hl={createPortal:ql,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Bl(t)||a("200"),Wl(null,e,t,!0,n)},render:function(e,t,n){return Bl(t)||a("200"),Wl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Bl(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Wl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Bl(e)||a("40"),!!e._reactRootContainer&&(Al(function(){Wl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ql.apply(void 0,arguments)},unstable_batchedUpdates:Rl,unstable_interactiveUpdates:$l,flushSync:function(e,t){ol&&a("187");var n=cl;cl=!0;try{return Za(e,t)}finally{cl=n,Cl(1073741823,!1)}},unstable_createRoot:function(e,t){return Bl(e)||a("299","unstable_createRoot"),new Ml(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=cl;cl=!0;try{Za(e)}finally{(cl=t)||ol||Cl(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[F,L,U,P.injectEventPluginsByName,b,q,function(e){T(e,W)},Ne,je,Cn,j]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Mr=Wr(function(e){return t.onCommitFiberRoot(n,e)}),Br=Wr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:qe.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:$,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var Vl={default:Hl},Yl=Vl&&Hl||Vl;e.exports=Yl.default||Yl},function(e,t,n){"use strict";e.exports=n(14)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,l=!1,u=!1;function s(){if(!l){var e=n.expirationTime;u?k():u=!0,E(p,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,l=a;o=e,a=t;try{var u=r()}finally{o=i,a=l}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=u.next=u.previous=u;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=u,s()),(t=r.previous).next=r.previous=u,u.next=r,u.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?s():u=!1}}}function p(e){l=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{c()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{c()}while(null!==n&&!x())}finally{l=!1,r=o,null!==n?s():u=!1,f()}}var d,m,h=Date,y="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,b="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,g="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){d=b(function(t){v(m),e(t)}),m=y(function(){g(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return h.now()};var E,k,x,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var T=S._schedMock;E=T[0],k=T[1],x=T[2],t.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var O=null,C=function(e){if(null!==O)try{O(e)}finally{O=null}};E=function(e){null!==O?setTimeout(E,0,e):(O=e,setTimeout(C,0,!1))},k=function(){O=null},x=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof b&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var P=null,N=!1,j=-1,I=!1,R=!1,A=0,$=33,F=33;x=function(){return A<=t.unstable_now()};var L=new MessageChannel,U=L.port2;L.port1.onmessage=function(){N=!1;var e=P,n=j;P=null,j=-1;var r=t.unstable_now(),o=!1;if(0>=A-r){if(!(-1!==n&&n<=r))return I||(I=!0,_(D)),P=e,void(j=n);o=!0}if(null!==e){R=!0;try{e(o)}finally{R=!1}}};var D=function(e){if(null!==P){_(D);var t=e-A+F;t<F&&$<F?(8>t&&(t=8),F=t<$?$:t):$=t,A=e+F,N||(N=!0,U.postMessage(void 0))}else I=!1};E=function(e,t){P=e,j=t,R||0>t?U.postMessage(void 0):I||(I=!0,_(D))},k=function(){P=null,N=!1,j=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||x())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(3))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,l,u=1,s={},c=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){m(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){m(e.data)},r=function(e){i.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){m(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(m,0,e)}:(a="setImmediate$"+Math.random()+"$",l=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&m(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",l,!1):e.attachEvent("onmessage",l),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return s[u]=o,r(u),u++},p.clearImmediate=d}function d(e){delete s[e]}function m(e){if(c)setTimeout(m,0,e);else{var t=s[e];if(t){c=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{d(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(3),n(16))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=l(p);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new m(e,t)),1!==s.length||c||l(d)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){e.exports=n(18)()},function(e,t,n){"use strict";var r=n(19);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.hide=function(e){a(i.default.GLOBAL.HIDE,{target:e})},e.rebuild=function(){a(i.default.GLOBAL.REBUILD)},e.show=function(e){a(i.default.GLOBAL.SHOW,{target:e})},e.prototype.globalRebuild=function(){this.mount&&(this.unbindListener(),this.bindListener())},e.prototype.globalShow=function(e){if(this.mount){var t={currentTarget:e.detail.target};this.showTooltip(t,!0)}},e.prototype.globalHide=function(e){if(this.mount){var t=!!(e&&e.detail&&e.detail.target);this.hideTooltip({currentTarget:t&&e.detail.target},t)}}};var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=function(e,t){var n=void 0;"function"==typeof window.CustomEvent?n=new window.CustomEvent(e,{detail:t}):((n=document.createEvent("Event")).initEvent(e,!1,!0),n.detail=t),window.dispatchEvent(n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.bindWindowEvents=function(e){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.addEventListener(i.default.GLOBAL.HIDE,this.globalHide,!1),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.addEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild,!1),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.addEventListener(i.default.GLOBAL.SHOW,this.globalShow,!1),e&&(window.removeEventListener("resize",this.onWindowResize),window.addEventListener("resize",this.onWindowResize,!1))},e.prototype.unbindWindowEvents=function(){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.removeEventListener("resize",this.onWindowResize)},e.prototype.onWindowResize=function(){this.mount&&this.hideTooltip()}};var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.isCustomEvent=function(e){return this.state.event||!!e.getAttribute("data-event")},e.prototype.customBindListener=function(e){var t=this,n=this.state,o=n.event,a=n.eventOff,l=e.getAttribute("data-event")||o,u=e.getAttribute("data-event-off")||a;l.split(" ").forEach(function(n){e.removeEventListener(n,i.get(e,n));var o=r.bind(t,u);i.set(e,n,o),e.addEventListener(n,o,!1)}),u&&u.split(" ").forEach(function(n){e.removeEventListener(n,t.hideTooltip),e.addEventListener(n,t.hideTooltip,!1)})},e.prototype.customUnbindListener=function(e){var t=this.state,n=t.event,r=t.eventOff,o=n||e.getAttribute("data-event"),a=r||e.getAttribute("data-event-off");e.removeEventListener(o,i.get(e,n)),a&&e.removeEventListener(a,this.hideTooltip)}};var r=function(e,t){var n=this.state.show,r=this.props.id,i=t.currentTarget.getAttribute("data-iscapture"),a=i&&"true"===i||this.props.isCapture,l=t.currentTarget.getAttribute("currentItem");a||t.stopPropagation(),n&&"true"===l?e||this.hideTooltip(t):(t.currentTarget.setAttribute("currentItem","true"),o(t.currentTarget,this.getTargetArray(r)),this.showTooltip(t))},o=function(e,t){for(var n=0;n<t.length;n++)e!==t[n]?t[n].setAttribute("currentItem","false"):t[n].setAttribute("currentItem","true")},i={id:"9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",set:function(e,t,n){var r,o,i;this.id in e?e[this.id][t]=n:Object.defineProperty(e,this.id,{configurable:!0,value:(r={},o=t,i=n,o in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r)})},get:function(e,t){var n=e[this.id];if(void 0!==n)return n[t]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.isCapture=function(e){return e&&"true"===e.getAttribute("data-iscapture")||this.props.isCapture||!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.getEffect=function(e){return e.getAttribute("data-effect")||this.props.effect||"float"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.bindRemovalTracker=function(){var e=this,t=r();if(null!=t){var n=new t(function(t){for(var n=0;n<t.length;n++)for(var r=t[n],o=0;o<r.removedNodes.length;o++){if(r.removedNodes[o]===e.state.currentTarget)return void e.hideTooltip()}});n.observe(window.document,{childList:!0,subtree:!0}),this.removalTracker=n}},e.prototype.unbindRemovalTracker=function(){this.removalTracker&&(this.removalTracker.disconnect(),this.removalTracker=null)}};var r=function(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,u,s,c,f){for(var p=r(n),d=p.width,m=p.height,h=r(t),y=h.width,v=h.height,b=o(e,t,c),g=b.mouseX,_=b.mouseY,w=i(c,y,v,d,m),E=a(f),k=E.extraOffset_X,x=E.extraOffset_Y,S=window.innerWidth,T=window.innerHeight,O=l(n),C=O.parentTop,P=O.parentLeft,N=function(e){var t=w[e].l;return g+t+k},j=function(e){var t=w[e].t;return _+t+x},I=function(e){return function(e){var t=w[e].r;return g+t+k}(e)>S},R=function(e){return function(e){var t=w[e].b;return _+t+x}(e)>T},A=function(e){return function(e){return N(e)<0}(e)||I(e)||function(e){return j(e)<0}(e)||R(e)},$=function(e){return!A(e)},F=["top","bottom","left","right"],L=[],U=0;U<4;U++){var D=F[U];$(D)&&L.push(D)}var z=!1,M=void 0;return $(s)&&s!==u?(z=!0,M=s):L.length>0&&A(s)&&A(u)&&(z=!0,M=L[0]),z?{isNewState:!0,newState:{place:M}}:{isNewState:!1,position:{left:parseInt(N(u)-P,10),top:parseInt(j(u)-C,10)}}};var r=function(e){var t=e.getBoundingClientRect(),n=t.height,r=t.width;return{height:parseInt(n,10),width:parseInt(r,10)}},o=function(e,t,n){var o=t.getBoundingClientRect(),i=o.top,a=o.left,l=r(t),u=l.width,s=l.height;return"float"===n?{mouseX:e.clientX,mouseY:e.clientY}:{mouseX:a+u/2,mouseY:i+s/2}},i=function(e,t,n,r,o){var i=void 0,a=void 0,l=void 0,u=void 0;return"float"===e?(i={l:-r/2,r:r/2,t:-(o+3+2),b:-3},l={l:-r/2,r:r/2,t:15,b:o+3+2+12},u={l:-(r+3+2),r:-3,t:-o/2,b:o/2},a={l:3,r:r+3+2,t:-o/2,b:o/2}):"solid"===e&&(i={l:-r/2,r:r/2,t:-(n/2+o+2),b:-n/2},l={l:-r/2,r:r/2,t:n/2,b:n/2+o+2},u={l:-(r+t/2+2),r:-t/2,t:-o/2,b:o/2},a={l:t/2,r:r+t/2+2,t:-o/2,b:o/2}),{top:i,bottom:l,left:u,right:a}},a=function(e){var t=0,n=0;for(var r in"[object String]"===Object.prototype.toString.apply(e)&&(e=JSON.parse(e.toString().replace(/\'/g,'"'))),e)"top"===r?n-=parseInt(e[r],10):"bottom"===r?n+=parseInt(e[r],10):"left"===r?t-=parseInt(e[r],10):"right"===r&&(t+=parseInt(e[r],10));return{extraOffset_X:t,extraOffset_Y:n}},l=function(e){for(var t=e;t&&"none"===window.getComputedStyle(t).getPropertyValue("transform");)t=t.parentElement;return{parentTop:t&&t.getBoundingClientRect().top||0,parentLeft:t&&t.getBoundingClientRect().left||0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(t)return t;if(null!=n)return n;if(null===n)return null;var o=/<br\s*\/?>/;return r&&"false"!==r&&o.test(e)?e.split(o).map(function(e,t){return i.default.createElement("span",{key:t,className:"multi-line"},e)}):e};var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseAria=function(e){var t={};return Object.keys(e).filter(function(e){return/(^aria-\w+$|^role$)/.test(e)}).forEach(function(n){t[n]=e[n]}),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.length;return e.hasOwnProperty?Array.prototype.slice.call(e):new Array(t).fill().map(function(t){return e[t]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default='.__react_component_tooltip{border-radius:3px;display:inline-block;font-size:13px;left:-999em;opacity:0;padding:8px 21px;position:fixed;pointer-events:none;transition:opacity 0.3s ease-out;top:-999em;visibility:hidden;z-index:999}.__react_component_tooltip.allow_hover,.__react_component_tooltip.allow_click{pointer-events:auto}.__react_component_tooltip:before,.__react_component_tooltip:after{content:"";width:0;height:0;position:absolute}.__react_component_tooltip.show{opacity:0.9;margin-top:0px;margin-left:0px;visibility:visible}.__react_component_tooltip.type-dark{color:#fff;background-color:#222}.__react_component_tooltip.type-dark.place-top:after{border-top-color:#222;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-dark.place-bottom:after{border-bottom-color:#222;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-dark.place-left:after{border-left-color:#222;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-dark.place-right:after{border-right-color:#222;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-dark.border{border:1px solid #fff}.__react_component_tooltip.type-dark.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-dark.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-dark.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-dark.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-success{color:#fff;background-color:#8DC572}.__react_component_tooltip.type-success.place-top:after{border-top-color:#8DC572;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-success.place-bottom:after{border-bottom-color:#8DC572;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-success.place-left:after{border-left-color:#8DC572;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-success.place-right:after{border-right-color:#8DC572;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-success.border{border:1px solid #fff}.__react_component_tooltip.type-success.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-success.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-success.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-success.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-warning{color:#fff;background-color:#F0AD4E}.__react_component_tooltip.type-warning.place-top:after{border-top-color:#F0AD4E;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-warning.place-bottom:after{border-bottom-color:#F0AD4E;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-warning.place-left:after{border-left-color:#F0AD4E;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-warning.place-right:after{border-right-color:#F0AD4E;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-warning.border{border:1px solid #fff}.__react_component_tooltip.type-warning.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-warning.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-warning.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-warning.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-error{color:#fff;background-color:#BE6464}.__react_component_tooltip.type-error.place-top:after{border-top-color:#BE6464;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-error.place-bottom:after{border-bottom-color:#BE6464;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-error.place-left:after{border-left-color:#BE6464;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-error.place-right:after{border-right-color:#BE6464;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-error.border{border:1px solid #fff}.__react_component_tooltip.type-error.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-error.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-error.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-error.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-info{color:#fff;background-color:#337AB7}.__react_component_tooltip.type-info.place-top:after{border-top-color:#337AB7;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-info.place-bottom:after{border-bottom-color:#337AB7;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-info.place-left:after{border-left-color:#337AB7;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-info.place-right:after{border-right-color:#337AB7;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-info.border{border:1px solid #fff}.__react_component_tooltip.type-info.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-info.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-info.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-info.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-light{color:#222;background-color:#fff}.__react_component_tooltip.type-light.place-top:after{border-top-color:#fff;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-light.place-bottom:after{border-bottom-color:#fff;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-light.place-left:after{border-left-color:#fff;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-light.place-right:after{border-right-color:#fff;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-light.border{border:1px solid #222}.__react_component_tooltip.type-light.border.place-top:before{border-top:8px solid #222}.__react_component_tooltip.type-light.border.place-bottom:before{border-bottom:8px solid #222}.__react_component_tooltip.type-light.border.place-left:before{border-left:8px solid #222}.__react_component_tooltip.type-light.border.place-right:before{border-right:8px solid #222}.__react_component_tooltip.place-top{margin-top:-10px}.__react_component_tooltip.place-top:before{border-left:10px solid transparent;border-right:10px solid transparent;bottom:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-top:after{border-left:8px solid transparent;border-right:8px solid transparent;bottom:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-bottom{margin-top:10px}.__react_component_tooltip.place-bottom:before{border-left:10px solid transparent;border-right:10px solid transparent;top:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-bottom:after{border-left:8px solid transparent;border-right:8px solid transparent;top:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-left{margin-left:-10px}.__react_component_tooltip.place-left:before{border-top:6px solid transparent;border-bottom:6px solid transparent;right:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-left:after{border-top:5px solid transparent;border-bottom:5px solid transparent;right:-6px;top:50%;margin-top:-4px}.__react_component_tooltip.place-right{margin-left:10px}.__react_component_tooltip.place-right:before{border-top:6px solid transparent;border-bottom:6px solid transparent;left:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-right:after{border-top:5px solid transparent;border-bottom:5px solid transparent;left:-6px;top:50%;margin-top:-4px}.__react_component_tooltip .multi-line{display:block;padding:2px 0px;text-align:center}'},function(e,t,n){"use strict";$(window).on("load",function(){setTimeout(function(){$(".page-loader").fadeOut()},500)}),$(document).ready(function(){if($(".clock")[0]){var e=new Date;e.setDate(e.getDate()),setInterval(function(){var e=(new Date).getSeconds();$(".time__sec").html((e<10?"0":"")+e)},1e3),setInterval(function(){var e=(new Date).getMinutes();$(".time__min").html((e<10?"0":"")+e)},1e3),setInterval(function(){var e=(new Date).getHours();$(".time__hours").html((e<10?"0":"")+e)},1e3)}$("body").on("click",".themes__item",function(e){e.preventDefault(),$(".themes__item").removeClass("active"),$(this).addClass("active");var t=$(this).data("sa-value");$("body").attr("data-sa-theme",t)}),$("body").on("focus",".search__text",function(){$(this).closest(".search").addClass("search--focus")}),$("body").on("blur",".search__text",function(){$(this).val(""),$(this).closest(".search").removeClass("search--focus")}),$("body").on("click",".navigation__sub > a",function(e){e.preventDefault(),$(this).parent().toggleClass("navigation__sub--toggled"),$(this).next("ul").slideToggle(250)}),$(".form-group--float")[0]&&($(".form-group--float").each(function(){0==!$(this).find(".form-control").val().length&&$(this).find(".form-control").addClass("form-control--active")}),$("body").on("blur",".form-group--float .form-control",function(){0==$(this).val().length?$(this).removeClass("form-control--active"):$(this).addClass("form-control--active")})),$("body").on("click",".dropdown-menu--active",function(e){e.stopPropagation()})}),$("#dropzone-upload")[0]&&(Dropzone.autoDiscover=!1),$(document).ready(function(){if($("#data-table")[0]&&($("#data-table").DataTable({autoWidth:!1,responsive:!0,lengthMenu:[[15,30,45,-1],["15 Rows","30 Rows","45 Rows","Everything"]],language:{searchPlaceholder:"Search for records..."},dom:"Blfrtip",buttons:[{extend:"excelHtml5",title:"Export Data"},{extend:"csvHtml5",title:"Export Data"},{extend:"print",title:"Material Admin"}],initComplete:function(e,t){$(this).closest(".dataTables_wrapper").prepend('<div class="dataTables_buttons hidden-sm-down actions"><span class="actions__item zmdi zmdi-print" data-table-action="print" /><span class="actions__item zmdi zmdi-fullscreen" data-table-action="fullscreen" /><div class="dropdown actions__item"><i data-toggle="dropdown" class="zmdi zmdi-download" /><ul class="dropdown-menu dropdown-menu-right"><a href="" class="dropdown-item" data-table-action="excel">Excel (.xlsx)</a><a href="" class="dropdown-item" data-table-action="csv">CSV (.csv)</a></ul></div></div>')}}),$("body").on("click","[data-table-action]",function(e){e.preventDefault();var t=$(this).data("table-action");if("excel"===t&&$(this).closest(".dataTables_wrapper").find(".buttons-excel").trigger("click"),"csv"===t&&$(this).closest(".dataTables_wrapper").find(".buttons-csv").trigger("click"),"print"===t&&$(this).closest(".dataTables_wrapper").find(".buttons-print").trigger("click"),"fullscreen"===t){var n=$(this).closest(".card");n.hasClass("card--fullscreen")?(n.removeClass("card--fullscreen"),$("body").removeClass("data-table-toggled")):(n.addClass("card--fullscreen"),$("body").addClass("data-table-toggled"))}})),$(".textarea-autosize")[0]&&autosize($(".textarea-autosize")),$("input-mask")[0]&&$(".input-mask").mask(),$("select.select2")[0]){var e=$(".select2-parent")[0]?$(".select2-parent"):$("body");$("select.select2").select2({dropdownAutoWidth:!0,width:"100%",dropdownParent:e})}if($("#dropzone-upload")[0]&&$("#dropzone-upload").dropzone({url:"/file/post",addRemoveLinks:!0}),$(".datetime-picker")[0]&&$(".datetime-picker").flatpickr({enableTime:!0,nextArrow:'<i class="zmdi zmdi-long-arrow-right" />',prevArrow:'<i class="zmdi zmdi-long-arrow-left" />'}),$(".date-picker")[0]&&$(".date-picker").flatpickr({enableTime:!1,nextArrow:'<i class="zmdi zmdi-long-arrow-right" />',prevArrow:'<i class="zmdi zmdi-long-arrow-left" />'}),$(".time-picker")[0]&&$(".time-picker").flatpickr({noCalendar:!0,enableTime:!0}),$("#input-slider")[0]){var t=document.getElementById("input-slider");noUiSlider.create(t,{start:[20],connect:"lower",range:{min:0,max:100}}),t.noUiSlider.on("update",function(e,t){document.getElementById("input-slider-value").value=e[t]})}if($("#input-slider-range")[0]){var n=document.getElementById("input-slider-range"),r=[document.getElementById("input-slider-range-value-1"),document.getElementById("input-slider-range-value-2")];noUiSlider.create(n,{start:[20,80],connect:!0,range:{min:0,max:100}}),n.noUiSlider.on("update",function(e,t){r[t].value=e[t]})}if($(".input-slider")[0])for(var o=document.getElementsByClassName("input-slider"),i=0;i<o.length;i++)noUiSlider.create(o[i],{start:[20],connect:"lower",range:{min:0,max:100}});if($(".color-picker")[0]&&($(".color-picker__value").colorpicker(),$("body").on("change",".color-picker__value",function(){$(this).closest(".color-picker").find(".color-picker__preview").css("backgroundColor",$(this).val())})),$(".wysiwyg-editor")[0]&&$(".wysiwyg-editor").trumbowyg({autogrow:!0}),$(".lightbox")[0]&&$(".lightbox").lightGallery({enableTouch:!0}),$('[data-toggle="popover"]')[0]&&$('[data-toggle="popover"]').popover(),$('[data-toggle="tooltip"]')[0]&&$('[data-toggle="tooltip"]').tooltip(),$(".widget-calendar__body")[0]){$(".widget-calendar__body").fullCalendar({contentHeight:"auto",theme:!1,buttonIcons:{prev:" zmdi zmdi-long-arrow-left",next:" zmdi zmdi-long-arrow-right"},header:{right:"next",center:"title, ",left:"prev"},defaultDate:"2016-08-12",editable:!0,events:[{title:"Dolor Pellentesque",start:"2016-08-01"},{title:"Purus Nibh",start:"2016-08-07"},{title:"Amet Condimentum",start:"2016-08-09"},{title:"Tellus",start:"2016-08-12"},{title:"Vestibulum",start:"2016-08-18"},{title:"Ipsum",start:"2016-08-24"},{title:"Fringilla Sit",start:"2016-08-27"},{title:"Amet Pharetra",url:"http://google.com/",start:"2016-08-30"}]});var a=moment().format("YYYY"),l=moment().format("dddd, MMM D");$(".widget-calendar__year").html(a),$(".widget-calendar__day").html(l)}var u;$(".notes__body")[0]&&$(".notes__body").each(function(e,t){u=$(this).prev().is(".notes__title")?4:6,$clamp(t,{clamp:u})});$(".scrollbar-inner")[0]&&$(".scrollbar-inner").scrollbar().scrollLock();var s=[{name:"node1",children:[{name:"node1_1"},{name:"node1_2"},{name:"node1_3"}]},{name:"node2",children:[{name:"node2_1"},{name:"node2_2"},{name:"node2_3"}]}];$(".treeview")[0]&&$(".treeview").tree({data:[{name:"node1",children:[{name:"node1_1",children:[{name:"node1_1_1"},{name:"node1_1_2"},{name:"node1_1_3"}]},{name:"node1_2"},{name:"node1_3"}]},{name:"node2",children:[{name:"node2_1"},{name:"node2_2"},{name:"node2_3"}]},{name:"node3",children:[{name:"node3_1"},{name:"node3_2"},{name:"node3_3"}]}],closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-expanded")[0]&&$(".treeview-expanded").tree({data:s,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-drag")[0]&&$(".treeview-drag").tree({data:s,dragAndDrop:!0,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-drag")[0]&&$(".treeview-drag").tree({data:s,dragAndDrop:!0,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-escape")[0]&&$(".treeview-escape").tree({data:[{label:"node1",children:[{name:'<a href="example1.html">node1_1</a>'},{name:'<a href="example2.html">node1_2</a>'},'<a href="example3.html">Example </a>']}],autoEscape:!1,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".rating")[0]&&$(".rating").each(function(){var e=$(this).data("rating");$(this).rateYo({rating:e,normalFill:"rgba(255,255,255,0.3)",ratedFill:"#ffc107"})}),$(".text-counter")[0]&&$(".text-counter").each(function(){var e=$(this).data("min-length")||0,t=$(this).data("max-length");$(this).textcounter({min:e,max:t,countDown:!0,inputErrorClass:"is-invalid",counterErrorClass:"text-orange"})})}),$(document).ready(function(){$("body").on("click","[data-sa-action]",function(e){e.preventDefault();var t=$(this),n="";switch(t.data("sa-action")){case"search-open":$(".search").addClass("search--toggled");break;case"search-close":$(".search").removeClass("search--toggled");break;case"aside-open":n=t.data("sa-target"),t.addClass("toggled"),$("body").addClass("aside-toggled"),$(n).addClass("toggled"),$(".content, .header").append('<div class="sa-backdrop" data-sa-action="aside-close" data-sa-target='+n+" />");break;case"aside-close":n=t.data("sa-target"),$("body").removeClass("aside-toggled"),$('[data-sa-action="aside-open"], '+n).removeClass("toggled"),$(".content, .header").find(".sa-backdrop").remove();break;case"fullscreen":!function(e){e.requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen()}(document.documentElement);break;case"print":window.print();break;case"login-switch":n=t.data("sa-target"),$(".login__block").removeClass("active"),$(n).addClass("active");break;case"notifications-clear":e.stopPropagation();var r=$(".top-nav__notifications .listview__item"),o=r.length,i=0;t.fadeOut(),r.each(function(){var e=$(this);setTimeout(function(){e.addClass("animated fadeOutRight")},i+=150)}),setTimeout(function(){r.remove(),$(".top-nav__notifications").addClass("top-nav__notifications--cleared")},180*o);break;case"toolbar-search-open":$(this).closest(".toolbar").find(".toolbar__search").fadeIn(200),$(this).closest(".toolbar").find(".toolbar__search input").focus();break;case"toolbar-search-close":$(this).closest(".toolbar").find(".toolbar__search input").val(""),$(this).closest(".toolbar").find(".toolbar__search").fadeOut(200)}})})},function(e,t,n){"use strict";$(window).on("load",function(){setTimeout(function(){$(".page-loader").fadeOut()},500)}),$(document).ready(function(){$("body").on("focus",".search__text",function(){$(this).closest(".search").addClass("search--focus")}),$("body").on("blur",".search__text",function(){$(this).val(""),$(this).closest(".search").removeClass("search--focus")}),$("#nav_search").autocomplete({source:function(e,t){$.ajax({url:"/search?q=".concat(e.term),dataType:"json",success:function(e){t(e)}})},minLength:3,delay:500}),$("body").on("click",".navigation__sub > a",function(e){e.preventDefault(),$(this).parent().toggleClass("navigation__sub--toggled"),$(this).next("ul").slideToggle(250)}),$(document).click(function(e){$(".sidebar-special.active").length>0&&(e.target.closest(".sidebar-special")||$(".sidebar-special").removeClass("active"))}),$(".form-group--float")[0]&&($(".form-group--float").each(function(){0==!$(this).find(".form-control").val().length&&$(this).find(".form-control").addClass("form-control--active")}),$("body").on("blur",".form-group--float .form-control",function(){0==$(this).val().length?$(this).removeClass("form-control--active"):$(this).addClass("form-control--active")})),$("body").on("click",".dropdown-menu--active",function(e){e.stopPropagation()}),$("#lookup_account").autocomplete({source:function(e,t){$.ajax({url:"/search?q=".concat(e.term,"&filter=account"),dataType:"json",success:function(e){t(e)}})},minLength:3,delay:500}),$("#ship_search").autocomplete({source:function(e,t){$.ajax({url:"/admin/settings/ships/search?q=".concat(e.term),dataType:"json",success:function(e){t(e)}})},minLength:3,delay:500})})},function(e,t,n){"use strict";$("#dropzone-upload")[0]&&(Dropzone.autoDiscover=!1),$(document).ready(function(){if($("#data-table")[0]){$("#data-table").DataTable({autoWidth:!1,responsive:!0,lengthMenu:[[15,30,45,-1],["15 Rows","30 Rows","45 Rows","Everything"]],language:{searchPlaceholder:"Search for records..."},dom:"Blfrtip",buttons:[{extend:"excelHtml5",title:"Export Data"},{extend:"csvHtml5",title:"Export Data"},{extend:"print",title:"Material Admin"}],initComplete:function(e,t){$(this).closest(".dataTables_wrapper").prepend('<div class="dataTables_buttons hidden-sm-down actions"><span class="actions__item zmdi zmdi-print" data-table-action="print" /><span class="actions__item zmdi zmdi-fullscreen" data-table-action="fullscreen" /><div class="dropdown actions__item"><i data-toggle="dropdown" class="zmdi zmdi-download" /><ul class="dropdown-menu dropdown-menu-right"><a href="" class="dropdown-item" data-table-action="excel">Excel (.xlsx)</a><a href="" class="dropdown-item" data-table-action="csv">CSV (.csv)</a></ul></div></div>')}}),$("body").on("click","[data-table-action]",function(e){e.preventDefault();var t=$(this).data("table-action");if("excel"===t&&$(this).closest(".dataTables_wrapper").find(".buttons-excel").trigger("click"),"csv"===t&&$(this).closest(".dataTables_wrapper").find(".buttons-csv").trigger("click"),"print"===t&&$(this).closest(".dataTables_wrapper").find(".buttons-print").trigger("click"),"fullscreen"===t){var n=$(this).closest(".card");n.hasClass("card--fullscreen")?(n.removeClass("card--fullscreen"),$("body").removeClass("data-table-toggled")):(n.addClass("card--fullscreen"),$("body").addClass("data-table-toggled"))}})}if($(".textarea-autosize")[0]&&autosize($(".textarea-autosize")),$("input-mask")[0]&&$(".input-mask").mask(),$("select.select2")[0]){var e=$(".select2-parent")[0]?$(".select2-parent"):$("body");$("select.select2").select2({dropdownAutoWidth:!0,width:"100%",dropdownParent:e})}if($("#dropzone-upload")[0]&&$("#dropzone-upload").dropzone({url:"/file/post",addRemoveLinks:!0}),$(".datetime-picker")[0]&&$(".datetime-picker").flatpickr({enableTime:!0,nextArrow:'<i class="zmdi zmdi-long-arrow-right" />',prevArrow:'<i class="zmdi zmdi-long-arrow-left" />'}),$(".date-picker")[0]&&$(".date-picker").flatpickr({enableTime:!1,nextArrow:'<i class="zmdi zmdi-long-arrow-right" />',prevArrow:'<i class="zmdi zmdi-long-arrow-left" />'}),$(".time-picker")[0]&&$(".time-picker").flatpickr({noCalendar:!0,enableTime:!0}),$("#input-slider")[0]){var t=document.getElementById("input-slider");noUiSlider.create(t,{start:[20],connect:"lower",range:{min:0,max:100}}),t.noUiSlider.on("update",function(e,t){document.getElementById("input-slider-value").value=e[t]})}if($("#input-slider-range")[0]){var n=document.getElementById("input-slider-range"),r=[document.getElementById("input-slider-range-value-1"),document.getElementById("input-slider-range-value-2")];noUiSlider.create(n,{start:[20,80],connect:!0,range:{min:0,max:100}}),n.noUiSlider.on("update",function(e,t){r[t].value=e[t]})}if($(".input-slider")[0])for(var o=document.getElementsByClassName("input-slider"),i=0;i<o.length;i++)noUiSlider.create(o[i],{start:[20],connect:"lower",range:{min:0,max:100}});if($(".color-picker")[0]&&($(".color-picker__value").colorpicker(),$("body").on("change",".color-picker__value",function(){$(this).closest(".color-picker").find(".color-picker__preview").css("backgroundColor",$(this).val())})),$(".wysiwyg-editor")[0]&&$(".wysiwyg-editor").trumbowyg({autogrow:!0}),$(".lightbox")[0]&&$(".lightbox").lightGallery({enableTouch:!0}),$('[data-toggle="popover"]')[0]&&$('[data-toggle="popover"]').popover(),$('[data-toggle="tooltip"]')[0]&&$('[data-toggle="tooltip"]').tooltip(),$(".widget-calendar__body")[0]){$(".widget-calendar__body").fullCalendar({contentHeight:"auto",theme:!1,buttonIcons:{prev:" zmdi zmdi-long-arrow-left",next:" zmdi zmdi-long-arrow-right"},header:{right:"next",center:"title, ",left:"prev"},defaultDate:"2016-08-12",editable:!0,events:[{title:"Dolor Pellentesque",start:"2016-08-01"},{title:"Purus Nibh",start:"2016-08-07"},{title:"Amet Condimentum",start:"2016-08-09"},{title:"Tellus",start:"2016-08-12"},{title:"Vestibulum",start:"2016-08-18"},{title:"Ipsum",start:"2016-08-24"},{title:"Fringilla Sit",start:"2016-08-27"},{title:"Amet Pharetra",url:"http://google.com/",start:"2016-08-30"}]});var a=moment().format("YYYY"),l=moment().format("dddd, MMM D");$(".widget-calendar__year").html(a),$(".widget-calendar__day").html(l)}var u;$(".notes__body")[0]&&$(".notes__body").each(function(e,t){u=$(this).prev().is(".notes__title")?4:6,$clamp(t,{clamp:u})});$(".scrollbar-inner")[0]&&$(".scrollbar-inner").scrollbar().scrollLock();var s=[{name:"node1",children:[{name:"node1_1"},{name:"node1_2"},{name:"node1_3"}]},{name:"node2",children:[{name:"node2_1"},{name:"node2_2"},{name:"node2_3"}]}];$(".treeview")[0]&&$(".treeview").tree({data:[{name:"node1",children:[{name:"node1_1",children:[{name:"node1_1_1"},{name:"node1_1_2"},{name:"node1_1_3"}]},{name:"node1_2"},{name:"node1_3"}]},{name:"node2",children:[{name:"node2_1"},{name:"node2_2"},{name:"node2_3"}]},{name:"node3",children:[{name:"node3_1"},{name:"node3_2"},{name:"node3_3"}]}],closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-expanded")[0]&&$(".treeview-expanded").tree({data:s,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-drag")[0]&&$(".treeview-drag").tree({data:s,dragAndDrop:!0,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-drag")[0]&&$(".treeview-drag").tree({data:s,dragAndDrop:!0,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".treeview-escape")[0]&&$(".treeview-escape").tree({data:[{label:"node1",children:[{name:'<a href="example1.html">node1_1</a>'},{name:'<a href="example2.html">node1_2</a>'},'<a href="example3.html">Example </a>']}],autoEscape:!1,autoOpen:!0,closedIcon:$('<i class="zmdi zmdi-plus"></i>'),openedIcon:$('<i class="zmdi zmdi-minus"></i>')}),$(".rating")[0]&&$(".rating").each(function(){var e=$(this).data("rating");$(this).rateYo({rating:e,normalFill:"rgba(255,255,255,0.3)",ratedFill:"#ffc107"})}),$(".text-counter")[0]&&$(".text-counter").each(function(){var e=$(this).data("min-length")||0,t=$(this).data("max-length");$(this).textcounter({min:e,max:t,countDown:!0,inputErrorClass:"is-invalid",counterErrorClass:"text-orange"})})})},function(e,t,n){var r=n(36);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(37)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,s=0,c=[],f=n(38);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function m(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,n);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),m(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=u||(u=y(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var g,_=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=_(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";n.r(t);n(8),n(10);var r=n(0),o=n.n(r),i=n(1);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,s(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,r["Component"]),n=t,(i=[{key:"getClass",value:function(){switch(this.props.type){case"danger":return"alert-danger";case"success":return"alert-success";default:return"alert-primary"}}},{key:"render",value:function(){var e;return this.props.dismiss&&(e=o.a.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},o.a.createElement("span",{"aria-hidden":"true"},"×"))),o.a.createElement("div",{role:"alert",className:"alert ".concat(this.getClass())},e,o.a.createElement("span",null,this.props.children))}}])&&l(n.prototype,i),a&&l(n,a),t}();function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return t&&m(e.prototype,t),n&&m(e,n),e}function y(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _=function(e){function t(){return d(this,t),y(this,v(t).apply(this,arguments))}return b(t,r["Component"]),h(t,[{key:"createXmppUrl",value:function(e){return"xmpp:".concat(e.toLowerCase().replace(/ /g,"_"))}},{key:"AuthName",value:function(){return this.props.AuthName||""}},{key:"render",value:function(){return o.a.createElement("a",{class:"xmpp",href:this.createXmppUrl(this.AuthName())},this.AuthName())}}]),t}(),w=function(e){function t(){return d(this,t),y(this,v(t).apply(this,arguments))}return b(t,r["Component"]),h(t,[{key:"mumbleLink",value:function(){if(this.props.commChannel)return this.props.commChannel.linkText||"Click to Join Comms"}},{key:"createMumbleUrl",value:function(){if(this.props.commChannel)return this.props.commChannel.url}},{key:"render",value:function(){return o.a.createElement("span",null,o.a.createElement("i",{className:"fas fa-headset"}),o.a.createElement("a",{className:"xmpp",href:this.createMumbleUrl()},this.mumbleLink()))}}]),t}();function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var O=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),x(this,S(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(t,r["Component"]),n=t,(i=[{key:"getType",value:function(){return this.props.banner?this.props.banner.type:"primary"}},{key:"getIconClass",value:function(){switch(this.getType()){case"success":return"fa-check-circle";case"danger":return"fa-engine-warning";default:return"fa-info-circle"}}},{key:"render",value:function(){return o.a.createElement(f,{type:this.getType()},o.a.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close",onClick:this.props.hide},o.a.createElement("span",{"aria-hidden":"true"},"×")),o.a.createElement("div",{className:"row"},o.a.createElement("div",{class:"col-1 text-center"},o.a.createElement("i",{className:"fas ".concat(this.getIconClass()," fa-3x")})),o.a.createElement("div",{className:"col-11"},o.a.createElement("h4",{className:"font-weight-bolder"},this.props.banner.message),o.a.createElement("blockquote",{className:"font-weight-bold text-white"},"— ",o.a.createElement(_,{AuthName:this.props.banner.createdBy})," ",this.props.banner.posted," ago."))))}}])&&k(n.prototype,i),a&&k(n,a),t}();function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,t){return!t||"object"!==C(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var R=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),N(this,j(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(t,r["Component"]),n=t,(i=[{key:"getId",value:function(){return this.props.id||""}},{key:"getTitle",value:function(){return this.props.title||""}},{key:"getSize",value:function(){switch(this.props.size){case"lg":case"xl":return"modal-".concat(this.props.size);default:return}}},{key:"render",value:function(){var e;return this.props.dismiss&&(e=o.a.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},o.a.createElement("span",{"aria-hidden":"true"},"×"))),o.a.createElement("div",{className:"modal fade",id:this.getId(),role:"dialog",tabindex:"-1"},o.a.createElement("div",{className:"modal-dialog ".concat(this.getSize()),role:"document"},o.a.createElement("div",{className:"modal-content"},o.a.createElement("div",{className:"modal-header"},o.a.createElement("h4",{className:"modal-title"},this.getTitle()),e),o.a.createElement("div",{className:"modal-body"},this.props.children))))}}])&&P(n.prototype,i),a&&P(n,a),t}();function A(e){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(e,t,n){return t&&L(e.prototype,t),n&&L(e,n),e}function D(e,t){return!t||"object"!==A(t)&&"function"!=typeof t?M(e):t}function z(e){return(z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function M(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function B(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&W(e,t)}function W(e,t){return(W=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var q=function(e){function t(e){var n;return F(this,t),(n=D(this,z(t).call(this,e))).state={value:n.props.value},n.handleChange=n.handleChange.bind(M(n)),n}return B(t,r["Component"]),U(t,[{key:"handleChange",value:function(e){this.setState({value:e.target.value})}},{key:"autocomplete",value:function(){if(this.props.autocomplete&&this.props.autocomplete)return"off"}},{key:"getId",value:function(){return this.props.id||null}},{key:"getName",value:function(){return this.props.name||null}},{key:"getPlaceholder",value:function(){return this.props.placeholder||null}},{key:"getValue",value:function(){return this.props.value||""}},{key:"genElementClass",value:function(){return this.props.classOverride||"form-control"}},{key:"isDisabled",value:function(){return"true"==this.props.disabled}},{key:"isReadOnly",value:function(){return"true"==this.props.readonly}},{key:"isRequired",value:function(){return"true"==this.props.required}},{key:"render",value:function(){return o.a.createElement("textarea",{id:this.getId(),className:this.genElementClass(),name:this.getName(),placeholder:this.getPlaceholder(),autocomplete:this.autocomplete(),disabled:this.isDisabled(),readonly:this.isReadOnly(),required:this.isRequired(),value:this.state.value,onChange:this.handleChange.bind(this)})}}]),t}(),H=function(e){function t(e){var n;return F(this,t),(n=D(this,z(t).call(this,e))).state={value:n.getValue()},n.handleChange=n.handleChange.bind(M(n)),n}return B(t,r["Component"]),U(t,[{key:"handleChange",value:function(e){this.setState({value:e.target.value}),this.props.handleChange&&this.props.handleChange(e.target.value)}},{key:"autocomplete",value:function(){if(this.props.autocomplete&&this.props.autocomplete)return"off"}},{key:"getId",value:function(){return this.props.id||null}},{key:"getName",value:function(){return this.props.name||null}},{key:"getPlaceholder",value:function(){return this.props.placeholder||null}},{key:"getType",value:function(){return this.props.type||null}},{key:"getValue",value:function(){return this.props.value||""}},{key:"genElementClass",value:function(){return this.props.classOverride||"form-control"}},{key:"isDisabled",value:function(){return"true"==this.props.disabled}},{key:"isReadOnly",value:function(){return"true"==this.props.readonly}},{key:"isRequired",value:function(){return"true"==this.props.required}},{key:"render",value:function(){return o.a.createElement("input",{type:this.getType(),id:this.getId(),className:this.genElementClass(),name:this.getName(),placeholder:this.getPlaceholder(),value:this.state.value,autocomplete:this.autocomplete(),disabled:this.isDisabled(),readonly:this.isReadOnly(),required:this.isRequired(),onChange:this.handleChange.bind(this)})}}]),t}();function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(e,t){return!t||"object"!==V(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var X=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Q(this,G(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,r["Component"]),n=t,(i=[{key:"getType",value:function(){return this.props.banner?{className:this.props.banner.type,type:this.props.banner.type.charAt(0).toUpperCase()+this.props.banner.type.slice(1)}:{className:"",type:""}}},{key:"getIssuer",value:function(){this.props.banner&&this.props.banner.createdBy}},{key:"timeDiff",value:function(){return this.props.banner?this.props.banner.posted:null}},{key:"getMessage",value:function(){return this.props.banner?this.props.banner.message:null}},{key:"deleteAnnouncement",value:function(){var e=this;$.ajax({type:"delete",url:"".concat(this.props.baseUri,"/").concat(this.props.banner.id)}).done(function(){$(".modal").modal("hide"),e.props.u()}).fail(function(e){console.error("[React/Modal (Announcement)] @deleteAnnouncement - Error deleting announcment",e.responseText)})}},{key:"createAnnouncement",value:function(e){var t=this;e.preventDefault(),$.ajax({type:"post",url:"".concat(this.props.baseUri),data:{type:e.target[0].value,message:e.target[1].value}}).done(function(){$(".modal").modal("hide"),t.props.u()}).fail(function(e){console.error("[React/Modal (Announcement)] @createAnnouncement - Error creating a new announcment",e.responseText)})}},{key:"render",value:function(){var e;return e=null==this.props.banner?o.a.createElement("form",{onSubmit:this.createAnnouncement.bind(this)},o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"AnnouncmentType"},"Announcement Type:"),o.a.createElement("select",{className:"form-control",name:"type"},o.a.createElement("option",{value:"primary"},"Information (Blue)"),o.a.createElement("option",{value:"danger"},"Important (Red)"),o.a.createElement("option",{value:"success"},"Green"))),o.a.createElement("div",{className:"form-group"},o.a.createElement(q,{name:"message",required:"true"})),o.a.createElement("button",{className:"btn btn-success",type:"submit"},"Display Announcement ",o.a.createElement("i",{className:"fas fa-check-circle"}))):o.a.createElement("div",null,o.a.createElement("h4",{className:"font-weight-bolder text-".concat(this.getType().className)},"Announcment Type: ",this.getType().type),o.a.createElement("h5",{className:"font-weight'bold pb-3"},"Issued by ",o.a.createElement(_,{AuthName:this.getIssuer()})," ",this.timeDiff()," ago."),o.a.createElement("p",{className:"pb-4"},this.getMessage()),o.a.createElement("button",{className:"btn btn-danger",onClick:this.deleteAnnouncement.bind(this)},"Remove Announcement ",o.a.createElement("i",{className:"fas fa-times-circle"}))),o.a.createElement(R,{id:"announcmentBannersModal",title:"Announcements",dismiss:"true"},e)}}])&&Y(n.prototype,i),a&&Y(n,a),t}();function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ee(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function te(e){return(te=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var re="/api/v1/announcements",oe=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=ee(this,te(t).call(this,e))).state={banner:null,display:!1},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this;this.getAnnouncement(),setInterval(function(){return e.getAnnouncement()},3e4)}},{key:"getAnnouncement",value:function(){var e=this;$.ajax({type:"get",url:re}).done(function(t,n,r){e.setState({banner:t,display:200==r.status})}).fail(function(t){e.setState({display:!1}),console.error("[React/Announcement] @getAnnouncement - Error retrieving the latest announcment",t.responseText)})}},{key:"hide",value:function(){$.ajax({type:"post",url:"".concat(re,"/").concat(this.state.banner.id,"/hide")}).fail(function(e){console.error("[React/Announcement] @hide - Error hiding the announcment",e.responseText)})}},{key:"render",value:function(){var e;return this.state.banner&&this.state.display&&(e=o.a.createElement("div",null,o.a.createElement(O,{banner:this.state.banner,baseUri:re,hide:this.hide.bind(this)}))),o.a.createElement("div",{className:"container"},e,o.a.createElement(X,{banner:this.state.banner,baseUri:re,u:this.getAnnouncement.bind(this)}))}}])&&Z(n.prototype,i),a&&Z(n,a),t}();function ie(e){var t=new Date(e);return"".concat(["Sun","Mon","Tue","Wed","Thur","Fri","Sun"][t.getDay()]," ").concat(t.getDate()," ").concat(["January","February","March","April","May","June","July","August","September","October","November","December"][t.getMonth()],", ").concat(t.getFullYear())}function ae(e,t){if(!t instanceof Array||t instanceof Array&&0==t.length)return{id:0,name:"",corporation:{id:0,name:""},alliance:{id:0,name:""}};for(var n=0;n<t.length;n++)if(t[n].name.toLowerCase()==e.toLowerCase())return t[n];return t[0]}function le(e){return(le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ue(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ce(e,t,n){return t&&se(e.prototype,t),n&&se(e,n),e}function fe(e,t){return!t||"object"!==le(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function pe(e){return(pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function de(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("announcementBanner")&&Object(i.render)(o.a.createElement(oe,null),document.getElementById("announcementBanner"));var he=function(e){function t(){return ue(this,t),fe(this,pe(t).apply(this,arguments))}return de(t,r["Component"]),ce(t,[{key:"revoke",value:function(e){var t=this;$.ajax({type:"delete",url:"".concat(this.props.baseUri,"/").concat(e)}).done(function(){t.props.u()}).fail(function(t){console.error("[React/ActiveBans] @revoke - Error revoking ban (ban Id: ".concat(e,")"),t.responseText)})}},{key:"render",value:function(){var e,t=this;return this.props.bans&&(e=this.props.bans.map(function(e,n){return o.a.createElement(ye,{ban:e,revokeBan:t.revoke.bind(t,e.id),setIndex:t.props.setIndex.bind(t,n),admin:t.props.admin})})),o.a.createElement("table",{className:"table table-responsive"},o.a.createElement("thead",null,o.a.createElement("tr",{className:"font-alpha"},o.a.createElement("th",null),o.a.createElement("th",null,"Name"),o.a.createElement("th",null,"Admin"),o.a.createElement("th",null),o.a.createElement("th",null),o.a.createElement("th",null))),o.a.createElement("tbody",null,e))}}]),t}(),ye=function(e){function t(){return ue(this,t),fe(this,pe(t).apply(this,arguments))}return de(t,r["Component"]),ce(t,[{key:"getBanType",value:function(){return this.props.ban.expiresAt?o.a.createElement("span",{className:"text-white"},"Temporary Ban"):o.a.createElement("span",{className:"text-danger"},"Permanant Ban")}},{key:"getBanId",value:function(){return this.props.ban.id||null}},{key:"getBaneeName",value:function(){return this.props.ban.bannedAccount.name||""}},{key:"getAdminName",value:function(){return this.props.ban.banAdmin.name||""}},{key:"getPilotUrl",value:function(){var e=0;return this.props.ban&&this.props.ban.bannedAccount.pilots&&(e=ae(this.props.ban.bannedAccount.name,this.props.ban.bannedAccount.pilots).id),"https://imageserver.eveonline.com/Character/".concat(e,"_32.jpg")}},{key:"render",value:function(){var e;return this.props.admin&&(e=o.a.createElement("button",{className:"btn btn-wl btn-success btn-sm",onClick:this.props.revokeBan},"Revoke Ban ",o.a.createElement("i",{className:"fas fa-gavel"}))),o.a.createElement("tr",null,o.a.createElement("td",null,o.a.createElement("img",{className:"img d-block mx-auto",src:this.getPilotUrl(),alt:"Pilot's Avatar"})),o.a.createElement("td",null,o.a.createElement(_,{AuthName:this.getBaneeName()})),o.a.createElement("td",null,o.a.createElement(_,{AuthName:this.getAdminName()})),o.a.createElement("td",null,this.getBanType()),o.a.createElement("td",null,e),o.a.createElement("td",null,o.a.createElement("button",{className:"btn btn-wl btn-dark btn-sm",onClick:this.props.setIndex},o.a.createElement("i",{className:"fas fa-chevron-double-right"}))))}}]),t}();function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ge(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ee=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ge(this,_e(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidUpdate",value:function(){this.configureAutocomplete()}},{key:"componentDidMount",value:function(){this.configureAutocomplete()}},{key:"configureAutocomplete",value:function(){$("#lookup_account").autocomplete({source:function(e,t){$.ajax({url:"/search?q=".concat(e.term,"&filter=account"),dataType:"json",success:function(e){t(e)}})},minLength:3,delay:500})}},{key:"inputNewBan",value:function(){return null==this.props.selectedBan}},{key:"getPilotUrl",value:function(){var e=0;return this.props.selectedBan&&this.props.selectedBan.bannedAccount.pilots[0]&&(e=ae(this.props.selectedBan.bannedAccount.name,this.props.selectedBan.bannedAccount.pilots).id),"https://imageserver.eveonline.com/Character/".concat(e,"_128.jpg")}},{key:"newBan",value:function(e){var t=this;e.preventDefault(),$.ajax({type:"POST",url:this.props.baseUri,data:$("#banForm").serialize()}).done(function(e){t.props.u()}).fail(function(e){console.error("[React/BanInfo] @newBan - Error creating a ban",e.responseText)})}},{key:"updateBan",value:function(e){var t=this;e.preventDefault(),$.ajax({type:"put",url:"".concat(this.props.baseUri,"/").concat(this.props.selectedBan.id),data:$("#banForm").serialize()}).done(function(e){t.props.u()}).fail(function(e){console.error("[React/BanInfo] @updateBan - Error updating ban (ban Id: ".concat(t.props.selectedBan.id,")"),e.responseText)})}},{key:"render",value:function(){var e;this.inputNewBan()||(e=o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"createdAt"},"Ban issued:"),o.a.createElement(H,{id:"createdAt",type:"text",value:ie(this.props.selectedBan.createdAt),disabled:"true",key:this.props.selectedBan.id})));var t,n={};return this.inputNewBan()||(n.large=o.a.createElement("button",{className:"btn btn-dark float-left",type:"button",onClick:this.props.setIndex.bind(this,null)},"Back ",o.a.createElement("i",{className:"fas fa-undo-alt"})),n.small=o.a.createElement("i",{className:"fas fa-times-circle float-right mr-3 i-btn",onClick:this.props.setIndex.bind(this,null)})),this.props.admin&&this.inputNewBan()?t=o.a.createElement("button",{className:"btn btn-danger float-right",type:"submit"},"Ban User ",o.a.createElement("i",{className:"fas fa-gavel"})):this.props.admin&&(t=o.a.createElement("button",{className:"btn btn-danger float-right",type:"submit"},"Update Ban ",o.a.createElement("i",{className:"fas fa-gavel"}))),o.a.createElement("div",null,o.a.createElement("div",{className:"panel-body py-4"},n.small,o.a.createElement("img",{className:"rounded-circle d-block mx-auto",src:this.getPilotUrl(),alt:"Pilot's Avatar"}),o.a.createElement("form",{id:"banForm",onSubmit:this.inputNewBan()?this.newBan.bind(this):this.updateBan.bind(this)},o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"#lookup_account"},"GSF Auth Name:"),o.a.createElement(H,{id:"lookup_account",type:"text",classOverride:"form-control account_lookup",name:"accountName",value:this.props.selectedBan?this.props.selectedBan.bannedAccount.name:"",disabled:this.props.selectedBan?"true":"false",key:this.props.selectedBan?this.props.selectedBan.id:0,required:"true",autocomplete:"off"})),e,o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"banExpires"},"Ban Expires:"),o.a.createElement(H,{type:"text",id:"banExpires",disabled:"true"}),o.a.createElement("small",{className:"text-muted"},"Bans expire at downtime, leave blank for permanant")),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"banReason"},"Reason:"),o.a.createElement(q,{id:"banReason",name:"banReason",value:this.props.selectedBan?this.props.selectedBan.reason:"",key:this.props.selectedBan?this.props.selectedBan.id:0,required:"true"}),o.a.createElement("small",{className:"text-muted"},"Only visible to the FC team")),n.large,t)))}}])&&be(n.prototype,i),a&&be(n,a),t}();function ke(e){return(ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Se(e,t){return!t||"object"!==ke(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Te(e){return(Te=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oe(e,t){return(Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ce=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Se(this,Te(t).call(this,e))).state={bans:null,admin:!1,banIndex:null,key:0},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oe(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/admin/bans","/active")}).done(function(t){e.setState({bans:t.bans,admin:t.admin,banIndex:null,key:e.state.key+1})}).fail(function(e){console.error("[React/Bans] @getData - Error retrieving active bans",e.responseText)})}},{key:"selectedBan",value:function(){return this.state.bans&&this.state.bans[this.state.banIndex]?this.state.bans[this.state.banIndex]:null}},{key:"setBanIndex",value:function(e){this.setState({banIndex:e})}},{key:"render",value:function(){return o.a.createElement("div",{className:"container"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-8 col-md-12"},o.a.createElement(he,{bans:this.state.bans,u:this.getData.bind(this),setIndex:this.setBanIndex.bind(this),admin:this.state.admin,baseUri:"/admin/bans"})),o.a.createElement("div",{className:"col-lg-4 col-md-12"},o.a.createElement(Ee,{u:this.getData.bind(this),selectedBan:this.selectedBan(),setIndex:this.setBanIndex.bind(this),admin:this.state.admin,baseUri:"/admin/bans",key:this.state.key}))))}}])&&xe(n.prototype,i),a&&xe(n,a),t}();function Pe(e){return(Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ne(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function je(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ie(e,t,n){return t&&je(e.prototype,t),n&&je(e,n),e}function Re(e,t){return!t||"object"!==Pe(t)&&"function"!=typeof t?$e(e):t}function Ae(e){return(Ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $e(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Fe(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Le(e,t)}function Le(e,t){return(Le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("bans")&&Object(i.render)(o.a.createElement(Ce,null),document.getElementById("bans"));var Ue=function(e){function t(){var e,n,r,o,i;Ne(this,t);for(var a=arguments.length,l=new Array(a),u=0;u<a;u++)l[u]=arguments[u];return n=Re(this,(e=Ae(t)).call.apply(e,[this].concat(l))),r=$e(n),i=void 0,(o="target_id")in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,n}return Fe(t,r["Component"]),Ie(t,[{key:"apiCall",value:function(e){$.ajax({type:"post",url:"/api/esi-ui/show-info",data:{target_id:e}}).fail(function(e){console.error("React/EsiUi {Pilot@apiCall} - Error requesting ESI UI Showinfo",e.responseText)})}},{key:"getId",value:function(){return this.props.pilot?this.props.pilot.characterID||this.props.pilot.id:0}},{key:"getName",value:function(){return this.props.pilot?this.props.pilot.characterName||this.props.pilot.name:""}},{key:"render",value:function(){return o.a.createElement("a",{onClick:this.apiCall.bind(this,this.getId())},this.getName())}}]),t}(),De=function(e){function t(){return Ne(this,t),Re(this,Ae(t).apply(this,arguments))}return Fe(t,r["Component"]),Ie(t,[{key:"apiCall",value:function(e){$.ajax({type:"post",url:"/api/esi-ui/show-info",data:{target_id:e}}).fail(function(e){console.error("React/EsiUi {Corporation@apiCall} - Error requesting ESI UI Showinfo",e.responseText)})}},{key:"getId",value:function(){return this.props.corporation?this.props.corporation.id:-1}},{key:"getName",value:function(){return this.props.corporation?this.props.corporation.name:""}},{key:"render",value:function(){return o.a.createElement("a",{onClick:this.apiCall.bind(this,this.getId())},this.getName())}}]),t}(),ze=function(e){function t(){return Ne(this,t),Re(this,Ae(t).apply(this,arguments))}return Fe(t,r["Component"]),Ie(t,[{key:"apiCall",value:function(e){$.ajax({type:"post",url:"/api/esi-ui/show-info",data:{target_id:e}}).fail(function(e){console.error("React/EsiUi {Alliance@apiCall} - Error requesting ESI UI Showinfo",e.responseText)})}},{key:"getId",value:function(){return this.props.alliance?this.props.alliance.id:-1}},{key:"getName",value:function(){return this.props.alliance?this.props.alliance.name:""}},{key:"render",value:function(){return o.a.createElement("a",{onClick:this.apiCall.bind(this,this.getId())},this.getName())}}]),t}(),Me=function(e){function t(){return Ne(this,t),Re(this,Ae(t).apply(this,arguments))}return Fe(t,r["Component"]),Ie(t,[{key:"apiCall",value:function(e){$.ajax({type:"post",url:"/api/esi-ui/destination",data:{target_id:e}}).fail(function(e){console.error("React/EsiUi {Destination@apiCall} - Error requesting ESI UI Set Destination",e.responseText)})}},{key:"getId",value:function(){return this.props.system?this.props.system.id:""}},{key:"getName",value:function(){return this.props.system?this.props.system.name:""}},{key:"render",value:function(){return o.a.createElement("a",{onClick:this.apiCall.bind(this,this.getId())},this.getName())}}]),t}();function Be(e){return(Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function We(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function He(e,t,n){return t&&qe(e.prototype,t),n&&qe(e,n),e}function Ve(e,t){return!t||"object"!==Be(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ye(e){return(Ye=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qe(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ge(e,t)}function Ge(e,t){return(Ge=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ke=function(e){function t(){return We(this,t),Ve(this,Ye(t).apply(this,arguments))}return Qe(t,r["Component"]),He(t,[{key:"render",value:function(){var e,t=this;return this.props.users&&(e=this.props.users.map(function(e,n){return o.a.createElement(Xe,{user:e,setIndex:t.props.setIndex.bind(t,n)})})),o.a.createElement("table",{className:"table table-responsive"},o.a.createElement("thead",null,o.a.createElement("tr",{className:"font-alpha"},o.a.createElement("th",null),o.a.createElement("th",null,"Name"),o.a.createElement("th",null,"Corporation"),o.a.createElement("th",null,"Alliance"),o.a.createElement("th",null,"Roles"),o.a.createElement("th",null))),o.a.createElement("tbody",null,e))}}]),t}(),Xe=function(e){function t(){return We(this,t),Ve(this,Ye(t).apply(this,arguments))}return Qe(t,r["Component"]),He(t,[{key:"getCorporation",value:function(){if(this.props.user&&this.props.user.pilots)return ae(this.props.user.name,this.props.user.pilots).corporation}},{key:"getAlliance",value:function(){if(this.props.user&&this.props.user.pilots)return ae(this.props.user.name,this.props.user.pilots).alliance}},{key:"getAccountName",value:function(){return this.props.user.name||""}},{key:"getPilotUrl",value:function(){var e=0;return this.props.user&&(e=ae(this.props.user.name,this.props.user.pilots).id),"https://imageserver.eveonline.com/Character/".concat(e,"_32.jpg")}},{key:"render",value:function(){var e;return this.props.user.roles&&(e=this.props.user.roles.map(function(e){return o.a.createElement("p",{className:"m-0"},e.name)})),o.a.createElement("tr",null,o.a.createElement("td",null,o.a.createElement("img",{className:"img d-block mx-auto",src:this.getPilotUrl(),alt:"Pilot's Avatar"})),o.a.createElement("td",null,o.a.createElement(_,{AuthName:this.getAccountName()})),o.a.createElement("td",null,o.a.createElement(De,{corporation:this.getCorporation()})),o.a.createElement("td",null,o.a.createElement(ze,{alliance:this.getAlliance()})),o.a.createElement("td",null,e),o.a.createElement("td",null,o.a.createElement("button",{className:"btn btn-wl btn-dark btn-sm",onClick:this.props.setIndex.bind(this,this.props.index)},o.a.createElement("i",{className:"fas fa-chevron-double-right"}))))}}]),t}();function Je(e){return(Je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ze(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return!t||"object"!==Je(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nt(e,t){return(nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var rt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),et(this,tt(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nt(e,t)}(t,r["Component"]),n=t,(i=[{key:"render",value:function(){var e;return this.props.pilots&&(e=this.props.pilots.map(function(e){return o.a.createElement("div",{className:"col-lg-6 col-sm-12 pb-3"},o.a.createElement("img",{className:"float-left pr-3",src:"https://imageserver.eveonline.com/Character/".concat(e.id,"_32.jpg"),alt:"Pilot Avatar"}),o.a.createElement(Ue,{pilot:e}))})),o.a.createElement("div",null,o.a.createElement("h4",null,"Pilots"),o.a.createElement("div",{className:"row"},e))}}])&&Ze(n.prototype,i),a&&Ze(n,a),t}();function ot(e){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function at(e,t){return!t||"object"!==ot(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function lt(e){return(lt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var st=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),at(this,lt(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}(t,r["Component"]),n=t,(i=[{key:"removeRole",value:function(e){var t=this;$.ajax({type:"delete",url:"".concat(this.props.baseUri,"/revoke"),data:{roleId:e,accountId:this.props.user.id||null}}).done(function(e){var n=t.props.userIndex;t.props.u(),t.props.setIndex(n)}).fail(function(e){console.error("[React/Roles] @removeRole - Error revoking role:",e.responseText)})}},{key:"render",value:function(){var e,t=this;return this.props.user&&(e=this.props.user.roles.map(function(e){return o.a.createElement("span",{className:"badge role"},e.name," ",o.a.createElement("i",{className:"fas fa-times ml-2",onClick:t.removeRole.bind(t,e.id)}))})),o.a.createElement("div",null,o.a.createElement("h4",{className:"d-inline-block pb-2"},"Roles"),o.a.createElement("div",{className:"d-block"},e))}}])&&it(n.prototype,i),a&&it(n,a),t}();function ct(e){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ft(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pt(e,t){return!t||"object"!==ct(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function dt(e){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mt(e,t){return(mt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ht=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),pt(this,dt(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mt(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidUpdate",value:function(){this.configureAutocomplete()}},{key:"componentDidMount",value:function(){this.configureAutocomplete()}},{key:"configureAutocomplete",value:function(){$("#lookup_account").autocomplete({source:function(e,t){$.ajax({url:"/search?q=".concat(e.term,"&filter=account"),dataType:"json",success:function(e){t(e)}})},minLength:3,delay:500})}},{key:"inputNewFc",value:function(){return null==this.props.selectedUser}},{key:"getPilotUrl",value:function(){var e=0;return this.props.selectedUser&&(e=ae(this.props.selectedUser.name,this.props.selectedUser.pilots).id),"https://imageserver.eveonline.com/Character/".concat(e,"_128.jpg")}},{key:"getCorporation",value:function(){return this.props.selectedUser&&this.props.selectedUser.pilots?ae(this.props.selectedUser.name,this.props.selectedUser.pilots).corporation:null}},{key:"getAlliance",value:function(){return this.props.selectedUser&&this.props.selectedUser.pilots?ae(this.props.selectedUser.name,this.props.selectedUser.pilots).alliance:null}},{key:"addRole",value:function(e){var t=this;null!=e?$.ajax({type:"post",url:"".concat(this.props.baseUri),data:{account_id:this.props.selectedUser?this.props.selectedUser.id:null,role_id:e,account_name:$("#lookup_account").val()}}).done(function(e){var n=t.props.userIndex;t.props.u(),t.props.setIndex(n)}).fail(function(e){console.error("[React/UserInfo] @addRole - Error adding role",e.responseText)}):console.error("[React/UserInfo] @addRole - You must supply a role ID")}},{key:"render",value:function(){var e,t,n,r,i,a,l=this,u={};return this.inputNewFc()||(u.large=o.a.createElement("button",{className:"btn btn-dark float-left mt-3",type:"button",onClick:this.props.setIndex.bind(this,null)},"Back ",o.a.createElement("i",{className:"fas fa-undo-alt"})),u.small=o.a.createElement("i",{className:"fas fa-times-circle float-right mr-3 i-btn",onClick:this.props.setIndex.bind(this,null)})),this.inputNewFc()||(e=o.a.createElement("div",{className:"corporation"},o.a.createElement("h4",null,"Corporation"),o.a.createElement("img",{src:"https://imageserver.eveonline.com/Corporation/".concat(this.getCorporation()?this.getCorporation().id:0,"_32.png"),alt:"Corporation Logo"}),o.a.createElement(De,{corporation:this.getCorporation()}))),this.inputNewFc()||(t=o.a.createElement("div",{className:"alliance"},o.a.createElement("h4",null,"Alliance"),o.a.createElement("img",{src:"https://imageserver.eveonline.com/Alliance/".concat(this.getAlliance()?this.getAlliance().id:0,"_32.png"),alt:"Alliance Logo"}),o.a.createElement(ze,{alliance:this.getAlliance()}))),this.props.availableRoles&&(n=this.props.availableRoles.map(function(e){return o.a.createElement("a",{className:"dropdown-item",role:"presentation",onClick:l.addRole.bind(l,e.id)},e.name)})),this.props.availableRoles&&(r=o.a.createElement("div",{className:"input-group-append"},o.a.createElement("div",{className:"dropdown"},o.a.createElement("button",{className:"btn btn-dark dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"Add to Role... "),o.a.createElement("div",{className:"dropdown-menu",role:"menu"},n)))),this.inputNewFc()||(i=o.a.createElement(st,{user:this.props.selectedUser?this.props.selectedUser:null,baseUri:this.props.baseUri,u:this.props.u.bind(this),userIndex:this.props.userIndex,setIndex:this.props.setIndex.bind(this)}),a=o.a.createElement(rt,{pilots:this.props.selectedUser?this.props.selectedUser.pilots:null})),o.a.createElement("div",{className:"panel-body py-4"},u.small,o.a.createElement("img",{className:"rounded-circle d-block mx-auto",src:this.getPilotUrl(),alt:"Pilot's Avatar"}),o.a.createElement("form",null,o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"#lookup_account"},"GSF Auth Name:"),o.a.createElement("div",{className:"input-group"},o.a.createElement(H,{id:"lookup_account",type:"text",name:"name",required:"true",value:this.props.selectedUser?this.props.selectedUser.name:"",disabled:this.props.selectedUser?"true":"false",key:this.props.selectedUser?this.props.selectedUser.id:null}),r),o.a.createElement("div",{className:"text-muted mt-1"},"Last logged in: ",this.props.selectedUser?ie(this.props.selectedUser.lastLogin):"")),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-6 col-md-12"},e),o.a.createElement("div",{className:"col-lg-6 col-md-12"},t)),a,i,u.large))}}])&&ft(n.prototype,i),a&&ft(n,a),t}();function yt(e){return(yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function bt(e,t){return!t||"object"!==yt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function gt(e){return(gt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _t(e,t){return(_t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var wt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=bt(this,gt(t).call(this,e))).state={users:null,roles:null,userIndex:null,key:0},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_t(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/admin/commanders","/data")}).done(function(t){e.setState({users:t.fcs,roles:t.roles})}).fail(function(e){console.error("React/Commanders {Commanders@getData} - Error getting active users",e.responseText)}),this.setUserIndex(null)}},{key:"selectedUser",value:function(){return this.state.users&&this.state.users[this.state.userIndex]?this.state.users[this.state.userIndex]:null}},{key:"addGroup",value:function(e){var t=this,n=this.state.users[this.state.userIndex]?this.state.users[this.state.userIndex].id:null,r=this.state.userInput;$.ajax({type:"post",url:"".concat("/admin/commanders"),data:{role_id:e,account_id:n,account_name:r}}).done(function(){var e=t.state.userIndex;t.getData(),t.setUserIndex(e)}).fail(function(e){console.error("React/Commanders {Commanders@addGroup} - Error adding group",e.responseText)})}},{key:"setUserIndex",value:function(e){this.setState({userIndex:e})}},{key:"getUsers",value:function(){return this.state.users?this.state.users:null}},{key:"setStateFromInput",value:function(e){this.setState({userInput:e})}},{key:"render",value:function(){return o.a.createElement("div",{className:"container"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-8 col-md-12"},o.a.createElement(Ke,{users:this.state.users,u:this.getData.bind(this),setIndex:this.setUserIndex.bind(this),baseUri:"/admin/commanders"})),o.a.createElement("div",{className:"col-lg-4 col-md-12"},o.a.createElement(ht,{u:this.getData.bind(this),selectedUser:this.selectedUser(),setIndex:this.setUserIndex.bind(this),userIndex:this.state.userIndex,availableRoles:this.state.roles,baseUri:"/admin/commanders",key:this.state.key}))))}}])&&vt(n.prototype,i),a&&vt(n,a),t}();function Et(e){return(Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function kt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xt(e,t){return!t||"object"!==Et(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function St(e){return(St=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Tt(e,t){return(Tt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("user_management")&&Object(i.render)(o.a.createElement(wt,null),document.getElementById("user_management"));var Ot=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),xt(this,St(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Tt(e,t)}(t,r["Component"]),n=t,(i=[{key:"getId",value:function(){return this.props.id||""}},{key:"getTitle",value:function(){return this.props.title||""}},{key:"getSize",value:function(){switch(this.props.size){case"lg":case"xl":return"modal-".concat(this.props.size);default:return}}},{key:"render",value:function(){var e;return this.props.dismiss&&(e=o.a.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},o.a.createElement("span",{"aria-hidden":"true"},"×"))),o.a.createElement("div",{className:"modal fade",id:this.getId(),role:"dialog",tabindex:"-1"},o.a.createElement("div",{className:"modal-dialog ".concat(this.getSize()),role:"document"},o.a.createElement("div",{className:"modal-content"},o.a.createElement("div",{className:"modal-header"},o.a.createElement("h4",{className:"modal-title"},this.getTitle()),e),o.a.createElement("div",{className:"modal-body"},this.props.children))))}}])&&kt(n.prototype,i),a&&kt(n,a),t}();function Ct(e){return(Ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Nt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function jt(e,t,n){return t&&Nt(e.prototype,t),n&&Nt(e,n),e}function It(e,t){return!t||"object"!==Ct(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Rt(e){return(Rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function At(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$t(e,t)}function $t(e,t){return($t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ft=function(e){function t(){return Pt(this,t),It(this,Rt(t).apply(this,arguments))}return At(t,r["Component"]),jt(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"col-4"},o.a.createElement("button",{className:"btn btn-dark d-block mx-auto","data-toggle":"modal","data-target":"#newFleetModal"},"Register a New Fleet"))}}]),t}(),Lt=function(e){function t(){return Pt(this,t),It(this,Rt(t).apply(this,arguments))}return At(t,r["Component"]),jt(t,[{key:"registerFleet",value:function(e){e.preventDefault(),$.ajax({type:"post",url:"/fleets",data:$("#newFleetForm").serialize()}).done(function(e){window.location.href="/fleets/".concat(e)}).fail(function(e){console.error("React/NewFleetModal {NewFleetModal@registerFleet} - Error registering the fleet",e.responseText)})}},{key:"render",value:function(){var e,t,n,r=this;return this.props.options&&(e=this.props.options.pilots.map(function(e){var t=!1;return r.props.prefPilot&&r.props.prefPilot.id==e.id&&(t=!0),o.a.createElement("option",{value:e.id,selected:t},e.name)})),this.props.options&&(t=this.props.options.fleetTypes.map(function(e){return o.a.createElement("option",{value:e},e)})),this.props.options&&(n=this.props.options.comms.map(function(e){return o.a.createElement("option",{value:e.id},e.linkText)})),o.a.createElement(Ot,{id:"newFleetModal",title:"Start a fleet!",dismiss:"true"},o.a.createElement("form",{id:"newFleetForm",onSubmit:this.registerFleet.bind(this)},o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{className:"required",htmlFor:"EsiFleet"},"ESI Fleet URL:"),o.a.createElement(H,{id:"EsiFleet",name:"EsiFleetUrl",placeholder:"https://esi.evetech.net/v1/fleets/.../?datasource=tranquility",autocomplete:"false",required:"true"})),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{className:"required",htmlFor:"FleetBoss"},"Fleet Boss:"),o.a.createElement("select",{id:"FleetBoss",name:"FleetBoss",className:"form-control",required:!0},e),o.a.createElement("span",{className:"text-muted font-italic"},"Must be the pilot with the star in game.")),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{className:"required",htmlFor:"FleetType"},"Fleet Type:"),o.a.createElement("select",{id:"FleetType",name:"FleetType",className:"form-control",required:!0},t),o.a.createElement("span",{className:"text-muted font-italic"},"This will display your fleet cap to pilots.")),o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{className:"required",htmlFor:"FleetComms"},"Fleet Comms:"),o.a.createElement("select",{id:"FleetComms",name:"FleetComms",className:"form-control",required:!0},n)),o.a.createElement("button",{className:"btn btn-success pull-right"},"Register Fleet")))}}]),t}();function Ut(e){return(Ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function zt(e,t){return!t||"object"!==Ut(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Mt(e){return(Mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bt(e,t){return(Bt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Wt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),zt(this,Mt(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Bt(e,t)}(t,r["Component"]),n=t,(i=[{key:"getClass",value:function(){switch(this.props.type){case"danger":return"alert-danger";case"success":return"alert-success";default:return"alert-primary"}}},{key:"render",value:function(){var e;return this.props.dismiss&&(e=o.a.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},o.a.createElement("span",{"aria-hidden":"true"},"×"))),o.a.createElement("div",{role:"alert",className:"alert ".concat(this.getClass())},e,o.a.createElement("span",null,this.props.children))}}])&&Dt(n.prototype,i),a&&Dt(n,a),t}();function qt(e){return(qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ht(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Yt(e,t,n){return t&&Vt(e.prototype,t),n&&Vt(e,n),e}function Qt(e,t){return!t||"object"!==qt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Gt(e){return(Gt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Kt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xt(e,t)}function Xt(e,t){return(Xt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Jt=function(e){function t(){return Ht(this,t),Qt(this,Gt(t).apply(this,arguments))}return Kt(t,r["Component"]),Yt(t,[{key:"joinFleet",value:function(e){$.ajax({type:"post",url:"/fleets/".concat(this.props.fleet.id,"/invite/").concat(e)}).fail(function(e){console.error("React/Components/FleetInfo {FleetInfo@joinFleet} - Error joining the waitlist",e.responseText)})}},{key:"render",value:function(){var e,t,n=this;return this.props.myPilots&&(e=this.props.myPilots.map(function(e){return o.a.createElement("a",{role:"presentation",className:"dropdown-item",onClick:n.joinFleet.bind(n,e.id)},e.name)})),this.props.showFcOptions&&(t=o.a.createElement("div",{role:"group",className:"btn-group special"},o.a.createElement("a",{className:"btn btn-dark",type:"button",href:"/fleets/".concat(this.props.fleet.id)},"Manage Fleet"),o.a.createElement("div",{className:"dropdown btn-group",role:"group"},o.a.createElement("button",{className:"btn btn-success dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"Join Fleet With...."),o.a.createElement("div",{role:"menu",className:"dropdown-menu"},e)))),o.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},o.a.createElement("div",{className:"fleet-info"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(Zt,{fc:this.props.fleet.fc})),o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(en,{system:this.props.fleet.system}))),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(tn,{members:this.props.fleet.members})),o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(w,{commChannel:this.props.fleet.comms}))),t))}}]),t}(),Zt=function(e){function t(){return Ht(this,t),Qt(this,Gt(t).apply(this,arguments))}return Kt(t,r["Component"]),Yt(t,[{key:"render",value:function(){return o.a.createElement("span",null,"FC: ",o.a.createElement(Ue,{pilot:this.props.fc}))}}]),t}(),en=function(e){function t(){return Ht(this,t),Qt(this,Gt(t).apply(this,arguments))}return Kt(t,r["Component"]),Yt(t,[{key:"render",value:function(){return o.a.createElement("span",null,o.a.createElement("i",{className:"fas fa-map-marker-alt"}),o.a.createElement(Me,{system:this.props.system}))}}]),t}(),tn=function(e){function t(){return Ht(this,t),Qt(this,Gt(t).apply(this,arguments))}return Kt(t,r["Component"]),Yt(t,[{key:"render",value:function(){return o.a.createElement("span",null,o.a.createElement("i",{className:"fas fa-users"}),"".concat(this.props.members.onGrid," / ").concat(this.props.members.max))}}]),t}(),nn=n(4);function rn(e){return(rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function on(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function an(e,t){return!t||"object"!==rn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ln(e){return(ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function un(e,t){return(un=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var sn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=an(this,ln(t).call(this,e))).state={initialPilotSet:!1},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&un(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidUpdate",value:function(){this.state.initialPilotSet||(this.props.selectedPilot(this.props.prefPilot.id),this.setState({initialPilotSet:!0}))}},{key:"updateSelectedPilot",value:function(e){this.props.selectedPilot(e.target.value)}},{key:"render",value:function(){var e,t=this;return null!=this.props.pilots&&(e=this.props.pilots.map(function(e){var n=!1;return t.props.prefPilot&&e.id==t.props.prefPilot.id&&(n=!0),o.a.createElement("option",{value:e.id,selected:n},e.name)})),o.a.createElement("div",null,o.a.createElement("label",{htmlFor:"selectPilot"},"Waitlist With:"),o.a.createElement("select",{id:"selectPilot",className:"form-control",onChange:this.updateSelectedPilot.bind(this)},e))}}])&&on(n.prototype,i),a&&on(n,a),t}();function cn(e){return(cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pn(e,t){return!t||"object"!==cn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function dn(e){return(dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mn(e,t){return(mn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var hn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),pn(this,dn(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mn(e,t)}(t,r["Component"]),n=t,(i=[{key:"updateFits",value:function(e){this.props.selectedFit(e.target.checked,Number(e.target.name))}},{key:"render",value:function(){var e,t=this;return e=this.props.fits&&this.props.fits.length>0?this.props.fits.map(function(e){return o.a.createElement("div",{className:"col-12 pb-3"},o.a.createElement("label",{className:"custom-control custom-checkbox"},o.a.createElement("input",{type:"checkbox",className:"custom-control-input",onChange:t.updateFits.bind(t),name:e.id}),o.a.createElement("span",{className:"custom-control-indicator"}),o.a.createElement("span",{className:"custom-control-description"},o.a.createElement("img",{src:"https://image.eveonline.com/Render/".concat(e.typeId,"_32.png")})," ",e.description)))}):o.a.createElement("p",{className:"text-center"},o.a.createElement("a",{className:"xmpp",href:"/account-settings"},"Add a Fit Here")),o.a.createElement("div",{className:"row  pb-4"},o.a.createElement("div",{className:"col-12"},o.a.createElement("label",{className:"pb-3"},"What ships do you wish to fly?"),e))}}])&&fn(n.prototype,i),a&&fn(n,a),t}();function yn(e){return(yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function bn(e,t){return!t||"object"!==yn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function gn(e){return(gn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _n(e,t){return(_n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var wn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),bn(this,gn(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_n(e,t)}(t,r["Component"]),n=t,(i=[{key:"updateRoles",value:function(e){this.props.selectedRole(e.target.checked,Number(e.target.name))}},{key:"render",value:function(){var e,t=this;return this.props.roles&&(e=this.props.roles.map(function(e){return o.a.createElement("li",{className:"pb-3"},o.a.createElement("label",{className:"custom-control custom-checkbox"},o.a.createElement("input",{type:"checkbox",className:"custom-control-input",onChange:t.updateRoles.bind(t),name:e.id}),o.a.createElement("span",{className:"custom-control-indicator"}),o.a.createElement("span",{className:"custom-control-description"},e.name)))})),o.a.createElement("div",null,o.a.createElement("label",null,"What roles can you help us with?"),o.a.createElement("ul",{className:"list-unstyled"},e))}}])&&vn(n.prototype,i),a&&vn(n,a),t}();function En(e){return(En="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function kn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xn(e,t){return!t||"object"!==En(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Sn(e){return(Sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Tn(e,t){return(Tn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var On=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),xn(this,Sn(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Tn(e,t)}(t,r["Component"]),n=t,(i=[{key:"leaveWaitlist",value:function(){var e=this;$.ajax({type:"delete",uri:this.props.baseUri,data:{pilot_id:""}}).done(function(t){e.props.u()}).fail(function(e){console.error("[React/LeaveWlBtn@leaveWaitlist] Error leaving the waitlist: ".concat(e.responseText))})}},{key:"render",value:function(){return o.a.createElement("button",{className:"btn btn-danger float-right",onClick:this.leaveWaitlist.bind(this),disabled:this.props.isOnWl},"Leave the Waitlist ",o.a.createElement("i",{className:"fas fa-user-times"}))}}])&&kn(n.prototype,i),a&&kn(n,a),t}();function Cn(e){return(Cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Nn(e,t){return!t||"object"!==Cn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function jn(e){return(jn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function In(e,t){return(In=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Rn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Nn(this,jn(t).call(this,e))).state={selectedPilot:null,selectedRoles:[],selectedFits:[],key:0},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&In(e,t)}(t,r["Component"]),n=t,(i=[{key:"getRoles",value:function(){return this.props.options?this.props.options.roles:null}},{key:"getShips",value:function(){return this.props.options?this.props.options.fittings:null}},{key:"updateSelectedPilot",value:function(e){this.setState({selectedPilot:e})}},{key:"updateSelectedFits",value:function(e,t){var n=this.state.selectedFits;if(e)n.push(t);else for(var r=0;r<n.length;r++)n[r]===t&&n.splice(r,1);this.setState({selectedFits:n})}},{key:"updateSelectedRoles",value:function(e,t){var n=this.state.selectedRoles;if(e)n.push(t);else for(var r=0;r<n.length;r++)n[r]===t&&n.splice(r,1);this.setState({selectedRoles:n})}},{key:"AddPilotToWaitlist",value:function(){var e=this;null!=this.state.selectedFits&&0!=this.state.selectedFits.length?$.ajax({type:"post",url:"".concat(this.props.baseUri),data:{pilot_id:this.state.selectedPilot,role_ids:this.state.selectedRoles.join(),fit_ids:this.state.selectedFits.join()}}).done(function(){e.props.u(),e.setState({key:e.state.key+1,selectedFits:[],selectedRoles:[]})}).fail(function(e){console.error("[React/WaitlistUp] @addPilotToWaitlist - Error joining the waitlist",e.responseText)}):console.error("You must select at least one fit")}},{key:"render",value:function(){var e=!(this.state.selectedFits.length>0);return o.a.createElement("div",null,o.a.createElement("h5",{className:"pb-4"},"Join the Waitlist"),o.a.createElement("div",{className:"row pb-4"},o.a.createElement("div",{className:"col-md-10 col-sm-12"},o.a.createElement(sn,{pilots:this.props.pilots||null,prefPilot:this.props.prefPilot||null,selectedPilot:this.updateSelectedPilot.bind(this),key:this.state.key}))),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(hn,{fits:this.getShips(),selectedFit:this.updateSelectedFits.bind(this),key:this.state.key})),o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(wn,{roles:this.getRoles(),selectedRole:this.updateSelectedRoles.bind(this),key:this.state.key}))),o.a.createElement("button",{className:"btn btn-success",onClick:this.AddPilotToWaitlist.bind(this),disabled:e},"Join the Waitlist ",o.a.createElement("i",{className:"fas fa-user-plus"})),o.a.createElement(On,{isOnWl:!this.props.isOnWl,u:this.props.u}))}}])&&Pn(n.prototype,i),a&&Pn(n,a),t}();function An(e){return(An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fn(e,t){return!t||"object"!==An(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ln(e){return(Ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Un(e,t){return(Un=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Dn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Fn(this,Ln(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Un(e,t)}(t,r["Component"]),n=t,(i=[{key:"removePilot",value:function(e){var t=this;$.ajax({type:"delete",url:"".concat(this.props.baseUri),data:{pilot_id:e}}).done(function(){t.props.u()}).fail(function(e){console.error("[React/WaitingPilot] @removePilot - Error removing pilot from the waitlist",e.responseText)})}},{key:"render",value:function(){var e,t,n=this;return this.props.pilots&&(e=this.props.pilots.map(function(e){return o.a.createElement("tr",null,o.a.createElement("td",null,o.a.createElement("img",{width:"32px",src:"https://image.eveonline.com/Character/".concat(e.id,"_32.jpg")})),o.a.createElement("td",null,o.a.createElement(Ue,{pilot:e})),o.a.createElement("td",null,o.a.createElement("buton",{className:"btn btn-danger",onClick:n.removePilot.bind(n,e.id)},"Remove ",o.a.createElement("i",{className:"fas fa-user-times"}))))})),t=this.props.pilots&&this.props.pilots.length>0?o.a.createElement("div",{className:"table-responsive"},o.a.createElement("table",{className:"table"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null),o.a.createElement("th",null,"Pilot"),o.a.createElement("th",null))),o.a.createElement("tbody",null,e))):"You have no pilots on the waitlist.",o.a.createElement("div",null,o.a.createElement("h5",{className:"pb-4"},"Your pilots on the Waitlist"),t)}}])&&$n(n.prototype,i),a&&$n(n,a),t}(),zn=n(2),Mn=n.n(zn);function Bn(e){return(Bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qn(e,t){return!t||"object"!==Bn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Hn(e){return(Hn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vn(e,t){return(Vn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Yn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),qn(this,Hn(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vn(e,t)}(t,r["Component"]),n=t,(i=[{key:"render",value:function(){var e,t,n=this;return e=this.props.payload&&this.props.payload.yourPos?"Your Position: ".concat(this.props.payload.yourPos||""," / ").concat(this.props.payload.totalWaiting||0):"People waiting: ".concat(this.props.payload.totalWaiting||0),this.props.payload.queues&&(t=(t=Object.keys(this.props.payload.queues).map(function(e){return{Name:e,Count:n.props.payload.queues[e]}})).map(function(e){return o.a.createElement("div",{className:"col-3"},"".concat(e.Name,": ").concat(e.Count))})),o.a.createElement("div",null,o.a.createElement("div",{id:"waitlistQueueHead",className:"row"},o.a.createElement("div",{className:"col-12 pb-4"},o.a.createElement("h5",{className:"pr-5 d-inline"},"Waitlist Queue")),o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement("i",{className:"fas fa-info-circle","data-tip":"Your Position only takes into account unique users<br/>and does not display their alts.","data-multiline":"true"}),e,o.a.createElement(Mn.a,null)),o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement("i",{className:"fas fa-hourglass-half"})," Your Wait Time: ",this.props.payload.yourWaitTime),o.a.createElement("div",{className:"col-12 py-5"},o.a.createElement("div",{className:"row text-center"},t))))}}])&&Wn(n.prototype,i),a&&Wn(n,a),t}();function Qn(e){return(Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Gn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Kn(e,t){return!t||"object"!==Qn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Xn(e){return(Xn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Jn(e,t){return(Jn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Zn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Kn(this,Xn(t).call(this,e))).state={fcOptions:null,fleets:null,pilots:null,prefPilot:null,waitlist:null},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Jn(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this;this.getFleets(),Object(nn.setInterval)(function(){return e.getFleets()},1e4)}},{key:"getData",value:function(){var e=this;$.ajax({type:"get",url:"/api/v1/options"}).done(function(t){e.setState({prefPilot:t.prefPilot,fcOptions:t.fcOptions?t.fcOptions:null})}).fail(function(e){console.error("[React/Index@getData] Error getting user options: ".concat(e.responseText))})}},{key:"getFleets",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/","waitlist/data")}).done(function(t){e.setState({fleets:t.fleets,options:t.options,pilots:t.pilots,waitlist:t.waitlist}),e.getData()}).fail(function(e){console.error("[React/Index@getFleets] Error getting fleets: ".concat(e.responseText))})}},{key:"availableFleets",value:function(){return this.state.fleets&&this.state.fleets.length>0}},{key:"availablePilots",value:function(){return this.state.pilots?this.state.pilots.avaliable:null}},{key:"waitingPilots",value:function(){return this.state.pilots?this.state.pilots.waiting:null}},{key:"render",value:function(){var e,t=this;this.state.fleets&&(e=this.state.fleets.map(function(e,n){return o.a.createElement(Jt,{fleet:e,key:n,showFcOptions:!(!t.state.fcOptions||!t.state.fcOptions.fleetTypes),myPilots:t.state.fcOptions?t.state.fcOptions.pilots:null})}));var n,r,i={btn:null,modal:null};return this.state.fcOptions&&this.state.fcOptions.fleetTypes&&(i.btn=o.a.createElement(Ft,null),i.modal=o.a.createElement(Lt,{options:this.state.fcOptions,prefPilot:this.state.prefPilot})),this.availableFleets()||(n=o.a.createElement(Wt,{type:"danger"},o.a.createElement("span",{className:"font-weight-bold"},"Waitlist Inactive:")," There is either no fleet, or the waitlist is inactive. Check our in game channel for more information.")),this.availableFleets()&&(r=o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},o.a.createElement(Rn,{options:this.state.options,pilots:this.availablePilots(),isOnWl:!!(this.state.pilots&&this.state.pilots.waiting.length>0),prefPilot:this.state.prefPilot,baseUri:"/",u:this.getFleets.bind(this)})),o.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},o.a.createElement(Dn,{pilots:this.waitingPilots(),baseUri:"/",u:this.getFleets.bind(this)})),o.a.createElement("div",{className:"col-lg-4 col-sm-12"},o.a.createElement(Yn,{payload:this.state.waitlist,baseUri:"/",u:this.getFleets.bind(this)})))),o.a.createElement("div",{className:"container"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-12"},o.a.createElement("h2",null,"Fleet Info"),n),e,i.btn),r,i.modal)}}])&&Gn(n.prototype,i),a&&Gn(n,a),t}();function er(e){return(er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function nr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function rr(e,t,n){return t&&nr(e.prototype,t),n&&nr(e,n),e}function or(e,t){return!t||"object"!==er(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ir(e){return(ir=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ar(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lr(e,t)}function lr(e,t){return(lr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("index")&&Object(i.render)(o.a.createElement(Zn,null),document.getElementById("index"));var ur=function(e){function t(){return tr(this,t),or(this,ir(t).apply(this,arguments))}return ar(t,r["Component"]),rr(t,[{key:"render",value:function(){var e,t=this;return this.props.waitlist&&(e=this.props.waitlist.map(function(e){return o.a.createElement(sr,{pilot:e,wings:t.props.wings,fleetId:t.props.fleetId})})),o.a.createElement("div",{className:"table-responsive"},o.a.createElement("table",{className:"table"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",{style:{width:"30px"}}),o.a.createElement("th",null,"Pilot"),o.a.createElement("th",{style:{width:"220px"}}),o.a.createElement("th",{style:{width:"180px"}},"Ships"),o.a.createElement("th",null,"Roles"),o.a.createElement("th",null,"System"),o.a.createElement("th",null,"Wait Time"),o.a.createElement("th",null))),o.a.createElement("tbody",null,e)))}}]),t}(),sr=function(e){function t(){return tr(this,t),or(this,ir(t).apply(this,arguments))}return ar(t,r["Component"]),rr(t,[{key:"alarmAccount",value:function(e,t){$("#".concat(e)).addClass("tr-pending"),$.ajax({type:"post",url:"/fleets/".concat(this.props.fleetId,"/alarm/").concat(t)}).done(function(e){}).fail(function(t){$("#".concat(e)).removeClass("tr-pending").addClass("tr-danger"),console.error("React/Components/Waitlist {FlightStrip@alarmAccount} - Error sending the pilot an alarm",t.responseText)})}},{key:"invitePilot",value:function(e,t,n,r){$("#".concat(e)).addClass("tr-pending"),$.ajax({type:"post",url:"/fleets/".concat(this.props.fleetId,"/invite/").concat(t),data:{squadId:n,wingId:r}}).done(function(t){$("#".concat(e)).addClass("tr-success")}).fail(function(n){$("#".concat(e)).removeClass("tr-pending").addClass("tr-danger"),console.error("React/Components/Waitlist {FlightStrip@invitePilot} - Error inviting the pilot ".concat(t),n.responseText)})}},{key:"removePilot",value:function(e){$.ajax({type:"delete",url:"/waitlist/remove/".concat(e)}).done(function(t){$("#".concat(e)).addClass("tr-danger")}).fail(function(e){console.error("React/Components/Waitlist {FlightStrip@removePilot} - Error removing the pilot from the waitlist",e.responseText)})}},{key:"render",value:function(){var e,t,n,r,i,a=this;return this.props.pilot.newPilot&&(e=o.a.createElement("span",{className:"text-danger fa-status"},o.a.createElement("i",{class:"fas fa-exclamation-triangle"})," New Pilot")),this.props.pilot.isOffline&&(t=o.a.createElement("span",{className:"text-warning fa-status"},o.a.createElement("i",{class:"fas fa-user-slash"})," Offline")),this.props.pilot.ships&&(n=this.props.pilot.ships.map(function(e){return o.a.createElement("img",{className:"m-1","data-tip":e.description,src:"https://image.eveonline.com/Render/".concat(e.shipTypeId,"_32.png")})})),this.props.pilot.roles&&(r=this.props.pilot.roles.map(function(e){return o.a.createElement("button",{className:"btn btn-outline-success btn-sm m-1","data-tip":e.name},e.acronym.charAt(0))})),this.props.wings&&(i=this.props.wings.map(function(e){return e.squads.map(function(t){return o.a.createElement("a",{role:"presentation",className:"dropdown-item",onClick:a.invitePilot.bind(a,a.props.pilot.account.id,a.props.pilot.pilot.characterID,t.id,e.id)},"".concat(e.name,": ").concat(t.name))})})),o.a.createElement("tr",{id:this.props.pilot.id},o.a.createElement("td",null," ",o.a.createElement("img",{src:"https://image.eveonline.com/Character/".concat(this.props.pilot.pilot.characterID,"_64.jpg"),height:"50"})," "),o.a.createElement("td",null,o.a.createElement(Ue,{pilot:this.props.pilot.pilot}),o.a.createElement("div",{className:"clearfix"}),o.a.createElement(_,{AuthName:this.props.pilot.account.name}),o.a.createElement("div",{className:"clearfix"}),e," ",t),o.a.createElement("td",null,o.a.createElement("div",{role:"group",className:"btn-group btn-group-sm p-1"},o.a.createElement("button",{className:"btn btn-success btn-sm",type:"button",onClick:this.invitePilot.bind(this,this.props.pilot.account.id,this.props.pilot.pilot.characterID,null,null)},"Invite ",o.a.createElement("i",{className:"fas fa-plus"})),o.a.createElement("div",{className:"dropdown btn-group d-inline",role:"group"},o.a.createElement("button",{className:"btn btn-success btn-sm dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"}),o.a.createElement("div",{role:"menu",className:"dropdown-menu"},i))),o.a.createElement("button",{className:"btn btn-danger btn-sm p-1",type:"button",onClick:this.removePilot.bind(this,this.props.pilot.id)},o.a.createElement("i",{className:"fas fa-minus"})),o.a.createElement("div",{className:"dropdown d-inline p-1"},o.a.createElement("button",{className:"btn btn-dark btn-sm dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"Options ",o.a.createElement("i",{className:"fas fa-cog"})," "),o.a.createElement("div",{role:"menu",className:"dropdown-menu"},o.a.createElement("a",{role:"presentation",className:"dropdown-item",href:"/search?q=pilot_name&action=viewProfile"},"Pilot Profile"),o.a.createElement("a",{role:"presentation",class:"dropdown-item",href:"xmpp:".concat(this.props.pilot.account.name.toLowerCase().replace(/ /g,"_"))},"Open Jabber PM"))),o.a.createElement("button",{className:"btn btn-warning btn-sm p-1 disabled",type:"button",onClick:this.alarmAccount.bind(this,this.props.pilot.id,this.props.pilot.account.accountId)},o.a.createElement("i",{className:"fas fa-bell"}))),o.a.createElement("td",null,n),o.a.createElement("td",null," ",r," "),o.a.createElement("td",null," ",o.a.createElement(Me,{system:this.props.pilot.system})," "),o.a.createElement("td",null," ",this.props.pilot.waitingFor," "),o.a.createElement(Mn.a,null))}}]),t}();function cr(e){return(cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function pr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dr(e,t,n){return t&&pr(e.prototype,t),n&&pr(e,n),e}function mr(e,t){return!t||"object"!==cr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function hr(e){return(hr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function yr(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vr(e,t)}function vr(e,t){return(vr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var br=function(e){function t(e){var n;return fr(this,t),(n=mr(this,hr(t).call(this,e))).state={selectedQueue:0},n}return yr(t,r["Component"]),dr(t,[{key:"getComp",value:function(){if(!this.props.members)return null;for(var e=this.props.members.pilots,t=new Object,n=0;n<e.length;n++){var r=e[n].ship;t[r.id]?t[r.id].pilots.push(e[n].name):t[r.id]={id:r.id,name:r.name,queue:r.queue,pilots:[e[n].name]},Object.keys(t).forEach(function(e){t[e].pilots.sort()})}return Object.keys(t).map(function(e){return t[e]})}},{key:"getFilteredComp",value:function(){var e=[],t=this.getComp();if(null==t)return null;for(var n=0;n<t.length;n++)0!=this.state.selectedQueue&&t[n].queue.id!=this.state.selectedQueue||e.push(t[n]);return e}},{key:"getFilters",value:function(){var e=this.getComp(),t=[],n=0;if(null==e)return null;for(var r=0;r<e.length;r++){if(n+=e[r].pilots.length,t[e[r].queue.id]){var o=t[e[r].queue.id];t[e[r].queue.id].count=o.count+=e[r].pilots.length,t[e[r].queue.id]=o}else t[e[r].queue.id]={id:e[r].queue.id,name:e[r].queue.name,count:e[r].pilots.length};t[0]={id:0,name:"Fleet",count:n}}return t}},{key:"setFilter",value:function(e){this.setState({selectedQueue:e})}},{key:"render",value:function(){return o.a.createElement("div",{className:"row"},o.a.createElement(_r,{filters:this.getFilters(),activeFilterId:this.state.selectedQueue,updateFilter:this.setFilter.bind(this)}),o.a.createElement(gr,{comp:this.getFilteredComp()}))}}]),t}(),gr=function(e){function t(){return fr(this,t),mr(this,hr(t).apply(this,arguments))}return yr(t,r["Component"]),dr(t,[{key:"render",value:function(){var e;return this.props.comp&&(e=this.props.comp.map(function(e){var t=e.pilots.join("<br>");return o.a.createElement("div",{className:"col-lg-6 p-3"},o.a.createElement("img",{class:"rounded pr-3",src:"https://image.eveonline.com/Render/".concat(e.id,"_32.png"),alt:e.name}),o.a.createElement("p",{className:"d-inline pr-3","data-tip":t,"data-multiline":"true"},e.name),o.a.createElement("span",{className:"badge badge-warning float-right"},e.pilots.length),o.a.createElement(Mn.a,null))})),o.a.createElement("div",{className:"col-12"},o.a.createElement("div",{className:"row"},e))}}]),t}(),_r=function(e){function t(){return fr(this,t),mr(this,hr(t).apply(this,arguments))}return yr(t,r["Component"]),dr(t,[{key:"render",value:function(){var e,t=this;return null!=this.props.filters&&(e=this.props.filters.map(function(e){var n=e.id==t.props.activeFilterId?"active":"";return o.a.createElement("li",{className:"nav-item"},o.a.createElement("a",{role:"tab","data-toggle":"tab",className:"nav-link ".concat(n),href:"#tab-1",onClick:t.props.updateFilter.bind(t,e.id)},e.name),o.a.createElement("span",{className:"badge badge-warning mt-2"},e.count))})),o.a.createElement("div",{className:"col-12"},o.a.createElement("ul",{class:"nav nav-tabs nav-justified"},e))}}]),t}();function wr(e){return(wr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Er(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function kr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xr(e,t,n){return t&&kr(e.prototype,t),n&&kr(e,n),e}function Sr(e,t){return!t||"object"!==wr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Tr(e){return(Tr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Or(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Cr(e,t)}function Cr(e,t){return(Cr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Pr=function(e){function t(){return Er(this,t),Sr(this,Tr(t).apply(this,arguments))}return Or(t,r["Component"]),xr(t,[{key:"getId",value:function(){return this.props.id||null}},{key:"getTitle",value:function(){return this.props.title||null}},{key:"hideNav",value:function(){$(".sidebar-special").removeClass("active")}},{key:"render",value:function(){return o.a.createElement("div",{id:this.getId(),className:"sidebar-special"},o.a.createElement("h3",{className:"pb-4"},this.getTitle(),o.a.createElement("i",{className:"fas fa-chevron-double-right float-right",onClick:this.hideNav.bind(this)})),this.props.children)}}]),t}(),Nr=function(e){function t(){return Er(this,t),Sr(this,Tr(t).apply(this,arguments))}return Or(t,r["Component"]),xr(t,[{key:"getTitle",value:function(){return this.props.title||""}},{key:"render",value:function(){return o.a.createElement("div",{className:"col-12 pt-2 pb-4"},o.a.createElement("h4",{className:"pb-2"},this.getTitle()),this.props.children)}}]),t}(),jr=function(e){function t(){return Er(this,t),Sr(this,Tr(t).apply(this,arguments))}return Or(t,r["Component"]),xr(t,[{key:"openNav",value:function(e){$(".sidebar-special").removeClass("active"),$("#".concat(e)).addClass("active")}},{key:"getId",value:function(){return this.props.id||""}},{key:"getTitle",value:function(){return this.props.title||""}},{key:"render",value:function(){return o.a.createElement("button",{className:"btn btn-dark mx-1",onClick:this.openNav.bind(this,this.getId())},this.getTitle())}}]),t}();function Ir(e){return(Ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Rr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ar(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $r(e,t,n){return t&&Ar(e.prototype,t),n&&Ar(e,n),e}function Fr(e,t){return!t||"object"!==Ir(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Lr(e){return(Lr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ur(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Dr(e,t)}function Dr(e,t){return(Dr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var zr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"closeFleet",value:function(){confirm("Are you sure you want to close this fleet?")&&$.ajax({type:"delete",url:"".concat("/fleets","/").concat(this.props.fleetId)}).done(function(){window.location.href="/"})}},{key:"render",value:function(){return o.a.createElement("div",{className:"col-6 py-1"},o.a.createElement("button",{className:"btn btn-danger btn-block",onClick:this.closeFleet.bind(this)},"Close Fleet",o.a.createElement("i",{className:"far fa-times-circle"})))}}]),t}(),Mr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"clearWaitlist",value:function(){var e=this;confirm("This will clear the waitlist for all fleets, are you sure you wish to continue?")&&$.ajax({type:"post",url:"/waitlist/clear"}).done(function(t){e.props.u()}).fail(function(e){console.error("[React/.../FleetSettings BtnClear@clearWaitlist] Error clearing the waitlist: ".concat(e.responseText))})}},{key:"render",value:function(){return o.a.createElement("div",{className:"col-6 py-1"},o.a.createElement("button",{className:"btn btn-danger btn-block",onClick:this.clearWaitlist.bind(this)},"Clear Waitlist",o.a.createElement("i",{className:"far fa-times-circle"})))}}]),t}(),Br=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"col-6 py-1"},o.a.createElement("button",{className:"btn btn-warning btn-block disabled"},"Invite All",o.a.createElement("i",{className:"fas fa-info-circle"})))}}]),t}(),Wr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"col-6 py-1"},o.a.createElement("button",{className:"btn btn-warning btn-block disabled"},"Invite all Faxes",o.a.createElement("i",{className:"fas fa-info-circle"})))}}]),t}(),qr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"getIcoId",value:function(){return this.props.account&&this.props.account.name&&this.props.pilots?ae(this.props.account.name,this.props.pilots).id:0}},{key:"set",value:function(){var e=this;$.ajax({type:"put",url:"".concat("/fleets","/").concat(this.props.fleetId,"/backseat")}).done(function(){e.props.u()}).fail(function(e){console.error("React/FleetSettings {Backseat@set} - Error setting the fleet backseat ",e.responseText)})}},{key:"clear",value:function(){var e=this;$.ajax({type:"delete",url:"".concat("/fleets","/").concat(this.props.fleetId,"/backseat")}).done(function(){e.props.u()}).fail(function(e){console.error("React/FleetSettings {Backseat@clear} - Error clearing the backseat for this fleet",e.responseText)})}},{key:"render",value:function(){return o.a.createElement(Nr,{title:"Backseat"},o.a.createElement("div",{className:"row sidepanel-content"},o.a.createElement("div",{className:"col-3"},o.a.createElement("img",{className:"ml-3 pr-2",src:"https://image.eveonline.com/Character/".concat(this.getIcoId(),"_64.jpg")})),o.a.createElement("div",{className:"col-9"},o.a.createElement(_,{AuthName:this.props.account?this.props.account.name:null}),o.a.createElement("div",{className:"d-block"},o.a.createElement("button",{className:"btn btn-lg btn-dark mr-2",onClick:this.set.bind(this)},"I'm the backseat...."),o.a.createElement("i",{className:"fas fa-times-circle clear",onClick:this.clear.bind(this)})))))}}]),t}(),Hr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"getPilot",value:function(){return this.props.pilot||null}},{key:"set",value:function(e){var t=this;$.ajax({type:"put",url:"".concat("/fleets","/").concat(this.props.fleetId,"/boss"),data:{pilotId:e}}).done(function(){t.props.u()}).fail(function(e){console.error("React/FleetSettings {Boss@set} - Error setting the fleet boss ",e.responseText)})}},{key:"render",value:function(){var e,t=this;return this.props.pilots&&(e=this.props.pilots.map(function(e){return o.a.createElement("a",{className:"dropdown-item",role:"presentation",onClick:t.set.bind(t,e.id)},e.name)})),o.a.createElement(Nr,{title:"Fleet Commander"},o.a.createElement("div",{className:"row sidepanel-content"},o.a.createElement("div",{className:"col-3"},o.a.createElement("img",{className:"ml-3 pr-2",src:"https://image.eveonline.com/Character/".concat(this.getPilot()?this.getPilot().id:0,"_64.jpg")})),o.a.createElement("div",{className:"col-9"},o.a.createElement(Ue,{pilot:this.getPilot()}),o.a.createElement("div",{className:"dropdown"},o.a.createElement("button",{class:"btn btn-lg btn-dark dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"I'm the Boss...."),o.a.createElement("div",{class:"dropdown-menu",role:"menu"},e)))))}}]),t}(),Vr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"isInFleet",value:function(e){if(null==this.props.fleetPilots)return null;for(var t=0;t<this.props.fleetPilots.length;t++)if(this.props.fleetPilots[t].id==e.id&&!this.props.fleetPilots[t].isExitCyno)return!0;return!1}},{key:"setCyno",value:function(e,t){var n=this;$.ajax({type:"put",url:"/fleets/".concat(e,"/cyno/").concat(t)}).done(function(){n.props.u()}).fail(function(e){console.error("[React/FleetSettings@setCyno] Error setting pilotId: ".concat(t," as a fleet cyno: ").concat(e.responseText))})}},{key:"render",value:function(){var e,t=this;return this.props.myPilots&&(e=this.props.myPilots.map(function(e){if(t.isInFleet(e))return o.a.createElement("a",{className:"dropdown-item",role:"presentation",onClick:t.setCyno.bind(t,t.props.fleetId,e.id)},e.name)})),o.a.createElement("div",{className:"mb-5 pb-4"},o.a.createElement("p",{className:"text-danger text-center"},"Incursions Squad-L would like to remind you that you MUST have exit cynos at all times."),o.a.createElement("div",{className:"dropdown float-right"},o.a.createElement("button",{class:"btn btn-lg btn-dark dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"Add fleet cyno..."),o.a.createElement("div",{class:"dropdown-menu",role:"menu"},e)))}}]),t}(),Yr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"unsetCyno",value:function(e,t){var n=this;$.ajax({type:"put",url:"/fleets/".concat(e,"/cyno/").concat(t)}).done(function(){n.props.u()}).fail(function(e){console.error("[React/FleetSettings@unsetCyno] Error removing pilotId: ".concat(t," as a fleet cyno: ").concat(e.responseText))})}},{key:"render",value:function(){var e,t=this;return this.props.cynos&&(e=this.props.cynos.map(function(e){return o.a.createElement("div",{className:"row sidepanel-content pb-2"},o.a.createElement("div",{className:"col-3"},o.a.createElement("img",{className:"ml-3 pr-2",src:"https://image.eveonline.com/Character/".concat(e.id,"_64.jpg")})),o.a.createElement("div",{className:"col-9 pl-4"},o.a.createElement(Ue,{pilot:e}),o.a.createElement("i",{className:"fas fa-times-circle float-right mr-3 i-btn",onClick:t.unsetCyno.bind(t,t.props.fleetId,e.id)}),o.a.createElement("div",{class:"clearfix"}),o.a.createElement("i",{className:"fas fa-map-marker-alt"}),o.a.createElement(Me,{system:e.system})))})),o.a.createElement(Nr,null,e)}}]),t}(),Qr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"get",value:function(){return this.props.channel||null}},{key:"getCommOptions",value:function(){return this.props.options||null}},{key:"set",value:function(e){var t=this;$.ajax({type:"put",url:"".concat("/fleets","/").concat(this.props.fleetId,"/comms"),data:{commsId:e}}).done(function(){t.props.u()}).fail(function(e){console.error("React/FleetSettings {Mumble@set} - Error setting the comms channel for this fleet",e.responseText)})}},{key:"render",value:function(){var e,t=this;return this.getCommOptions()&&(e=this.getCommOptions().map(function(e){return o.a.createElement("a",{className:"dropdown-item",role:"presentation",onClick:t.set.bind(t,e.id)},e.linkText)})),o.a.createElement(Nr,{title:"Mumble"},o.a.createElement("span",{className:"sidepanel-content"},o.a.createElement(w,{commChannel:this.get()})),o.a.createElement("div",{className:"dropdown pt-2"},o.a.createElement("button",{class:"btn btn-lg btn-dark dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"Select Comms...."),o.a.createElement("div",{class:"dropdown-menu",role:"menu"},e)))}}]),t}(),Gr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"handleChange",value:function(){var e=this;$.ajax({type:"put",url:"".concat("/fleets","/").concat(this.props.fleetId,"/status"),data:{status:!this.props.public}}).done(function(){e.props.u()}).fail(function(e){console.error("React/FleetSettings {Status@handleChange} - Error updating fleet status",e.responseText)})}},{key:"render",value:function(){return o.a.createElement(Nr,{title:"Fleet Status"},o.a.createElement("label",{class:"switch"},o.a.createElement("input",{type:"checkbox",id:"togBtn",defaultChecked:this.props.public,onChange:this.handleChange.bind(this)}),o.a.createElement("div",{class:"slider round"},o.a.createElement("span",{class:"on"},"Listed"),o.a.createElement("span",{class:"off"},"Not Listed"))))}}]),t}(),Kr=function(e){function t(){return Rr(this,t),Fr(this,Lr(t).apply(this,arguments))}return Ur(t,r["Component"]),$r(t,[{key:"set",value:function(e){var t=this;$.ajax({type:"put",url:"".concat("/fleets","/").concat(this.props.fleetId,"/type"),data:{type:e}}).done(function(){t.props.u()}).fail(function(e){console.error("React/FleetSettings {Type@set} - Error setting the fleet type ",e.responseText)})}},{key:"render",value:function(){var e,t=this;return this.props.options&&(e=this.props.options.map(function(e){return o.a.createElement("a",{className:"dropdown-item",role:"presentation",onClick:t.set.bind(t,e)},e)})),o.a.createElement(Nr,{title:"Fleet Type"},o.a.createElement("span",{className:"sidepanel-content"},o.a.createElement("i",{className:"far fa-location"}),this.props.type),o.a.createElement("div",{className:"dropdown pt-2"},o.a.createElement("button",{class:"btn btn-lg btn-dark dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"},"Select Type...."),o.a.createElement("div",{class:"dropdown-menu",role:"menu"},e)))}}]),t}();function Xr(e){return(Xr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Jr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zr(e,t){return!t||"object"!==Xr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function eo(e){return(eo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function to(e,t){return(to=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var no=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Zr(this,eo(t).call(this,e))).state={fcOptions:null,fleetId:null},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&to(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this;this.setState({fleetId:$("#fleetManagement").data("fleetid")},function(){return e.getFleetData()}),setInterval(function(){return e.getFleetData()},1e4)}},{key:"isPublic",value:function(){return this.state.fleet?this.state.fleet.isPublic:null}},{key:"getFleetData",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/fleets","/").concat(this.state.fleetId,"/data")}).done(function(t){e.setState({fleet:t}),e.getWaitlistData()}).fail(function(e){404===e.statusCode&&(location.href="/"),console.error("React/FleetManagement {FleetManagement@getFleetData} - Error getting fleet information",e.responseText)}),$("tr").removeClass("tr-danger").removeClass("tr-success").removeClass("tr-pending")}},{key:"getWaitlistData",value:function(){var e=this;$.ajax({type:"get",url:"/api/v1/waitlist/pilots"}).done(function(t){e.setState({waitingPilots:t}),e.getFcSettings()}).fail(function(e){console.error("React/FleetManagement {FleetManagement@getWaitlistData} - Error getting fleet information",e.responseText)})}},{key:"getFcSettings",value:function(){var e=this;$.ajax({type:"get",url:"/api/v1/options"}).done(function(t){e.setState({fcOptions:t.fcOptions})}).fail(function(e){console.error("React/FleetManagement {Index@getFcSettings} - Error getting the FC settings",e.responseText)})}},{key:"getFleetWings",value:function(){return this.state.fleet&&this.state.fleet.wings?this.state.fleet.wings:null}},{key:"getFleetSettings",value:function(){return this.state.fleet||null}},{key:"getWaitlist",value:function(){return this.state.waitingPilots||null}},{key:"getSettings",value:function(){return this.state.fcOptions||null}},{key:"hasFleetBoss",value:function(){return this.state.fleet&&this.state.fleet.bossPilot}},{key:"getMembers",value:function(){return this.state.fleet&&this.state.fleet.members?this.state.fleet.members:null}},{key:"fleetCynos",value:function(){var e=this.getMembers();if(null==e)return null;for(var t=[],n=0;n<e.pilots.length;n++)e.pilots[n].isExitCyno&&t.push(e.pilots[n]);return t}},{key:"render",value:function(){var e,t,n,r,i;if(this.isPublic()||(e=o.a.createElement(f,{type:"danger"},o.a.createElement("span",{className:"font-weight-bold"},"Fleet Not Listed: "),"If no fleets are listed, the waitlist will show as offline.")),this.hasFleetBoss()||(t=o.a.createElement(f,{type:"danger"},o.a.createElement("span",{className:"font-weight-bold"},"No Fleet Boss: "),"Until you set a new fleet boss all ESI functions will be disabled for this fleet.")),this.fleetCynos()&&0!=this.fleetCynos().length||(n=o.a.createElement(f,{type:"danger"},o.a.createElement("span",{className:"font-weight-bold"},o.a.createElement("i",{className:"fas fa-exclamation-triangle"}),"Fleet Cynos Needed:"),"You MUST have at least one exit cyno in this fleet!")),this.state.fleet&&this.state.fleet.members){var a=this.state.fleet.members.onGrid,l=this.state.fleet.members.max;r="".concat(this.state.fleet.members.onGrid," / ").concat(this.state.fleet.members.max),i=a>l?"danger blink":a<l-5?"warning":"white"}return o.a.createElement("div",{className:"container"},e,t,n,o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-8 col-sm-12"},o.a.createElement(ur,{waitlist:this.getWaitlist(),wings:this.getFleetWings(),fleetId:this.state.fleetId||null})),o.a.createElement("div",{className:"col-lg-4 col-sm-12"},o.a.createElement("div",{className:"text-center"},o.a.createElement(jr,{id:"fleetSettings",title:"Fleet Settings"}),o.a.createElement(jr,{id:"fleetCynos",title:"Fleet Cynos"})),o.a.createElement("h4",{className:"d-block text-center text-".concat(i," py-4")},"Fleet Size: ",r),o.a.createElement(br,{members:this.getMembers()}))),o.a.createElement(Pr,{id:"fleetSettings",title:"Fleet Settings"},o.a.createElement("div",{className:"row"},o.a.createElement(Hr,{pilot:this.state.fleet?this.state.fleet.bossPilot:null,pilots:this.getSettings()?this.getSettings().pilots:null,u:this.getFleetData.bind(this),fleetId:this.state.fleetId}),o.a.createElement(qr,{account:this.state.fleet?this.state.fleet.backseatAccount:null,u:this.getFleetData.bind(this),fleetId:this.state.fleetId,pilots:this.state.fcOptions?this.state.fcOptions.pilots:null}),o.a.createElement(Qr,{channel:this.getFleetSettings()?this.getFleetSettings().commChannel:null,options:this.getSettings()?this.getSettings().comms:null,u:this.getFleetData.bind(this),fleetId:this.state.fleetId}),o.a.createElement(Kr,{type:this.getFleetSettings()?this.getFleetSettings().type:"",options:this.getSettings()?this.getSettings().fleetTypes:null,u:this.getFleetData.bind(this),fleetId:this.state.fleetId}),o.a.createElement(Gr,{public:this.isPublic(),u:this.getFleetData.bind(this),fleetId:this.state.fleetId})),o.a.createElement("hr",null),o.a.createElement("div",{className:"row"},o.a.createElement(zr,{fleetId:this.state.fleetId}),o.a.createElement(Mr,{fleetId:this.state.fleetId,u:this.getFleetData.bind(this)}),o.a.createElement(Br,{fleetId:this.state.fleetId}),o.a.createElement(Wr,{fleetId:this.state.fleetId}))),o.a.createElement(Pr,{id:"fleetCynos",title:"Fleet Cynos"},o.a.createElement(Vr,{myPilots:null!=this.state.fcOptions?this.state.fcOptions.pilots:null,fleetPilots:null!=this.state.fleet?this.state.fleet.members.pilots:null,u:this.getFleetData.bind(this),fleetId:this.state.fleetId}),o.a.createElement("hr",null),o.a.createElement(Yr,{cynos:this.fleetCynos(),u:this.getFleetData.bind(this),fleetId:this.state.fleetId})))}}])&&Jr(n.prototype,i),a&&Jr(n,a),t}();function ro(e){return(ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function io(e,t){return!t||"object"!==ro(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ao(e){return(ao=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function lo(e,t){return(lo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("fleetManagement")&&Object(i.render)(o.a.createElement(no,null),document.getElementById("fleetManagement"));var uo=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),io(this,ao(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lo(e,t)}(t,r["Component"]),n=t,(i=[{key:"notificationsEnabled",value:function(){return this.props.settings&&this.props.settings.jabberNotifications}},{key:"handleCheckboxClick",value:function(){var e=this;$.ajax({type:"post",url:"".concat(this.props.baseUri,"/jabber"),data:{notificationsEnabled:!this.notificationsEnabled()}}).done(function(t){e.props.forceUpdate()}).fail(function(e){console.error("[React/UserSettings] @handleCheckboxClick - Error setting the users jabber settings",e.responseText)})}},{key:"render",value:function(){return o.a.createElement("div",null,o.a.createElement("h3",null,"Settings"),o.a.createElement("p",{className:"ml-4"},"These settings allow you to configure specific settings for the waitlist:"),o.a.createElement("ul",{className:"list-group pt-2"},o.a.createElement("li",{className:"list-group-item"},o.a.createElement("label",{className:"custom-control custom-checkbox"},o.a.createElement("input",{type:"checkbox",className:"custom-control-input",onClick:this.handleCheckboxClick.bind(this),defaultChecked:this.notificationsEnabled()}),o.a.createElement("span",{className:"custom-control-indicator"}),o.a.createElement("span",{className:"custom-control-description"},"Allow the waitlist to send me Jabber PMs when:")),o.a.createElement("ul",{className:"list-unstyled pt-1"},o.a.createElement("li",null,o.a.createElement("i",{className:"fas fa-caret-right"})," I am invited to a fleet")))))}}])&&oo(n.prototype,i),a&&oo(n,a),t}();function so(e){return(so="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function co(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function fo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function po(e,t,n){return t&&fo(e.prototype,t),n&&fo(e,n),e}function mo(e,t){return!t||"object"!==so(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ho(e){return(ho=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function yo(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vo(e,t)}function vo(e,t){return(vo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var bo=function(e){function t(e){var n;return co(this,t),(n=mo(this,ho(t).call(this,e))).state={key:0},n}return yo(t,r["Component"]),po(t,[{key:"getFits",value:function(){return this.props.fits||null}},{key:"saveFit",value:function(e){var t=this;e.preventDefault(),$.ajax({type:"post",url:"".concat(this.props.baseUri,"/fit"),data:{fitUrl:e.target[0].value}}).done(function(){t.setState({key:t.state.key+1}),t.props.forceUpdate()}).fail(function(e){console.error("[React/Fittings] @saveFit - Error saving your new fit",e.responseText)})}},{key:"deleteFit",value:function(e){var t=this;$.ajax({type:"delete",url:"".concat(this.props.baseUri,"/fit/").concat(e)}).done(function(){t.props.forceUpdate()}).fail(function(e){console.error("[React/Fittings] @deleteFit - Error deleting your fit",e.responseText)})}},{key:"render",value:function(){var e,t,n=this;return this.getFits()&&this.getFits().length<5&&(e=o.a.createElement(wo,{saveFit:this.saveFit.bind(this),key:this.state.key})),this.getFits()&&(t=this.getFits().map(function(e){return o.a.createElement(go,{fit:e,deleteFit:n.deleteFit.bind(n,e.id)})})),o.a.createElement("div",null,o.a.createElement("h3",null,"My Fits"),o.a.createElement("p",{className:"ml-4 mb-0"},"You will be asked to select up to five ships from the list below, when you join the waitlist."),o.a.createElement("p",{className:"ml-4"},"You can have up to 5 ships stored below at any given time."),o.a.createElement("div",{className:"table-responsive table-hover"},o.a.createElement("table",{className:"table"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null),o.a.createElement("th",null,"Hull Type"),o.a.createElement("th",null,"Description"),o.a.createElement("th",null))),o.a.createElement("tbody",null,t)),e),o.a.createElement(_o,null))}}]),t}(),go=function(e){function t(){return co(this,t),mo(this,ho(t).apply(this,arguments))}return yo(t,r["Component"]),po(t,[{key:"render",value:function(){return o.a.createElement("tr",null,o.a.createElement("td",null,o.a.createElement("img",{src:"https://image.eveonline.com/Render/".concat(this.props.fit.shipTypeId,"_32.png")})),o.a.createElement("td",null,this.props.fit.name),o.a.createElement("td",null,this.props.fit.description),o.a.createElement("td",null,o.a.createElement("button",{class:"btn btn-danger btn-sm",type:"button",onClick:this.props.deleteFit},"Delete Fit ",o.a.createElement("i",{class:"fas fa-trash"}))))}}]),t}(),_o=function(e){function t(){return co(this,t),mo(this,ho(t).apply(this,arguments))}return yo(t,r["Component"]),po(t,[{key:"render",value:function(){return o.a.createElement(R,{id:"fittingsHelp",size:"lg",dismiss:"true",title:"How to save a fit."},o.a.createElement("p",null,"To add a fitting you will need your Fit DNA URL. The name of your fit will be saved as the fit description."),o.a.createElement("ol",null,o.a.createElement("li",null,"Drag and drop your fit into a chat channel to make a clickable link and press enter"),o.a.createElement("li",null,"Right click next to the link and click copy"),o.a.createElement("li",null,"Paste it in the text box and click 'Save Fitting'")),o.a.createElement("div",{class:"embed-responsive embed-responsive-16by9"},o.a.createElement("video",{autoplay:"true",loop:"true"},o.a.createElement("source",{className:"embed-responsive-item",src:"/images/savefit.mp4",type:"video/mp4"}))))}}]),t}(),wo=function(e){function t(){return co(this,t),mo(this,ho(t).apply(this,arguments))}return yo(t,r["Component"]),po(t,[{key:"render",value:function(){return o.a.createElement("form",{id:"newFittingForm",className:"form-group",onSubmit:this.props.saveFit},o.a.createElement("label",{htmlFor:"fitDna"},"Add a new ship"),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-9"},o.a.createElement(q,{id:"fitDna",required:"true",placeholder:"[00:25:25] Caitlin Viliana > <url=fitting:17740:26448;1:26402;1:15144;4:3186;8:14512;1:41201;1:33842;2:26322;1:14650;2:4347;2::>Vindicator</url>",key:this.props.key}),o.a.createElement("a",{className:"float-right pt-2","data-toggle":"modal","data-target":"#fittingsHelp"}," How do I add a new fit?")),o.a.createElement("div",{className:"col-3 text-center"},o.a.createElement("button",{className:"btn btn-success d-block mb-2",type:"submit"},"Save Fitting"))))}}]),t}();function Eo(e){return(Eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ko(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xo(e,t){return!t||"object"!==Eo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function So(e){return(So=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function To(e,t){return(To=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Oo=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=xo(this,So(t).call(this,e))).state={settings:null},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&To(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/account-settings","/data")}).done(function(t){e.setState({settings:t})}).fail(function(e){console.error("[React/AccountSettings] @getData - Error retrieving account information",e.responseText)})}},{key:"render",value:function(){return o.a.createElement("div",{className:"container"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(uo,{settings:this.state.settings,forceUpdate:this.getData.bind(this),baseUri:"/account-settings"}),o.a.createElement("div",{className:"clearfix"}),o.a.createElement(bo,{fits:this.state.settings?this.state.settings.fits:null,forceUpdate:this.getData.bind(this),baseUri:"/account-settings"})),o.a.createElement("div",{className:"col-lg-6 col-md-12"},o.a.createElement(f,{type:"alert-primary"},o.a.createElement("bold",null,"Pilot Skills goes here:")," This module is coming soon."))))}}])&&ko(n.prototype,i),a&&ko(n,a),t}();function Co(e){return(Co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Po(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function No(e,t){return!t||"object"!==Co(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function jo(e){return(jo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Io(e,t){return(Io=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("accountSettings")&&Object(i.render)(o.a.createElement(Oo,null),document.getElementById("accountSettings"));var Ro=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),No(this,jo(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Io(e,t)}(t,r["Component"]),n=t,(i=[{key:"render",value:function(){return o.a.createElement("div",{className:"card"},o.a.createElement("div",{className:"card-header"},o.a.createElement("h5",{className:"mb-0"},this.props.heading)),o.a.createElement("div",{className:"card-body"},this.props.children))}}])&&Po(n.prototype,i),a&&Po(n,a),t}();function Ao(e){return(Ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fo(e,t){return!t||"object"!==Ao(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Lo(e){return(Lo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Uo(e,t){return(Uo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Do=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Fo(this,Lo(t).call(this,e))).state={settings:null},n.shipInput=o.a.createRef(),n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Uo(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){this.getShips()}},{key:"getShips",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/admin/settings","/data")}).done(function(t){e.setState({settings:t})}).fail(function(e){console.error("React/SystemSettings {SystemSettings@getShips} - Error getting the current ship queues",e.responseText)})}},{key:"NewQueueAssignment",value:function(e){var t=this;$.ajax({type:"post",url:"".concat("/admin/settings","/ships"),data:{queue_id:e,ship_name:this.shipInput.current.value}}).done(function(){t.getShips()}).fail(function(e){console.error("React/SystemSettings {SystemSettings@NewQueueAssignment} - Error setting a new queue assignment",e.responseText)})}},{key:"updateShip",value:function(e){var t=this;$.ajax({type:"put",url:"".concat("/admin/settings","/ships"),data:{ship_id:e.target.value.split(",")[0],queue_id:e.target.value.split(",")[1]}}).done(function(){t.getShips()}).fail(function(e){console.error("React/SystemSettings {SystemSettings@updateShip} - Error getting the current ship queues",e.responseText)})}},{key:"render",value:function(){var e,t,n=this;return this.state.settings&&this.state.settings.hull&&(e=this.state.settings.hull.map(function(e){var t;return t=n.state.settings.queues.map(function(t,n){var r=e.queue==n;return o.a.createElement("option",{value:"".concat(e.id,",").concat(n),selected:r},t)}),o.a.createElement("tr",null,o.a.createElement("td",null,o.a.createElement("img",{src:"https://image.eveonline.com/Render/".concat(e.id,"_32.png"),alt:"Ship Render"})),o.a.createElement("td",null,e.name),o.a.createElement("td",null,o.a.createElement("select",{className:"form-control",onChange:n.updateShip.bind(n)},t)))})),this.state.settings&&this.state.settings.queues&&(t=this.state.settings.queues.map(function(e,t){return o.a.createElement("a",{className:"dropdown-item",role:"presentation",onClick:n.NewQueueAssignment.bind(n,t)},e)})),o.a.createElement("div",{className:"container"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},o.a.createElement(Ro,{heading:"Ship Queues"},o.a.createElement("p",null,'This list defines what queues a ship goes into, ships that are not on this list will go into DPS. To remove a ship add it to the queue "none"'),o.a.createElement("div",{className:"input-group"},o.a.createElement("input",{id:"ship_search",type:"text",className:"form-control",placeholder:"Erebus",ref:this.shipInput}),o.a.createElement("div",{className:"input-group-prepend"},o.a.createElement("div",{className:"dropdown btn-group",role:"group"},o.a.createElement("button",{className:"btn btn-dark dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false"},"Add with Role "),o.a.createElement("div",{className:"dropdown-menu",role:"menu"},t)))),o.a.createElement("div",{class:"table-responsive"},o.a.createElement("table",{class:"table",id:"shipQueues"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null),o.a.createElement("th",null,"Type"),o.a.createElement("th",null,"Queue"))),o.a.createElement("tbody",null,e)))))))}}])&&$o(n.prototype,i),a&&$o(n,a),t}();function zo(e){return(zo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mo(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Bo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Wo(e,t,n){return t&&Bo(e.prototype,t),n&&Bo(e,n),e}function qo(e,t){return!t||"object"!==zo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ho(e){return(Ho=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vo(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Yo(e,t)}function Yo(e,t){return(Yo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("systemSettings")&&Object(i.render)(o.a.createElement(Do,null),document.getElementById("systemSettings"));var Qo=function(e){function t(e){var n;return Mo(this,t),(n=qo(this,Ho(t).call(this,e))).state={pilots:null},n}return Vo(t,r["Component"]),Wo(t,[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var e=this;$.ajax({type:"get",url:"".concat("/pilot-select","/pilots")}).done(function(t){e.setState({pilots:t})}).fail(function(e){console.error("[React/PilotSelect] @getData - Error retrieving account information",e.responseText)})}},{key:"getPilots",value:function(){return this.state.pilots}},{key:"render",value:function(){var e;return this.getPilots()&&(e=this.getPilots().map(function(e,t){return o.a.createElement(Ko,{pilot:e,key:t})})),o.a.createElement("div",{className:"content__inner"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{class:"col-12 pb-5"},o.a.createElement("h1",{className:"text-center"},"Welcome to Imperium Incursions"),o.a.createElement("h3",{className:"text-center"},"Please select your main pilot to continue.")),e,o.a.createElement(Go,null)))}}]),t}(),Go=function(e){function t(){return Mo(this,t),qo(this,Ho(t).apply(this,arguments))}return Vo(t,r["Component"]),Wo(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"col-lg-3 col-md-6 col-sm-12"},o.a.createElement("div",{className:"card login-card"},o.a.createElement("img",{className:"login-avatar",src:"https://image.eveonline.com/Character/0_256.jpg",alt:"No avatar found."}),o.a.createElement("div",{className:"login-name mb-4"},"Need another pilot?"),o.a.createElement("a",{className:"btn btn-primary d-block mx-auto my-4",href:"/auth/eve"},"Login with Eve SSO")))}}]),t}(),Ko=function(e){function t(){return Mo(this,t),qo(this,Ho(t).apply(this,arguments))}return Vo(t,r["Component"]),Wo(t,[{key:"getId",value:function(){return this.props.pilot.id||0}},{key:"getName",value:function(){return this.props.pilot.name||""}},{key:"isEsiVaild",value:function(){return this.props.pilot&&this.props.pilot.esiValid}},{key:"setMainPilot",value:function(e){$.ajax({type:"post",url:"".concat("/pilot-select","/pilots/").concat(e),statusCode:{200:function(){location.href="/"}}}).fail(function(e){console.error("[React/PilotSelect] @setMainPilot - Error setting your main pilot",e.responseText)})}},{key:"render",value:function(){var e={};return this.isEsiVaild()?(e.label=o.a.createElement("p",{className:"login-esi text-success"},"ESI Valid"),e.button=o.a.createElement("button",{className:"btn btn-success d-block mx-auto mb-4",onClick:this.setMainPilot.bind(this,this.getId())},"Proceed")):(e.label=o.a.createElement("p",{className:"login-esi text-danger","data-multiline":"true","data-tip":"We require a valid ESI token before you can use this pilot.<br/>Please update your pilot ESI to continue."},"ESI Invalid"),e.button=o.a.createElement("a",{className:"btn btn-danger d-block mx-auto mb-4",href:"/auth/eve"},"Update ESI")),o.a.createElement("div",{className:"col-lg-3 col-md-4 col-sm-6"},o.a.createElement("div",{className:"card login-card"},o.a.createElement("img",{className:"login-avatar",src:"https://image.eveonline.com/Character/".concat(this.getId(),"_256.jpg"),alt:this.getName()+"'s avatar."}),o.a.createElement("div",{className:"login-name"},this.getName()),e.label,e.button,o.a.createElement(Mn.a,null)))}}]),t}();function Xo(e){return(Xo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Jo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Zo(e,t){return!t||"object"!==Xo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ei(e){return(ei=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ti(e,t){return(ti=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("pilotSelect")&&Object(i.render)(o.a.createElement(Qo,null),document.getElementById("pilotSelect"));var ni=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Zo(this,ei(t).call(this,e))).state={time:new Date},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ti(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this;this.intervalID=setInterval(function(){return e.tick()},1e3)}},{key:"componentWillUnmount",value:function(){clearInterval(this.intervalID)}},{key:"tick",value:function(){this.setState({time:new Date})}},{key:"formatDate",value:function(e){return e<10?"0"+e:e}},{key:"render",value:function(){return o.a.createElement("div",{className:"clock _noselector hidden-md-down"},o.a.createElement("div",{className:"time"},this.formatDate(this.state.time.getUTCHours())," :",this.formatDate(this.state.time.getUTCMinutes())," :",this.formatDate(this.state.time.getUTCSeconds())))}}])&&Jo(n.prototype,i),a&&Jo(n,a),t}();function ri(e){return(ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ii(e,t){return!t||"object"!==ri(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ai(e){return(ai=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function li(e,t){return(li=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("tqClock")&&Object(i.render)(o.a.createElement(ni,null),document.getElementById("tqClock"));var ui=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=ii(this,ai(t).call(this,e))).state={tq_status:0},n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&li(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this;this.tick(),this.intervalID=setInterval(function(){return e.tick()},6e4)}},{key:"componentWillUnmount",value:function(){clearInterval(this.intervalID)}},{key:"tick",value:function(){var e=this;$.getJSON("https://esi.evetech.net/latest/status/?datasource=tranquility",function(t){t.players&&1==t.vip?e.setState({tq_status:-1}):e.setState({tq_status:t.players?t.players:0})}).fail(function(){e.setState({tq_status:0})})}},{key:"render",value:function(){var e={};return this.state.tq_status&&this.state.tq_status>0?(e.val=this.state.tq_status.toLocaleString(),e.class="text-success"):this.state.tq_status&&-1==this.state.tq_status?(e.val="VIP Mode",e.class="text-warning"):(e.val="Offline",e.class="text-danger"),o.a.createElement("div",{className:"clock _noselector hidden-md-down d-block"},o.a.createElement("div",{className:"time ".concat(e.class)},"TQ: ",e.val))}}])&&oi(n.prototype,i),a&&oi(n,a),t}();document.getElementById("tqStatus")&&Object(i.render)(o.a.createElement(ui,null),document.getElementById("tqStatus"));n(32),n(33),n(34);$(".sidebarBtn").click(function(){$(".sidebar-special").toggleClass("active"),$(".sidebarBtn").toggleClass("toggle")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pc0lFMTAuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFJvb3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9maW5kQ29tbW9uT2Zmc2V0UGFyZW50LmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaXNPZmZzZXRDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRCb3JkZXJzU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFdpbmRvd1NpemVzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0Q2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2luY2x1ZGVTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRCb3VuZGFyaWVzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaXNGaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldE91dGVyU2l6ZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFBvcHBlck9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9maW5kLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvcnVuTW9kaWZpZXJzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZmluZEluZGV4LmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaXNNb2RpZmllckVuYWJsZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9zZXR1cEV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovLy8uLi9zcmMvbWV0aG9kcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uLi9zcmMvbWV0aG9kcy9kaXNhYmxlRXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9yZW1vdmVFdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3NldFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21ldGhvZHMvcGxhY2VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2Nsb2Nrd2lzZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9mbGlwLmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL29mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21ldGhvZHMvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RpZmllcnMvc2hpZnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL2tlZXBUb2dldGhlci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9hcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uLmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL2lubmVyLmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RpZmllcnMvY29tcHV0ZVN0eWxlLmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL2FwcGx5U3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9zZXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tZXRob2RzL3VwZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21ldGhvZHMvZW5hYmxlRXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvZGVjb3JhdG9ycy9zdGF0aWNNZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvZGVjb3JhdG9ycy93aW5kb3dMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvY3VzdG9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9kZWNvcmF0b3JzL2lzQ2FwdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvZ2V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvZGVjb3JhdG9ycy90cmFja1JlbW92YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC91dGlscy9nZXRQb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L3V0aWxzL2dldFRpcENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC91dGlscy9hcmlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvdXRpbHMvbm9kZUxpc3RUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3Qvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL2FwcC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL0xpYnJhcmllcy9UaGVtZS9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL0xpYnJhcmllcy9UaGVtZS92ZW5kb3JzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9zYXNzL2luZGV4LnNjc3M/YjRkMyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9BbGVydC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9Db21tTGlua3MuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvQW5ub3VuY21lbnQvQmFubmVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL01vZGFsLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0Zvcm1Db250cm9scy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9Bbm5vdW5jbWVudC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQW5ub3VuY2VtZW50LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9IZWxwZXJzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0Jhbk1hbmFnZW1lbnQvQWN0aXZlQmFucy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9CYW5NYW5hZ2VtZW50L0JhbkluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0JhbnMuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvRXNpVWkuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvVXNlck1hbmFnZW1lbnQvRWxldmF0ZWRVc2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9Vc2VyTWFuYWdlbWVudC9BY2NvdW50UGlsb3RzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL1VzZXJNYW5hZ2VtZW50L1JvbGVzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL1VzZXJNYW5hZ2VtZW50L1VzZXJJbmZvLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21tYW5kZXJzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL21vZGFsLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0luZGV4L05ld0ZsZWV0cy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9hbGVydC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9JbmRleC9GbGVldEluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvSW5kZXgvSm9pbldhaXRsaXN0L1NlbGVjdFBpbG90LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0luZGV4L0pvaW5XYWl0bGlzdC9TZWxlY3RTaGlwcy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9JbmRleC9Kb2luV2FpdGxpc3QvU2VsZWN0Um9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvSW5kZXgvSm9pbldhaXRsaXN0L0xlYXZlV2xCdG4uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvSW5kZXgvV2FpdGxpc3RVcC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9JbmRleC9XYWl0aW5nUGlsb3RzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0luZGV4L1dhaXRsaXN0UXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0luZGV4LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL1dhaXRsaXN0LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0ZsZWV0R2xhbmNlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL1NpZGVQYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9GbGVldFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9GbGVldE1hbmFnZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NvbXBvbmVudHMvVXNlclNldHRpbmdzL1VzZXJTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9Vc2VyU2V0dGluZ3MvRml0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0FjY291bnRTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9TeXN0ZW1TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvUGlsb3RTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L1RxQ2xvY2suanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L1RxU3RhdHVzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiX2NsYXNzIiwiX2NsYXNzMiIsIl90ZW1wIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3Byb3BUeXBlczIiLCJfcmVhY3REb20yIiwiX2NsYXNzbmFtZXMyIiwiX3N0YXRpY01ldGhvZHMyIiwiX3dpbmRvd0xpc3RlbmVyMiIsIl9jdXN0b21FdmVudDIiLCJfaXNDYXB0dXJlMiIsIl9nZXRFZmZlY3QyIiwiX3RyYWNrUmVtb3ZhbDIiLCJfZ2V0UG9zaXRpb24yIiwiX2dldFRpcENvbnRlbnQyIiwiX2FyaWEiLCJfbm9kZUxpc3RUb0FycmF5MiIsIl9zdHlsZTIiLCJvYmoiLCJkZWZhdWx0IiwiUmVhY3RUb29sdGlwIiwiX1JlYWN0JENvbXBvbmVudCIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl90aGlzIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwicGxhY2UiLCJkZXNpcmVkUGxhY2UiLCJ0eXBlIiwiZWZmZWN0Iiwic2hvdyIsImJvcmRlciIsIm9mZnNldCIsImV4dHJhQ2xhc3MiLCJodG1sIiwiZGVsYXlIaWRlIiwiZGVsYXlTaG93IiwiZXZlbnQiLCJldmVudE9mZiIsImN1cnJlbnRFdmVudCIsImN1cnJlbnRUYXJnZXQiLCJhcmlhUHJvcHMiLCJwYXJzZUFyaWEiLCJpc0VtcHR5VGlwIiwiZGlzYWJsZSIsIm9yaWdpblRvb2x0aXAiLCJpc011bHRpbGluZSIsIm1vdW50IiwiZGVsYXlTaG93TG9vcCIsImRlbGF5SGlkZUxvb3AiLCJkZWxheVJlc2hvdyIsImludGVydmFsVXBkYXRlQ29udGVudCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJDb21wb25lbnQiLCJtZXRob2RBcnJheSIsIl90aGlzMiIsImZvckVhY2giLCJtZXRob2QiLCJfcHJvcHMiLCJpbnNlY3VyZSIsInJlc2l6ZUhpZGUiLCJzZXRTdHlsZUhlYWRlciIsImJpbmRMaXN0ZW5lciIsImJpbmRXaW5kb3dFdmVudHMiLCJuZXdBcmlhUHJvcHMiLCJrZXlzIiwic29tZSIsInNldFN0YXRlIiwiY2xlYXJUaW1lciIsInVuYmluZExpc3RlbmVyIiwicmVtb3ZlU2Nyb2xsTGlzdGVuZXIiLCJ1bmJpbmRXaW5kb3dFdmVudHMiLCJ0b29sdGlwUmVmIiwibWF0Y2hlcyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwiaWQiLCJ0YXJnZXRBcnJheSIsImVzY2FwZWQiLCJyZXBsYWNlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3RoaXMzIiwiX3Byb3BzMiIsImdsb2JhbEV2ZW50T2ZmIiwiaXNDYXB0dXJlIiwiZ2V0VGFyZ2V0QXJyYXkiLCJpc0NhcHR1cmVNb2RlIiwiZ2V0RWZmZWN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidW5iaW5kQmFzaWNMaXN0ZW5lciIsImlzQ3VzdG9tRXZlbnQiLCJjdXN0b21CaW5kTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwic2hvd1Rvb2x0aXAiLCJ1cGRhdGVUb29sdGlwIiwiaGlkZVRvb2x0aXAiLCJ3aW5kb3ciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYmluZFJlbW92YWxUcmFja2VyIiwiX3RoaXM0IiwiX3Byb3BzMyIsImN1c3RvbVVuYmluZExpc3RlbmVyIiwidW5iaW5kUmVtb3ZhbFRyYWNrZXIiLCJfcHJvcHM0IiwiZ2V0Q29udGVudCIsImNoaWxkcmVuIiwiY29udGVudCIsIkFycmF5IiwiaXNBcnJheSIsInBsYWNlaG9sZGVyIiwiZSIsImlzR2xvYmFsQ2FsbCIsImVsZSIsIl9wcm9wczUiLCJtdWx0aWxpbmUiLCJzd2l0Y2hUb1NvbGlkIiwiRm9jdXNFdmVudCIsInNjcm9sbEhpZGUiLCJyZXN1bHQiLCJmaW5kRE9NTm9kZSIsImlzTmV3U3RhdGUiLCJuZXdTdGF0ZSIsInJlc2hvd0RlbGF5IiwiZGVsYXlVcGRhdGUiLCJ1cGRhdGVTdGF0ZSIsImNsYXNzIiwiY2xhc3NOYW1lIiwiYWRkU2Nyb2xsTGlzdGVuZXIiLCJzZXRJbnRlcnZhbCIsIl9nZXRDb250ZW50IiwidXBkYXRlUG9zaXRpb24iLCJzZXRUaW1lb3V0IiwiX3RoaXM1IiwiX3N0YXRlIiwiYWZ0ZXJTaG93IiwiZ2V0VG9vbHRpcENvbnRlbnQiLCJkZWxheVRpbWUiLCJwYXJzZUludCIsImV2ZW50VGFyZ2V0IiwibW91c2VPblRvb2xUaXAiLCJpc0ludmlzaWJsZSIsImNsZWFyVGltZW91dCIsImhhc1RhcmdldCIsIl90aGlzNiIsIl9zdGF0ZTIiLCJhZnRlckhpZGUiLCJyZXNldFN0YXRlIiwiaXNWaXNpYmxlIiwibGlzdGVuRm9yVG9vbHRpcEV4aXQiLCJyZW1vdmVMaXN0ZW5lckZvclRvb2x0aXBFeGl0IiwiX3RoaXM3IiwiX3N0YXRlMyIsIm5vZGUiLCJzdHlsZSIsImxlZnQiLCJwb3NpdGlvbiIsInRvcCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJ0YWciLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwibmMiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiY2xlYXJJbnRlcnZhbCIsIl90aGlzOCIsIl9zdGF0ZTQiLCJ0b29sdGlwQ2xhc3MiLCJwbGFjZS10b3AiLCJwbGFjZS1ib3R0b20iLCJwbGFjZS1sZWZ0IiwicGxhY2UtcmlnaHQiLCJ0eXBlLWRhcmsiLCJ0eXBlLXN1Y2Nlc3MiLCJ0eXBlLXdhcm5pbmciLCJ0eXBlLWVycm9yIiwidHlwZS1pbmZvIiwidHlwZS1saWdodCIsImFsbG93X2hvdmVyIiwiYWxsb3dfY2xpY2siLCJjbGlja2FibGUiLCJXcmFwcGVyIiwid3JhcHBlciIsInN1cHBvcnRlZFdyYXBwZXJzIiwiaW5kZXhPZiIsImRlZmF1bHRQcm9wcyIsInJlZiIsIl9yZWYiLCJkYXRhLWlkIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJfcmVmMiIsInByb3BUeXBlcyIsImFueSIsInN0cmluZyIsImJvb2wiLCJudW1iZXIiLCJ3YXRjaFdpbmRvdyIsImZ1bmMiLCJkaXNwbGF5TmFtZSIsImciLCJGdW5jdGlvbiIsImdsb2JhbCIsInNjb3BlIiwiYXBwbHkiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwidGltZW91dCIsImNsb3NlIiwidW5yZWYiLCJlbnJvbGwiLCJpdGVtIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJ0b09iamVjdCIsIkdMT0JBTCIsIkhJREUiLCJSRUJVSUxEIiwiU0hPVyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwidW5kZWZpbmVkIiwiTEFSR0VfQVJSQVlfU0laRSIsIkNPUkVfRVJST1JfVEVYVCIsIkZVTkNfRVJST1JfVEVYVCIsIkhBU0hfVU5ERUZJTkVEIiwiTUFYX01FTU9JWkVfU0laRSIsIlBMQUNFSE9MREVSIiwiQ0xPTkVfREVFUF9GTEFHIiwiQ0xPTkVfRkxBVF9GTEFHIiwiQ0xPTkVfU1lNQk9MU19GTEFHIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJDT01QQVJFX1VOT1JERVJFRF9GTEFHIiwiV1JBUF9CSU5EX0ZMQUciLCJXUkFQX0JJTkRfS0VZX0ZMQUciLCJXUkFQX0NVUlJZX0JPVU5EX0ZMQUciLCJXUkFQX0NVUlJZX0ZMQUciLCJXUkFQX0NVUlJZX1JJR0hUX0ZMQUciLCJXUkFQX1BBUlRJQUxfRkxBRyIsIldSQVBfUEFSVElBTF9SSUdIVF9GTEFHIiwiV1JBUF9BUllfRkxBRyIsIldSQVBfUkVBUkdfRkxBRyIsIldSQVBfRkxJUF9GTEFHIiwiREVGQVVMVF9UUlVOQ19MRU5HVEgiLCJERUZBVUxUX1RSVU5DX09NSVNTSU9OIiwiSE9UX0NPVU5UIiwiSE9UX1NQQU4iLCJMQVpZX0ZJTFRFUl9GTEFHIiwiTEFaWV9NQVBfRkxBRyIsIklORklOSVRZIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWF9JTlRFR0VSIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIk1BWF9BUlJBWV9JTkRFWCIsIkhBTEZfTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImFzeW5jVGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJkb21FeGNUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJudWxsVGFnIiwib2JqZWN0VGFnIiwicHJveHlUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ1bmRlZmluZWRUYWciLCJ3ZWFrTWFwVGFnIiwid2Vha1NldFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiXFwiLCInIiwiXG4iLCJcciIsIuKAqCIsIuKAqSIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInJvb3QiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsInRoaXNBcmciLCJhcmdzIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiaW5kZXgiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJwcmVkaWNhdGUiLCJhcnJheUZpbHRlciIsInJlc0luZGV4IiwiYXJyYXlJbmNsdWRlcyIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjb21wYXJhdG9yIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJjYWNoZUhhcyIsImNhY2hlIiwiaGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiZGVidXJyTGV0dGVyIiwiw4AiLCLDgSIsIsOCIiwiw4MiLCLDhCIsIsOFIiwiw6AiLCLDoSIsIsOiIiwiw6MiLCLDpCIsIsOlIiwiw4ciLCLDpyIsIsOQIiwiw7AiLCLDiCIsIsOJIiwiw4oiLCLDiyIsIsOoIiwiw6kiLCLDqiIsIsOrIiwiw4wiLCLDjSIsIsOOIiwiw48iLCLDrCIsIsOtIiwiw64iLCLDryIsIsORIiwiw7EiLCLDkiIsIsOTIiwiw5QiLCLDlSIsIsOWIiwiw5giLCLDsiIsIsOzIiwiw7QiLCLDtSIsIsO2Iiwiw7giLCLDmSIsIsOaIiwiw5siLCLDnCIsIsO5Iiwiw7oiLCLDuyIsIsO8Iiwiw50iLCLDvSIsIsO/Iiwiw4YiLCLDpiIsIsOeIiwiw74iLCLDnyIsIsSAIiwixIIiLCLEhCIsIsSBIiwixIMiLCLEhSIsIsSGIiwixIgiLCLEiiIsIsSMIiwixIciLCLEiSIsIsSLIiwixI0iLCLEjiIsIsSQIiwixI8iLCLEkSIsIsSSIiwixJQiLCLEliIsIsSYIiwixJoiLCLEkyIsIsSVIiwixJciLCLEmSIsIsSbIiwixJwiLCLEniIsIsSgIiwixKIiLCLEnSIsIsSfIiwixKEiLCLEoyIsIsSkIiwixKYiLCLEpSIsIsSnIiwixKgiLCLEqiIsIsSsIiwixK4iLCLEsCIsIsSpIiwixKsiLCLErSIsIsSvIiwixLEiLCLEtCIsIsS1IiwixLYiLCLEtyIsIsS4IiwixLkiLCLEuyIsIsS9IiwixL8iLCLFgSIsIsS6IiwixLwiLCLEviIsIsWAIiwixYIiLCLFgyIsIsWFIiwixYciLCLFiiIsIsWEIiwixYYiLCLFiCIsIsWLIiwixYwiLCLFjiIsIsWQIiwixY0iLCLFjyIsIsWRIiwixZQiLCLFliIsIsWYIiwixZUiLCLFlyIsIsWZIiwixZoiLCLFnCIsIsWeIiwixaAiLCLFmyIsIsWdIiwixZ8iLCLFoSIsIsWiIiwixaQiLCLFpiIsIsWjIiwixaUiLCLFpyIsIsWoIiwixaoiLCLFrCIsIsWuIiwixbAiLCLFsiIsIsWpIiwixasiLCLFrSIsIsWvIiwixbEiLCLFsyIsIsW0IiwixbUiLCLFtiIsIsW3IiwixbgiLCLFuSIsIsW7Iiwixb0iLCLFuiIsIsW8Iiwixb4iLCLEsiIsIsSzIiwixZIiLCLFkyIsIsWJIiwixb8iLCJlc2NhcGVIdG1sQ2hhciIsIiYiLCI8IiwiPiIsIlwiIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJ0ZXN0IiwibWFwVG9BcnJheSIsInNpemUiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJzZXRUb0FycmF5Iiwic2V0Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJtYXRjaCIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIiZhbXA7IiwiJmx0OyIsIiZndDsiLCImcXVvdDsiLCImIzM5OyIsIl8iLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIkVycm9yIiwiTWF0aCIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJ0b1N0cmluZyIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsIm9iamVjdENyZWF0ZSIsInNwbGljZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsIml0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJtaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImRhdGEiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwicHVzaCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsInN5bWJvbCIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwicG9wIiwiaGFzaCIsImdldE1hcERhdGEiLCJwYWlycyIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJwYXRoIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsIm1lc3NhZ2UiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJzb3J0IiwiYmFzZVNvcnRCeSIsImNyaXRlcmlhIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJvcmRlciIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic3RhcnQiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsInNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwiY2hhckF0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1IiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsImNvdW50SG9sZGVycyIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiZm4iLCJhcnJMZW5ndGgiLCJvbGRBcnJheSIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInN0ZXAiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJnZXRWYWx1ZSIsInN0dWJBcnJheSIsImhhc1BhdGgiLCJoYXNGdW5jIiwiaXNMZW5ndGgiLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJtZW1vaXplQ2FwcGVkIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmRLZXkiLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25jYXQiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmlsdGVyIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVqZWN0IiwicmVtb3ZlIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmFOIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZSIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW0iLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwibmF0aXZlSGludHMiLCJpc0Jyb3dzZXIiLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ0aW1lb3V0RHVyYXRpb24iLCJuYXZpZ2F0b3IiLCJpc0lFMTAiLCJoaW50IiwiTXV0YXRpb25PYnNlcnZlciIsInNjaGVkdWxlZCIsImVsZW0iLCJvYnNlcnZlIiwiYXR0cmlidXRlcyIsImZ1bmN0aW9uVG9DaGVjayIsImdldFR5cGUiLCJnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkiLCJlbGVtZW50IiwiY3NzIiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsImJvZHkiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImdldE9mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFJvb3QiLCJwYXJlbnROb2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImlzT2Zmc2V0Q29udGFpbmVyIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwic2lkZSIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInNpZGVBIiwiYXhpcyIsInNpZGVCIiwic3R5bGVzIiwiaXNJRTEwJDEiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiaGVpZ2h0Iiwid2lkdGgiLCJnZXRDbGllbnRSZWN0IiwicmlnaHQiLCJvZmZzZXRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJfbyIsIl9pIiwiYm90dG9tIiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsInZlcnRTY3JvbGxiYXIiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJydW5Jc0lFMTAiLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJwYXJlbnRSZWN0Iiwic2Nyb2xsUGFyZW50IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJhIiwibWFyZ2luVG9wIiwiZiIsIm1hcmdpbkxlZnQiLCJfZTIiLCJfdDMiLCJtb2RpZmllciIsImluY2x1ZGVTY3JvbGwiLCJnZXRCb3VuZGFyaWVzIiwiYm91bmRhcmllcyIsImJvdW5kYXJpZXNFbGVtZW50IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwicmVsYXRpdmVPZmZzZXQiLCJib3VuZGFyaWVzTm9kZSIsIl90NCIsImlzRml4ZWQiLCJfbzIiLCJfZ2V0V2luZG93U2l6ZXMiLCJfZTMiLCJfdDUiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBhZGRpbmciLCJwbGFjZW1lbnQiLCJyZWN0cyIsInJlZlJlY3QiLCJzb3J0ZWRBcmVhcyIsImIiLCJmaWx0ZXJlZEFyZWFzIiwicG9wcGVyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIngiLCJ5IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJyZWZlcmVuY2VPZmZzZXRzIiwiYXJyIiwicnVuTW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZW5kcyIsImN1ciIsIndhcm4iLCJpc01vZGlmaWVyRW5hYmxlZCIsIl9yZWYzIiwiZW5hYmxlZCIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwidG9DaGVjayIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiaXNCb2R5Iiwic2Nyb2xsUGFyZW50cyIsImV2ZW50c0VuYWJsZWQiLCJfZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiaXNOdW1lcmljIiwic2V0U3R5bGVzIiwidW5pdCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmciLCJfcmVmNCIsImlzUmVxdWlyZWQiLCJyZXF1ZXN0ZWQiLCJfaTIiLCJfZTUiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicGFyc2VPZmZzZXQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwiZGl2aWRlciIsInNwbGl0UmVnZXgiLCJvcHMiLCJtZXJnZVdpdGhQcmV2aW91cyIsIm9wIiwic3RyIiwiX2U2IiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0IiwiYmFzZVBsYWNlbWVudCIsInNoaWZ0dmFyaWF0aW9uIiwiX2Ukb2Zmc2V0czQiLCJfdDciLCJpc1ZlcnRpY2FsIiwic2hpZnRPZmZzZXRzIiwiX2RlZmluZVByb3BlcnR5IiwiX3JlZjUiLCJfZSRvZmZzZXRzMyIsInByZXZlbnRPdmVyZmxvdyIsInByaW9yaXR5IiwiY2hlY2siLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsImtlZXBUb2dldGhlciIsIl9lJG9mZnNldHMyIiwib3BTaWRlIiwiYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJzaWRlVmFsdWUiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbiIsImZsaXBWYXJpYXRpb25zIiwidyIsImZsaXBwZWQiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJoaWRlIiwiYm91bmQiLCJjb21wdXRlU3R5bGUiLCJsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJvZmZzZXRQYXJlbnRSZWN0IiwicHJlZml4ZWRQcm9wZXJ0eSIsInUiLCJ3aWxsQ2hhbmdlIiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIl9lNCIsIl90NiIsIngtcGxhY2VtZW50IiwiYXJyb3dTdHlsZXMiLCJhcHBseVN0eWxlIiwicmVtb3ZlQXR0cmlidXRlIiwib25Mb2FkIiwiUG9wcGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaXNEZXN0cm95ZWQiLCJpc0NyZWF0ZWQiLCJtb2RpZmllck9wdGlvbnMiLCJlbmFibGVFdmVudExpc3RlbmVycyIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInJlbW92ZUNoaWxkIiwiZGVzdHJveSIsIlBvcHBlclV0aWxzIiwiayIsImZvciIsInEiLCJ2IiwieiIsImFhIiwiYmEiLCJBIiwiQiIsImVuY29kZVVSSUNvbXBvbmVudCIsImgiLCJmcmFtZXNUb1BvcCIsImNhIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsInJlZnMiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJrZXlQcmVmaXgiLCJSIiwiVSIsIlMiLCJUIiwiPSIsIjoiLCJlYSIsImZhIiwiViIsImRhIiwiVyIsIlgiLCJDaGlsZHJlbiIsIm9ubHkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJyZW5kZXIiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJjb21wYXJlIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJ2ZXJzaW9uIiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJrYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsInJldHVybiIsIk1hIiwiZGlzcGF0Y2hDb25maWciLCJOYSIsIl90YXJnZXRJbnN0IiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWEiLCJWYSIsIldhIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsInRleHRDb250ZW50IiwiZmIiLCJnYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaWIiLCJldmVudFBvb2wiLCJqYiIsImRlc3RydWN0b3IiLCJoYiIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJkb2N1bWVudE1vZGUiLCJwYiIsInFiIiwicmIiLCJzYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ0YiIsInViIiwia2V5Q29kZSIsInZiIiwiZGV0YWlsIiwid2IiLCJ6YiIsImxvY2FsZSIsIndoaWNoIiwieGIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ5YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJ0ZWwiLCJ0ZXh0IiwidXJsIiwid2VlayIsIk1iIiwiTmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJPYiIsIlBiIiwiUmIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJRYiIsIlNiIiwiY2hlY2tlZCIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwia2MiLCJsYyIsIm1jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwicWMiLCJvYyIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkJjIiwiY2hhbmdlIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsImRldGFjaEV2ZW50IiwiS2MiLCJMYyIsImF0dGFjaEV2ZW50IiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJSYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJTYyIsImdldE1vZGlmaWVyU3RhdGUiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIlpjIiwicG9pbnRlcklkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiYmQiLCJjZCIsImRkIiwiZWQiLCJlZmZlY3RUYWciLCJmZCIsImhkIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiamQiLCJjbGlwYm9hcmREYXRhIiwia2QiLCJsZCIsImNoYXJDb2RlIiwibWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwibmQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0Iiwib2QiLCJsb2NhdGlvbiIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicmQiLCJzZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwidGQiLCJ1ZCIsInZkIiwid2QiLCJpc0ludGVyYWN0aXZlIiwieGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJ5ZCIsInpkIiwiQWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJuZXh0U2libGluZyIsIk5kIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIk9kIiwiY29udGVudEVkaXRhYmxlIiwiUWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiTWQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJmb2N1cyIsIlJkIiwiU2QiLCJzZWxlY3QiLCJUZCIsIlVkIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJvblNlbGVjdCIsIiRkIiwiWmQiLCJhZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZmUiLCJtYXRobWwiLCJzdmciLCJnZSIsImhlIiwiaWUiLCJqZSIsIm5hbWVzcGFjZVVSSSIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImtlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwibGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJtZSIsIm5lIiwib2UiLCJzZXRQcm9wZXJ0eSIsInBlIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInFlIiwicmUiLCJpcyIsInNlIiwiYmx1ciIsInRlIiwidWUiLCJ2ZSIsIndlIiwiYXV0b0ZvY3VzIiwieGUiLCJ5ZSIsInplIiwiQWUiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiQmUiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJLZSIsIkxlIiwiTWUiLCJOZSIsImdldENoaWxkQ29udGV4dCIsIk9lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlVlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJjb250ZXh0RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJWZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwiY29udGV4dFR5cGUiLCJ3ZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInpmIiwiQWYiLCJfc3RyaW5nUmVmIiwiQmYiLCJDZiIsImRlbGV0ZSIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsInF1ZXVlIiwibmciLCJvZyIsInBnIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwicWciLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlcHMiLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwicmVhZENvbnRleHQiLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIlFnIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiUmciLCJwZW5kaW5nQ29udGV4dCIsIlNnIiwidGltZWRPdXRBdCIsImZhbGxiYWNrIiwiVGciLCJVZyIsInRoZW4iLCJoZiIsIldlIiwiaHlkcmF0ZSIsImhpZGRlbiIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwib25DbGljayIsIm9uY2xpY2siLCJwaCIsIldlYWtTZXQiLCJxaCIsInJoIiwic2giLCJ0aCIsInZoIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ3aCIsInhoIiwieWgiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiemgiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQ2UiLCJkaXNwbGF5IiwidWgiLCJoaSIsIlhoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJjb21wb25lbnREaWRDYXRjaCIsIkZoIiwiY29tcG9uZW50U3RhY2siLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZoIiwiWmgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJlZiIsIlBkIiwiWWgiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZpbmlzaGVkV29yayIsIiRoIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImJpIiwiY2kiLCJkaSIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwiZWkiLCJmaSIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiZ2kiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1bnN0YWJsZV9ub3ciLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJ0aW1lb3V0SGFuZGxlIiwiQmkiLCJDaSIsIm5leHRTY2hlZHVsZWRSb290IiwiRGkiLCJFaSIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJGaSIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJHaSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJOaSIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiT2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiUGkiLCJfaW50ZXJuYWxSb290IiwiUWkiLCJTaSIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIlJpIiwiVGkiLCJNaSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtIiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiVmkiLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIldpIiwiWGkiLCJwcmlvcml0eUxldmVsIiwicGVyZm9ybWFuY2UiLCJfc2NoZWRNb2NrIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJuZXh0VGljayIsInJ1bklmUHJlc2VudCIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJ0YXNrIiwicnVuIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnVHlwZSIsImRpc3BhdGNoR2xvYmFsRXZlbnQiLCJfY29uc3RhbnQyIiwicmVidWlsZCIsImdsb2JhbFJlYnVpbGQiLCJnbG9iYWxTaG93IiwiZ2xvYmFsSGlkZSIsIl9jb25zdGFudCIsImV2ZW50TmFtZSIsIm9wdHMiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIm9uV2luZG93UmVzaXplIiwiZGF0YUV2ZW50IiwiZGF0YUV2ZW50T2ZmIiwiY3VzdG9tTGlzdGVuZXJzIiwiY3VzdG9tTGlzdGVuZXIiLCJjaGVja1N0YXR1cyIsImRhdGFJc0NhcHR1cmUiLCJjdXJyZW50SXRlbSIsInNldFVudGFyZ2V0SXRlbXMiLCJsaXN0ZW5lciIsImdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcyIsIm9ic2VydmVyIiwibXV0YXRpb25zIiwibTEiLCJtdXRhdGlvbiIsIm0yIiwicmVtb3ZlZE5vZGVzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsInJlbW92YWxUcmFja2VyIiwiZGlzY29ubmVjdCIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiX2dldERpbWVuc2lvbnMiLCJnZXREaW1lbnNpb25zIiwidGlwV2lkdGgiLCJ0aXBIZWlnaHQiLCJfZ2V0RGltZW5zaW9uczIiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsIl9nZXRDdXJyZW50T2Zmc2V0IiwiZ2V0Q3VycmVudE9mZnNldCIsIm1vdXNlWCIsIm1vdXNlWSIsImRlZmF1bHRPZmZzZXQiLCJnZXREZWZhdWx0UG9zaXRpb24iLCJfY2FsY3VsYXRlT2Zmc2V0IiwiY2FsY3VsYXRlT2Zmc2V0IiwiZXh0cmFPZmZzZXRfWCIsImV4dHJhT2Zmc2V0X1kiLCJ3aW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJpbm5lckhlaWdodCIsIl9nZXRQYXJlbnQiLCJnZXRQYXJlbnQiLCJwYXJlbnRUb3AiLCJwYXJlbnRMZWZ0IiwiZ2V0VGlwT2Zmc2V0TGVmdCIsIm9mZnNldF9YIiwiZ2V0VGlwT2Zmc2V0VG9wIiwib2Zmc2V0X1kiLCJvdXRzaWRlUmlnaHQiLCJnZXRUaXBPZmZzZXRSaWdodCIsIm91dHNpZGVCb3R0b20iLCJnZXRUaXBPZmZzZXRCb3R0b20iLCJvdXRzaWRlIiwib3V0c2lkZUxlZnQiLCJvdXRzaWRlVG9wIiwiaW5zaWRlIiwicGxhY2VzTGlzdCIsImluc2lkZUxpc3QiLCJuZXdQbGFjZSIsIl9ub2RlJGdldEJvdW5kaW5nQ2xpZSIsImJvdW5kaW5nQ2xpZW50UmVjdCIsInRhcmdldFRvcCIsInRhcmdldExlZnQiLCJfZ2V0RGltZW5zaW9uczMiLCJkaXNUb01vdXNlIiwicGFyc2UiLCJjdXJyZW50UGFyZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJwYXJlbnRFbGVtZW50IiwidGlwIiwiX3JlYWN0IiwiYXJpYU9iaiIsIm5vZGVMaXN0IiwiJCIsImZhZGVPdXQiLCJyZWFkeSIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0U2Vjb25kcyIsImdldE1pbnV0ZXMiLCJnZXRIb3VycyIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJhdHRyIiwiY2xvc2VzdCIsInRvZ2dsZUNsYXNzIiwic2xpZGVUb2dnbGUiLCJEcm9wem9uZSIsImF1dG9EaXNjb3ZlciIsIkRhdGFUYWJsZSIsImF1dG9XaWR0aCIsInJlc3BvbnNpdmUiLCJsZW5ndGhNZW51IiwibGFuZ3VhZ2UiLCJzZWFyY2hQbGFjZWhvbGRlciIsImRvbSIsImluaXRDb21wbGV0ZSIsInByZXBlbmQiLCJ0cmlnZ2VyIiwiaGFzQ2xhc3MiLCJhdXRvc2l6ZSIsIm1hc2siLCJzZWxlY3QyIiwiZHJvcGRvd25BdXRvV2lkdGgiLCJkcm9wZG93blBhcmVudCIsImRyb3B6b25lIiwiYWRkUmVtb3ZlTGlua3MiLCJmbGF0cGlja3IiLCJlbmFibGVUaW1lIiwibmV4dEFycm93IiwicHJldkFycm93Iiwibm9DYWxlbmRhciIsImdldEVsZW1lbnRCeUlkIiwibm9VaVNsaWRlciIsImNvbm5lY3QiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY29sb3JwaWNrZXIiLCJ0cnVtYm93eWciLCJhdXRvZ3JvdyIsImxpZ2h0R2FsbGVyeSIsImVuYWJsZVRvdWNoIiwicG9wb3ZlciIsInRvb2x0aXAiLCJmdWxsQ2FsZW5kYXIiLCJjb250ZW50SGVpZ2h0IiwidGhlbWUiLCJidXR0b25JY29ucyIsInByZXYiLCJoZWFkZXIiLCJkZWZhdWx0RGF0ZSIsImVkaXRhYmxlIiwiZXZlbnRzIiwibW9tZW50IiwiZm9ybWF0IiwiaiIsIiRjbGFtcCIsInNjcm9sbGJhciIsInNjcm9sbExvY2siLCJ0cmVlIiwiY2xvc2VkSWNvbiIsIm9wZW5lZEljb24iLCJhdXRvT3BlbiIsImRyYWdBbmREcm9wIiwibGFiZWwiLCJhdXRvRXNjYXBlIiwicmF0ZVlvIiwicmF0aW5nIiwibm9ybWFsRmlsbCIsInJhdGVkRmlsbCIsInRleHRjb3VudGVyIiwiY291bnREb3duIiwiaW5wdXRFcnJvckNsYXNzIiwiY291bnRlckVycm9yQ2xhc3MiLCJhcHBlbmQiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwicHJpbnQiLCJmYWRlSW4iLCJhdXRvY29tcGxldGUiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJhamF4IiwidGVybSIsImRhdGFUeXBlIiwic3VjY2VzcyIsIm1pbkxlbmd0aCIsImNsaWNrIiwianNvbiIsImV4cG9ydEZvcm1hdCIsInBhcmVudENhcmQiLCJzZWxlY3QycGFyZW50Iiwic2xpZGVyIiwic2xpZGVyUmFuZ2UiLCJzbGlkZXJSYW5nZUlucHV0cyIsInNsaWRlclRoZW1lcyIsIm1ZZWFyIiwibURheSIsInRyZWV2aWV3U2ltcGxlRGF0YSIsImhtciIsImluc2VydEludG8iLCJsb2NhbHMiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwicGFydCIsIm1lZGlhIiwic291cmNlTWFwIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImlkeCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwibm9uY2UiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJBbGVydCIsImRpc21pc3MiLCJyZWFjdF9kZWZhdWx0IiwiZGF0YS1kaXNtaXNzIiwiYXJpYS1sYWJlbCIsImFyaWEtaGlkZGVuIiwicm9sZSIsImdldENsYXNzIiwiWG1wcExpbmsiLCJfQ29tcG9uZW50IiwiQ29tbUxpbmtzX2NsYXNzQ2FsbENoZWNrIiwiQ29tbUxpbmtzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJDb21tTGlua3NfZ2V0UHJvdG90eXBlT2YiLCJDb21tTGlua3NfaW5oZXJpdHMiLCJDb21tTGlua3NfY3JlYXRlQ2xhc3MiLCJhdXRoTmFtZSIsIkF1dGhOYW1lIiwiY3JlYXRlWG1wcFVybCIsIk11bWJsZUxpbmsiLCJfQ29tcG9uZW50MiIsImNvbW1DaGFubmVsIiwibGlua1RleHQiLCJjcmVhdGVNdW1ibGVVcmwiLCJtdW1ibGVMaW5rIiwiQmFubmVyIiwiYmFubmVyIiwiQWxlcnRfQWxlcnQiLCJnZXRJY29uQ2xhc3MiLCJDb21tTGlua3NfWG1wcExpbmsiLCJjcmVhdGVkQnkiLCJwb3N0ZWQiLCJNb2RhbCIsImdldElkIiwidGFiaW5kZXgiLCJnZXRUaXRsZSIsIlRleHRBcmVhIiwiRm9ybUNvbnRyb2xzX2NsYXNzQ2FsbENoZWNrIiwiRm9ybUNvbnRyb2xzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJGb3JtQ29udHJvbHNfZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGVDaGFuZ2UiLCJGb3JtQ29udHJvbHNfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiRm9ybUNvbnRyb2xzX2luaGVyaXRzIiwiRm9ybUNvbnRyb2xzX2NyZWF0ZUNsYXNzIiwiY2xhc3NPdmVycmlkZSIsInJlYWRvbmx5IiwicmVxdWlyZWQiLCJnZW5FbGVtZW50Q2xhc3MiLCJnZXROYW1lIiwiZ2V0UGxhY2Vob2xkZXIiLCJpc1JlYWRPbmx5Iiwib25DaGFuZ2UiLCJJbnB1dCIsIkJhbm5lck1vZGFsIiwiYmFzZVVyaSIsIm1vZGFsIiwiZmFpbCIsInJlc3BvbnNlVGV4dCIsIm1vZGFsY29udGVudCIsIm9uU3VibWl0IiwiY3JlYXRlQW5ub3VuY2VtZW50IiwiaHRtbEZvciIsIkZvcm1Db250cm9sc19UZXh0QXJlYSIsImdldElzc3VlciIsInRpbWVEaWZmIiwiZ2V0TWVzc2FnZSIsImRlbGV0ZUFubm91bmNlbWVudCIsIk1vZGFsX01vZGFsIiwiQW5ub3VuY2VtZW50QmFubmVyIiwiQW5ub3VuY2VtZW50X2NsYXNzQ2FsbENoZWNrIiwiQW5ub3VuY2VtZW50X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJBbm5vdW5jZW1lbnRfZ2V0UHJvdG90eXBlT2YiLCJnZXRBbm5vdW5jZW1lbnQiLCJ0ZXh0U3RhdHVzIiwieGhyIiwic3RhdHVzIiwiQmFubmVyX0Jhbm5lciIsIk1vZGFsX0Jhbm5lck1vZGFsIiwiRGF0ZUZvcm1hdCIsImdldERheSIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJBY2NvdW50UGlsb3QiLCJhdXRoX25hbWUiLCJwaWxvdHNBcnJheSIsImNvcnBvcmF0aW9uIiwiYWxsaWFuY2UiLCJBbm5vdW5jZW1lbnRfQW5ub3VuY2VtZW50QmFubmVyIiwiQWN0aXZlQmFucyIsImJhbklkIiwiYmFucyIsImJhbiIsIkFjdGl2ZUJhbnNfQmFuUm93IiwicmV2b2tlQmFuIiwicmV2b2tlIiwic2V0SW5kZXgiLCJhZG1pbiIsIkJhblJvdyIsIkFjdGl2ZUJhbnNfY2xhc3NDYWxsQ2hlY2siLCJBY3RpdmVCYW5zX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJBY3RpdmVCYW5zX2dldFByb3RvdHlwZU9mIiwiQWN0aXZlQmFuc19pbmhlcml0cyIsIkFjdGl2ZUJhbnNfY3JlYXRlQ2xhc3MiLCJleHBpcmVzQXQiLCJiYW5uZWRBY2NvdW50IiwiYmFuQWRtaW4iLCJwaWxvdF9pZCIsInBpbG90cyIsImJ0bl9yZXZva2UiLCJzcmMiLCJnZXRQaWxvdFVybCIsImFsdCIsImdldEJhbmVlTmFtZSIsImdldEFkbWluTmFtZSIsImdldEJhblR5cGUiLCJCYW5JbmZvIiwiY29uZmlndXJlQXV0b2NvbXBsZXRlIiwic2VsZWN0ZWRCYW4iLCJzZXJpYWxpemUiLCJiYW5Jc3N1ZWRBdCIsImlucHV0TmV3QmFuIiwiRm9ybUNvbnRyb2xzX0lucHV0IiwiY3JlYXRlZEF0IiwicmVzZXRfYnRuIiwibGFyZ2UiLCJzbWFsbCIsIm5ld0JhbiIsInVwZGF0ZUJhbiIsInJlYXNvbiIsIkJhbk1hbmFnZW1lbnQiLCJCYW5zX2NsYXNzQ2FsbENoZWNrIiwiQmFuc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQmFuc19nZXRQcm90b3R5cGVPZiIsImJhbkluZGV4IiwiQWN0aXZlQmFuc19BY3RpdmVCYW5zIiwic2V0QmFuSW5kZXgiLCJCYW5JbmZvX0JhbkluZm8iLCJCYW5zX0Jhbk1hbmFnZW1lbnQiLCJQaWxvdCIsIl9nZXRQcm90b3R5cGVPZjIiLCJFc2lVaV9jbGFzc0NhbGxDaGVjayIsIl9sZW4iLCJfa2V5IiwiRXNpVWlfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkVzaVVpX2dldFByb3RvdHlwZU9mIiwiRXNpVWlfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiRXNpVWlfaW5oZXJpdHMiLCJFc2lVaV9jcmVhdGVDbGFzcyIsInRhcmdldF9pZCIsInBpbG90IiwiY2hhcmFjdGVySUQiLCJjaGFyYWN0ZXJOYW1lIiwiYXBpQ2FsbCIsIkNvcnBvcmF0aW9uIiwiQWxsaWFuY2UiLCJfQ29tcG9uZW50MyIsIkRlc3RpbmF0aW9uIiwiX0NvbXBvbmVudDQiLCJzeXN0ZW0iLCJTcGVjaWFsVXNlcnMiLCJ1c2VycyIsInVzZXIiLCJFbGV2YXRlZFVzZXJzX1VzZXJSb3ciLCJVc2VyUm93IiwiRWxldmF0ZWRVc2Vyc19jbGFzc0NhbGxDaGVjayIsIkVsZXZhdGVkVXNlcnNfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkVsZXZhdGVkVXNlcnNfZ2V0UHJvdG90eXBlT2YiLCJFbGV2YXRlZFVzZXJzX2luaGVyaXRzIiwiRWxldmF0ZWRVc2Vyc19jcmVhdGVDbGFzcyIsInJvbGVzIiwiZ2V0QWNjb3VudE5hbWUiLCJFc2lVaV9Db3Jwb3JhdGlvbiIsImdldENvcnBvcmF0aW9uIiwiRXNpVWlfQWxsaWFuY2UiLCJnZXRBbGxpYW5jZSIsIkFjY291bnRQaWxvdHMiLCJFc2lVaV9QaWxvdCIsIlJvbGVzIiwicm9sZUlkIiwiYWNjb3VudElkIiwidXNlckluZGV4IiwiaW5fcm9sZXMiLCJyZW1vdmVSb2xlIiwiVXNlckluZm8iLCJzZWxlY3RlZFVzZXIiLCJhY2NvdW50X2lkIiwicm9sZV9pZCIsImFjY291bnRfbmFtZSIsImF2YWxpYWJsZV9yb2xlcyIsImFkZFJvbGVzIiwiaW5wdXROZXdGYyIsImF2YWlsYWJsZVJvbGVzIiwiYWRkUm9sZSIsImRhdGEtdG9nZ2xlIiwiYXJpYS1leHBhbmRlZCIsIlJvbGVzX1JvbGVzIiwiQWNjb3VudFBpbG90c19BY2NvdW50UGlsb3RzIiwibGFzdExvZ2luIiwiVXNlck1hbmFnZW1lbnQiLCJDb21tYW5kZXJzX2NsYXNzQ2FsbENoZWNrIiwiQ29tbWFuZGVyc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQ29tbWFuZGVyc19nZXRQcm90b3R5cGVPZiIsImZjcyIsInNldFVzZXJJbmRleCIsInVzZXJJbnB1dCIsIkVsZXZhdGVkVXNlcnNfU3BlY2lhbFVzZXJzIiwiVXNlckluZm9fVXNlckluZm8iLCJDb21tYW5kZXJzX1VzZXJNYW5hZ2VtZW50IiwiTmV3RmxlZXRMaW5rIiwiTmV3RmxlZXRzX2NsYXNzQ2FsbENoZWNrIiwiTmV3RmxlZXRzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJOZXdGbGVldHNfZ2V0UHJvdG90eXBlT2YiLCJOZXdGbGVldHNfaW5oZXJpdHMiLCJOZXdGbGVldHNfY3JlYXRlQ2xhc3MiLCJkYXRhLXRhcmdldCIsIk5ld0ZsZWV0TW9kYWwiLCJmbGVldElkIiwiYm9zcyIsImNvbW1zIiwicHJlZlBpbG90IiwiZmxlZXRUeXBlcyIsIm1vZGFsX01vZGFsIiwicmVnaXN0ZXJGbGVldCIsIkZsZWV0SW5mbyIsImZsZWV0IiwibXlQaWxvdHMiLCJmY0J1dHRvbnMiLCJqb2luRmxlZXQiLCJzaG93RmNPcHRpb25zIiwiRmxlZXRJbmZvX0ZsZWV0RkMiLCJGbGVldEluZm9fRmxlZXRMb2NhdGlvbiIsIkZsZWV0SW5mb19GbGVldENvdW50IiwibWVtYmVycyIsIkNvbW1MaW5rc19NdW1ibGVMaW5rIiwiRmxlZXRGQyIsIkZsZWV0TG9jYXRpb24iLCJFc2lVaV9EZXN0aW5hdGlvbiIsIkZsZWV0Q291bnQiLCJvbkdyaWQiLCJTZWxlY3RQaWxvdCIsIlNlbGVjdFBpbG90X2NsYXNzQ2FsbENoZWNrIiwiU2VsZWN0UGlsb3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlNlbGVjdFBpbG90X2dldFByb3RvdHlwZU9mIiwiaW5pdGlhbFBpbG90U2V0Iiwic2VsZWN0ZWRQaWxvdCIsInBpbG90T3B0aW9ucyIsInVwZGF0ZVNlbGVjdGVkUGlsb3QiLCJTZWxlY3RTaGlwcyIsInNlbGVjdGVkRml0IiwiTnVtYmVyIiwiZml0cyIsImZpdCIsInVwZGF0ZUZpdHMiLCJ0eXBlSWQiLCJkZXNjcmlwdGlvbiIsIlNlbGVjdFJvbGVzIiwic2VsZWN0ZWRSb2xlIiwidXBkYXRlUm9sZXMiLCJMZWF2ZVdhaXRsaXN0QnRuIiwidXJpIiwibGVhdmVXYWl0bGlzdCIsImlzT25XbCIsIldhaXRsaXN0VXAiLCJXYWl0bGlzdFVwX2NsYXNzQ2FsbENoZWNrIiwiV2FpdGxpc3RVcF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiV2FpdGxpc3RVcF9nZXRQcm90b3R5cGVPZiIsInNlbGVjdGVkUm9sZXMiLCJzZWxlY3RlZEZpdHMiLCJmaXR0aW5ncyIsImlzU2VsZWN0ZWQiLCJmaXRfaWQiLCJyb2xlX2lkcyIsImZpdF9pZHMiLCJTZWxlY3RQaWxvdF9TZWxlY3RQaWxvdCIsIlNlbGVjdFNoaXBzX1NlbGVjdFNoaXBzIiwiZ2V0U2hpcHMiLCJ1cGRhdGVTZWxlY3RlZEZpdHMiLCJTZWxlY3RSb2xlc19TZWxlY3RSb2xlcyIsImdldFJvbGVzIiwidXBkYXRlU2VsZWN0ZWRSb2xlcyIsIkFkZFBpbG90VG9XYWl0bGlzdCIsIkxlYXZlV2xCdG5fTGVhdmVXYWl0bGlzdEJ0biIsIldhaXRpbmdQaWxvdCIsIndhaXRpbmciLCJyZW1vdmVQaWxvdCIsIldhaXRsaXN0UXVldWUiLCJxdWV1ZXMiLCJ5b3VyUG9zIiwidG90YWxXYWl0aW5nIiwiTmFtZSIsIkNvdW50IiwiZGF0YS10aXAiLCJkYXRhLW11bHRpbGluZSIsImRpc3RfZGVmYXVsdCIsInlvdXJXYWl0VGltZSIsIkluZGV4IiwiSW5kZXhfY2xhc3NDYWxsQ2hlY2siLCJJbmRleF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSW5kZXhfZ2V0UHJvdG90eXBlT2YiLCJmY09wdGlvbnMiLCJmbGVldHMiLCJ3YWl0bGlzdCIsImdldEZsZWV0cyIsImF2YWxpYWJsZSIsIkZsZWV0SW5mb19GbGVldEluZm8iLCJub0ZsZWV0cyIsIndhaXRsaXN0VWkiLCJuZXdGbGVldCIsImJ0biIsIk5ld0ZsZWV0c19OZXdGbGVldExpbmsiLCJOZXdGbGVldHNfTmV3RmxlZXRNb2RhbCIsImF2YWlsYWJsZUZsZWV0cyIsImFsZXJ0X0FsZXJ0IiwiV2FpdGxpc3RVcF9XYWl0bGlzdFVwIiwiYXZhaWxhYmxlUGlsb3RzIiwiV2FpdGluZ1BpbG90c19XYWl0aW5nUGlsb3QiLCJ3YWl0aW5nUGlsb3RzIiwiV2FpdGxpc3RRdWV1ZV9XYWl0bGlzdFF1ZXVlIiwiSW5kZXhfSW5kZXgiLCJXYWl0bGlzdCIsIkZsaWdodFN0cmlwcyIsIldhaXRsaXN0X0ZsaWdodFN0cmlwIiwid2luZ3MiLCJGbGlnaHRTdHJpcCIsIldhaXRsaXN0X2NsYXNzQ2FsbENoZWNrIiwiV2FpdGxpc3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIldhaXRsaXN0X2dldFByb3RvdHlwZU9mIiwiV2FpdGxpc3RfaW5oZXJpdHMiLCJXYWl0bGlzdF9jcmVhdGVDbGFzcyIsIndsX2lkIiwic3F1YWRfaWQiLCJ3aW5nX2lkIiwic3F1YWRJZCIsIndpbmdJZCIsIm5ld1BpbG90Iiwib2ZmbGluZSIsInNxdWFkcyIsImlzT2ZmbGluZSIsInNoaXBzIiwic2hpcCIsInNoaXBUeXBlSWQiLCJhY3JvbnltIiwid2luZyIsInNxdWFkIiwiaW52aXRlUGlsb3QiLCJhY2NvdW50IiwiYWxhcm1BY2NvdW50Iiwid2FpdGluZ0ZvciIsIkZsZWV0R2xhbmNlIiwiRmxlZXRHbGFuY2VfY2xhc3NDYWxsQ2hlY2siLCJGbGVldEdsYW5jZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiRmxlZXRHbGFuY2VfZ2V0UHJvdG90eXBlT2YiLCJzZWxlY3RlZFF1ZXVlIiwiZGljdCIsImZpbHRlcmVkQ29tcCIsImNvbXAiLCJnZXRDb21wIiwiZmxlZXRDb21wIiwidG90YWwiLCJzaGlwVHlwZSIsImZpbHRlcklkIiwiRmxlZXRHbGFuY2VfR2xhbmNlTWVudSIsImZpbHRlcnMiLCJnZXRGaWx0ZXJzIiwiYWN0aXZlRmlsdGVySWQiLCJ1cGRhdGVGaWx0ZXIiLCJzZXRGaWx0ZXIiLCJGbGVldEdsYW5jZV9HbGFuY2VDb21wIiwiZ2V0RmlsdGVyZWRDb21wIiwiR2xhbmNlQ29tcCIsIkZsZWV0R2xhbmNlX2luaGVyaXRzIiwiRmxlZXRHbGFuY2VfY3JlYXRlQ2xhc3MiLCJHbGFuY2VNZW51IiwidGFicyIsIlNpZGVQYW5lbCIsIlNpZGVQYW5lbF9jbGFzc0NhbGxDaGVjayIsIlNpZGVQYW5lbF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU2lkZVBhbmVsX2dldFByb3RvdHlwZU9mIiwiU2lkZVBhbmVsX2luaGVyaXRzIiwiU2lkZVBhbmVsX2NyZWF0ZUNsYXNzIiwiaGlkZU5hdiIsIlNpZGVTZWN0aW9uIiwiU2lkZVBhbmVsQnV0dG9uIiwib3Blbk5hdiIsIkJ0bkNsb3NlIiwiRmxlZXRTZXR0aW5nc19jbGFzc0NhbGxDaGVjayIsIkZsZWV0U2V0dGluZ3NfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkZsZWV0U2V0dGluZ3NfZ2V0UHJvdG90eXBlT2YiLCJGbGVldFNldHRpbmdzX2luaGVyaXRzIiwiRmxlZXRTZXR0aW5nc19jcmVhdGVDbGFzcyIsImNvbmZpcm0iLCJjbG9zZUZsZWV0IiwiQnRuQ2xlYXIiLCJjbGVhcldhaXRsaXN0IiwiQnRuSW52QWxsIiwiQnRuSW52RmF4ZXMiLCJCYWNrc2VhdCIsIl9Db21wb25lbnQ1IiwiU2lkZVBhbmVsX1NpZGVTZWN0aW9uIiwiZ2V0SWNvSWQiLCJCb3NzIiwiX0NvbXBvbmVudDYiLCJwaWxvdElkIiwiZ2V0UGlsb3QiLCJFeGl0Q3lub19BZGQiLCJfQ29tcG9uZW50NyIsImZsZWV0UGlsb3RzIiwiaXNFeGl0Q3lubyIsImlzSW5GbGVldCIsInNldEN5bm8iLCJFeGl0Q3lubyIsIl9Db21wb25lbnQ4IiwiY3lub3MiLCJfdGhpczkiLCJ1bnNldEN5bm8iLCJNdW1ibGUiLCJfQ29tcG9uZW50OSIsIl90aGlzMTAiLCJjb21tc0lkIiwiY29tbU9wdGlvbnMiLCJfdGhpczExIiwiZ2V0Q29tbU9wdGlvbnMiLCJTdGF0dXMiLCJfQ29tcG9uZW50MTAiLCJfdGhpczEyIiwiVHlwZSIsIl9Db21wb25lbnQxMSIsIl90aGlzMTMiLCJfdGhpczE0IiwiRmxlZXRNYW5hZ2VtZW50X2NsYXNzQ2FsbENoZWNrIiwiRmxlZXRNYW5hZ2VtZW50X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJGbGVldE1hbmFnZW1lbnRfZ2V0UHJvdG90eXBlT2YiLCJnZXRGbGVldERhdGEiLCJpc1B1YmxpYyIsImdldFdhaXRsaXN0RGF0YSIsInN0YXR1c0NvZGUiLCJnZXRGY1NldHRpbmdzIiwiYm9zc1BpbG90IiwiZ2V0TWVtYmVycyIsImN5bm9BcnIiLCJmbGVldFByaXZhdGUiLCJub0ZsZWV0Qm9zcyIsIm5lZWRDeW5vcyIsImZsZWV0U2l6ZSIsImZsZWV0U2l6ZUNsYXNzIiwiaGFzRmxlZXRCb3NzIiwiZmxlZXRDeW5vcyIsIldhaXRsaXN0X1dhaXRsaXN0IiwiZ2V0V2FpdGxpc3QiLCJnZXRGbGVldFdpbmdzIiwiU2lkZVBhbmVsX1NpZGVQYW5lbEJ1dHRvbiIsIkZsZWV0R2xhbmNlX0ZsZWV0R2xhbmNlIiwiU2lkZVBhbmVsX1NpZGVQYW5lbCIsIkZsZWV0U2V0dGluZ3NfQm9zcyIsImdldFNldHRpbmdzIiwiRmxlZXRTZXR0aW5nc19CYWNrc2VhdCIsImJhY2tzZWF0QWNjb3VudCIsIkZsZWV0U2V0dGluZ3NfTXVtYmxlIiwiZ2V0RmxlZXRTZXR0aW5ncyIsIkZsZWV0U2V0dGluZ3NfVHlwZSIsIkZsZWV0U2V0dGluZ3NfU3RhdHVzIiwicHVibGljIiwiRmxlZXRTZXR0aW5nc19CdG5DbG9zZSIsIkZsZWV0U2V0dGluZ3NfQnRuQ2xlYXIiLCJGbGVldFNldHRpbmdzX0J0bkludkFsbCIsIkZsZWV0U2V0dGluZ3NfQnRuSW52RmF4ZXMiLCJGbGVldFNldHRpbmdzX0V4aXRDeW5vX0FkZCIsIkZsZWV0U2V0dGluZ3NfRXhpdEN5bm8iLCJGbGVldE1hbmFnZW1lbnRfSW5kZXgiLCJVc2VyU2V0dGluZ3MiLCJqYWJiZXJOb3RpZmljYXRpb25zIiwibm90aWZpY2F0aW9uc0VuYWJsZWQiLCJoYW5kbGVDaGVja2JveENsaWNrIiwiRml0dGluZ3MiLCJGaXR0aW5nc19jbGFzc0NhbGxDaGVjayIsIkZpdHRpbmdzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJGaXR0aW5nc19nZXRQcm90b3R5cGVPZiIsImZpdFVybCIsIm5ld0ZpdCIsImFjdGl2ZUZpdHMiLCJnZXRGaXRzIiwiRml0dGluZ3NfU3VibWl0Rml0Iiwic2F2ZUZpdCIsIkZpdHRpbmdzX0ZpdFJvdyIsImRlbGV0ZUZpdCIsIkZpdHRpbmdzX0ZpdHRpbmdzSGVscE1vZGFsIiwiRml0Um93IiwiRml0dGluZ3NfaW5oZXJpdHMiLCJGaXR0aW5nc19jcmVhdGVDbGFzcyIsIkZpdHRpbmdzSGVscE1vZGFsIiwiYXV0b3BsYXkiLCJsb29wIiwiU3VibWl0Rml0IiwiQWNjb3VudFNldHRpbmdzIiwiQWNjb3VudFNldHRpbmdzX2NsYXNzQ2FsbENoZWNrIiwiQWNjb3VudFNldHRpbmdzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJBY2NvdW50U2V0dGluZ3NfZ2V0UHJvdG90eXBlT2YiLCJVc2VyU2V0dGluZ3NfVXNlclNldHRpbmdzIiwiRml0dGluZ3NfRml0dGluZ3MiLCJBY2NvdW50U2V0dGluZ3NfQWNjb3VudFNldHRpbmdzIiwiQ2FyZCIsImhlYWRpbmciLCJTeXN0ZW1TZXR0aW5ncyIsIlN5c3RlbVNldHRpbmdzX2NsYXNzQ2FsbENoZWNrIiwiU3lzdGVtU2V0dGluZ3NfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN5c3RlbVNldHRpbmdzX2dldFByb3RvdHlwZU9mIiwic2hpcElucHV0IiwiUmVhY3QiLCJxdWV1ZV9pZCIsInNoaXBfbmFtZSIsInNoaXBfaWQiLCJzaGlwUXVldWVfUm93Iiwic2hpcFF1ZXVlX0Ryb3Bkb3duT3B0aW9ucyIsImh1bGwiLCJ1cGRhdGVTaGlwIiwiTmV3UXVldWVBc3NpZ25tZW50IiwiQ2FyZF9DYXJkIiwiU3lzdGVtU2V0dGluZ3NfU3lzdGVtU2V0dGluZ3MiLCJQaWxvdFNlbGVjdCIsIlBpbG90U2VsZWN0X2NsYXNzQ2FsbENoZWNrIiwiUGlsb3RTZWxlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlBpbG90U2VsZWN0X2dldFByb3RvdHlwZU9mIiwibG9naW5DYXJkcyIsImdldFBpbG90cyIsIlBpbG90U2VsZWN0X0xvZ2luQ2FyZCIsIlBpbG90U2VsZWN0X0FkZEFjY291bnRDYXJkIiwiQWRkQWNjb3VudENhcmQiLCJQaWxvdFNlbGVjdF9pbmhlcml0cyIsIlBpbG90U2VsZWN0X2NyZWF0ZUNsYXNzIiwiTG9naW5DYXJkIiwiZXNpVmFsaWQiLCIyMDAiLCJlc2kiLCJpc0VzaVZhaWxkIiwic2V0TWFpblBpbG90IiwiUGlsb3RTZWxlY3RfUGlsb3RTZWxlY3QiLCJUcUNsb2NrIiwiVHFDbG9ja19jbGFzc0NhbGxDaGVjayIsIlRxQ2xvY2tfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlRxQ2xvY2tfZ2V0UHJvdG90eXBlT2YiLCJUcUNsb2NrX2luaGVyaXRzIiwiaW50ZXJ2YWxJRCIsInRpY2siLCJmb3JtYXREYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIlRxQ2xvY2tfVHFDbG9jayIsIlRxU3RhdHVzIiwiVHFTdGF0dXNfY2xhc3NDYWxsQ2hlY2siLCJUcVN0YXR1c19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiVHFTdGF0dXNfZ2V0UHJvdG90eXBlT2YiLCJ0cV9zdGF0dXMiLCJUcVN0YXR1c19pbmhlcml0cyIsImdldEpTT04iLCJwbGF5ZXJzIiwidmlwIiwidG9Mb2NhbGVTdHJpbmciLCJUcVN0YXR1c19UcVN0YXR1cyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNB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SUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUVBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBQUFDLElBQUEsTUF1dEJBQyxHQUFBNU0sR0FudEJBLENBQ0E2TSxJQUFBLFFBQ0FDLElBQUEsT0FDQUMsSUFBQSxPQUNBQyxJQUFBLFNBQ0F2UixJQUFBLFVBdXRC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QUlmeEUsRUFBQTUvQyxFQUFBcjdDLGNBQUEsT0FBS25DLFVBQVUsNENBQ1hvOUYsRUFBQTUvQyxFQUFBcjdDLGNBQUEsT0FBS25DLFVBQVMsUUFBQWd0QyxPQUFVNDBELEVBQU0sUUFBOUIsT0FDU0EsRUFBT3g2Rix3Q0F4RGhDaTRHLEVBQUEsR0ErRElyaUgsU0FBU3kzRixlQUFlLGFBQ3hCM25DLGlCQUFPc3dDLEVBQUE1L0MsRUFBQXI3QyxjQUFDNDlHLEdBQUQsTUFBYy9pSCxTQUFTeTNGLGVBQWUsK0JDdENqRHZDLEVBQUUsZUFBZStGLE1BQU0sV0FDbkIvRixFQUFFLG9CQUFvQlksWUFBWSxVQUNsQ1osRUFBRSxlQUFlWSxZQUFZIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2NsYXNzLCBfY2xhc3MyLCBfdGVtcDtcblxuLyogRGVjb3JhdGVycyAqL1xuXG5cbi8qIFV0aWxzICovXG5cblxuLyogQ1NTICovXG5cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfc3RhdGljTWV0aG9kcyA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9zdGF0aWNNZXRob2RzJyk7XG5cbnZhciBfc3RhdGljTWV0aG9kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdGF0aWNNZXRob2RzKTtcblxudmFyIF93aW5kb3dMaXN0ZW5lciA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy93aW5kb3dMaXN0ZW5lcicpO1xuXG52YXIgX3dpbmRvd0xpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpbmRvd0xpc3RlbmVyKTtcblxudmFyIF9jdXN0b21FdmVudCA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9jdXN0b21FdmVudCcpO1xuXG52YXIgX2N1c3RvbUV2ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2N1c3RvbUV2ZW50KTtcblxudmFyIF9pc0NhcHR1cmUgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvaXNDYXB0dXJlJyk7XG5cbnZhciBfaXNDYXB0dXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQ2FwdHVyZSk7XG5cbnZhciBfZ2V0RWZmZWN0ID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2dldEVmZmVjdCcpO1xuXG52YXIgX2dldEVmZmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRFZmZlY3QpO1xuXG52YXIgX3RyYWNrUmVtb3ZhbCA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy90cmFja1JlbW92YWwnKTtcblxudmFyIF90cmFja1JlbW92YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhY2tSZW1vdmFsKTtcblxudmFyIF9nZXRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0UG9zaXRpb24nKTtcblxudmFyIF9nZXRQb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQb3NpdGlvbik7XG5cbnZhciBfZ2V0VGlwQ29udGVudCA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0VGlwQ29udGVudCcpO1xuXG52YXIgX2dldFRpcENvbnRlbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0VGlwQ29udGVudCk7XG5cbnZhciBfYXJpYSA9IHJlcXVpcmUoJy4vdXRpbHMvYXJpYScpO1xuXG52YXIgX25vZGVMaXN0VG9BcnJheSA9IHJlcXVpcmUoJy4vdXRpbHMvbm9kZUxpc3RUb0FycmF5Jyk7XG5cbnZhciBfbm9kZUxpc3RUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX25vZGVMaXN0VG9BcnJheSk7XG5cbnZhciBfc3R5bGUgPSByZXF1aXJlKCcuL3N0eWxlJyk7XG5cbnZhciBfc3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3R5bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdFRvb2x0aXAgPSAoMCwgX3N0YXRpY01ldGhvZHMyLmRlZmF1bHQpKF9jbGFzcyA9ICgwLCBfd2luZG93TGlzdGVuZXIyLmRlZmF1bHQpKF9jbGFzcyA9ICgwLCBfY3VzdG9tRXZlbnQyLmRlZmF1bHQpKF9jbGFzcyA9ICgwLCBfaXNDYXB0dXJlMi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX2dldEVmZmVjdDIuZGVmYXVsdCkoX2NsYXNzID0gKDAsIF90cmFja1JlbW92YWwyLmRlZmF1bHQpKF9jbGFzcyA9IChfdGVtcCA9IF9jbGFzczIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVhY3RUb29sdGlwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWFjdFRvb2x0aXAocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhY3RUb29sdGlwKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZWFjdFRvb2x0aXAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZWFjdFRvb2x0aXApKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHBsYWNlOiBwcm9wcy5wbGFjZSB8fCAndG9wJywgLy8gRGlyZWN0aW9uIG9mIHRvb2x0aXBcbiAgICAgIGRlc2lyZWRQbGFjZTogcHJvcHMucGxhY2UgfHwgJ3RvcCcsXG4gICAgICB0eXBlOiAnZGFyaycsIC8vIENvbG9yIHRoZW1lIG9mIHRvb2x0aXBcbiAgICAgIGVmZmVjdDogJ2Zsb2F0JywgLy8gZmxvYXQgb3IgZml4ZWRcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgYm9yZGVyOiBmYWxzZSxcbiAgICAgIG9mZnNldDoge30sXG4gICAgICBleHRyYUNsYXNzOiAnJyxcbiAgICAgIGh0bWw6IGZhbHNlLFxuICAgICAgZGVsYXlIaWRlOiAwLFxuICAgICAgZGVsYXlTaG93OiAwLFxuICAgICAgZXZlbnQ6IHByb3BzLmV2ZW50IHx8IG51bGwsXG4gICAgICBldmVudE9mZjogcHJvcHMuZXZlbnRPZmYgfHwgbnVsbCxcbiAgICAgIGN1cnJlbnRFdmVudDogbnVsbCwgLy8gQ3VycmVudCBtb3VzZSBldmVudFxuICAgICAgY3VycmVudFRhcmdldDogbnVsbCwgLy8gQ3VycmVudCB0YXJnZXQgb2YgbW91c2UgZXZlbnRcbiAgICAgIGFyaWFQcm9wczogKDAsIF9hcmlhLnBhcnNlQXJpYSkocHJvcHMpLCAvLyBhcmlhLSBhbmQgcm9sZSBhdHRyaWJ1dGVzXG4gICAgICBpc0VtcHR5VGlwOiBmYWxzZSxcbiAgICAgIGRpc2FibGU6IGZhbHNlLFxuICAgICAgb3JpZ2luVG9vbHRpcDogbnVsbCxcbiAgICAgIGlzTXVsdGlsaW5lOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5iaW5kKFsnc2hvd1Rvb2x0aXAnLCAndXBkYXRlVG9vbHRpcCcsICdoaWRlVG9vbHRpcCcsICdnZXRUb29sdGlwQ29udGVudCcsICdnbG9iYWxSZWJ1aWxkJywgJ2dsb2JhbFNob3cnLCAnZ2xvYmFsSGlkZScsICdvbldpbmRvd1Jlc2l6ZScsICdtb3VzZU9uVG9vbFRpcCddKTtcblxuICAgIF90aGlzLm1vdW50ID0gdHJ1ZTtcbiAgICBfdGhpcy5kZWxheVNob3dMb29wID0gbnVsbDtcbiAgICBfdGhpcy5kZWxheUhpZGVMb29wID0gbnVsbDtcbiAgICBfdGhpcy5kZWxheVJlc2hvdyA9IG51bGw7XG4gICAgX3RoaXMuaW50ZXJ2YWxVcGRhdGVDb250ZW50ID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAvKipcbiAgICogRm9yIHVuaWZ5IHRoZSBiaW5kIGFuZCB1bmJpbmQgbGlzdGVuZXJcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUmVhY3RUb29sdGlwLCBbe1xuICAgIGtleTogJ2JpbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiaW5kKG1ldGhvZEFycmF5KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgbWV0aG9kQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIF90aGlzMlttZXRob2RdID0gX3RoaXMyW21ldGhvZF0uYmluZChfdGhpczIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGluc2VjdXJlID0gX3Byb3BzLmluc2VjdXJlLFxuICAgICAgICAgIHJlc2l6ZUhpZGUgPSBfcHJvcHMucmVzaXplSGlkZTtcblxuICAgICAgaWYgKGluc2VjdXJlKSB7XG4gICAgICAgIHRoaXMuc2V0U3R5bGVIZWFkZXIoKTsgLy8gU2V0IHRoZSBzdHlsZSB0byB0aGUgPGxpbms+XG4gICAgICB9XG4gICAgICB0aGlzLmJpbmRMaXN0ZW5lcigpOyAvLyBCaW5kIGxpc3RlbmVyIGZvciB0b29sdGlwXG4gICAgICB0aGlzLmJpbmRXaW5kb3dFdmVudHMocmVzaXplSGlkZSk7IC8vIEJpbmQgZ2xvYmFsIGV2ZW50IGZvciBzdGF0aWMgbWV0aG9kXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMocHJvcHMpIHtcbiAgICAgIHZhciBhcmlhUHJvcHMgPSB0aGlzLnN0YXRlLmFyaWFQcm9wcztcblxuICAgICAgdmFyIG5ld0FyaWFQcm9wcyA9ICgwLCBfYXJpYS5wYXJzZUFyaWEpKHByb3BzKTtcblxuICAgICAgdmFyIGlzQ2hhbmdlZCA9IE9iamVjdC5rZXlzKG5ld0FyaWFQcm9wcykuc29tZShmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIG5ld0FyaWFQcm9wc1twcm9wc10gIT09IGFyaWFQcm9wc1twcm9wc107XG4gICAgICB9KTtcbiAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFyaWFQcm9wczogbmV3QXJpYVByb3BzIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50ID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xuXG4gICAgICB0aGlzLnVuYmluZExpc3RlbmVyKCk7XG4gICAgICB0aGlzLnJlbW92ZVNjcm9sbExpc3RlbmVyKCk7XG4gICAgICB0aGlzLnVuYmluZFdpbmRvd0V2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBpZiB0aGUgbW91c2UgaXMgb24gdGhlIHRvb2x0aXAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgLSBtb3VzZSBpcyBvbiB0aGUgdG9vbHRpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtb3VzZU9uVG9vbFRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdXNlT25Ub29sVGlwKCkge1xuICAgICAgdmFyIHNob3cgPSB0aGlzLnN0YXRlLnNob3c7XG5cblxuICAgICAgaWYgKHNob3cgJiYgdGhpcy50b29sdGlwUmVmKSB7XG4gICAgICAgIC8qIG9sZCBJRSBvciBGaXJlZm94IHdvcmsgYXJvdW5kICovXG4gICAgICAgIGlmICghdGhpcy50b29sdGlwUmVmLm1hdGNoZXMpIHtcbiAgICAgICAgICAvKiBvbGQgSUUgd29yayBhcm91bmQgKi9cbiAgICAgICAgICBpZiAodGhpcy50b29sdGlwUmVmLm1zTWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBSZWYubWF0Y2hlcyA9IHRoaXMudG9vbHRpcFJlZi5tc01hdGNoZXNTZWxlY3RvcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogb2xkIEZpcmVmb3ggd29yayBhcm91bmQgKi9cbiAgICAgICAgICAgIHRoaXMudG9vbHRpcFJlZi5tYXRjaGVzID0gdGhpcy50b29sdGlwUmVmLm1vek1hdGNoZXNTZWxlY3RvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHRpcFJlZi5tYXRjaGVzKCc6aG92ZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGljayBvdXQgY29ycmVzcG9uZGVkIHRhcmdldCBlbGVtZW50c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUYXJnZXRBcnJheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhcmdldEFycmF5KGlkKSB7XG4gICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB2b2lkIDA7XG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHRhcmdldEFycmF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwXTpub3QoW2RhdGEtZm9yXSknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gaWQucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyk7XG4gICAgICAgIHRhcmdldEFycmF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwXVtkYXRhLWZvcj1cIicgKyBlc2NhcGVkICsgJ1wiXScpO1xuICAgICAgfVxuICAgICAgLy8gdGFyZ2V0QXJyYXkgaXMgYSBOb2RlTGlzdCwgY29udmVydCBpdCB0byBhIHJlYWwgYXJyYXlcbiAgICAgIHJldHVybiAoMCwgX25vZGVMaXN0VG9BcnJheTIuZGVmYXVsdCkodGFyZ2V0QXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJpbmQgbGlzdGVuZXIgdG8gdGhlIHRhcmdldCBlbGVtZW50c1xuICAgICAqIFRoZXNlIGxpc3RlbmVycyB1c2VkIHRvIHRyaWdnZXIgc2hvd2luZyBvciBoaWRpbmcgdGhlIHRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYmluZExpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZExpc3RlbmVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpZCA9IF9wcm9wczIuaWQsXG4gICAgICAgICAgZ2xvYmFsRXZlbnRPZmYgPSBfcHJvcHMyLmdsb2JhbEV2ZW50T2ZmLFxuICAgICAgICAgIGlzQ2FwdHVyZSA9IF9wcm9wczIuaXNDYXB0dXJlO1xuXG4gICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KGlkKTtcblxuICAgICAgdGFyZ2V0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gX3RoaXMzLmlzQ2FwdHVyZSh0YXJnZXQpO1xuICAgICAgICB2YXIgZWZmZWN0ID0gX3RoaXMzLmdldEVmZmVjdCh0YXJnZXQpO1xuICAgICAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnY3VycmVudEl0ZW0nKSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJywgJ2ZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLnVuYmluZEJhc2ljTGlzdGVuZXIodGFyZ2V0KTtcblxuICAgICAgICBpZiAoX3RoaXMzLmlzQ3VzdG9tRXZlbnQodGFyZ2V0KSkge1xuICAgICAgICAgIF90aGlzMy5jdXN0b21CaW5kTGlzdGVuZXIodGFyZ2V0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIF90aGlzMy5zaG93VG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICAgIGlmIChlZmZlY3QgPT09ICdmbG9hdCcpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMzLnVwZGF0ZVRvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgX3RoaXMzLmhpZGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBHbG9iYWwgZXZlbnQgdG8gaGlkZSB0b29sdGlwXG4gICAgICBpZiAoZ2xvYmFsRXZlbnRPZmYpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZ2xvYmFsRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihnbG9iYWxFdmVudE9mZiwgdGhpcy5oaWRlVG9vbHRpcCwgaXNDYXB0dXJlKTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJhY2sgcmVtb3ZhbCBvZiB0YXJnZXRBcnJheSBlbGVtZW50cyBmcm9tIERPTVxuICAgICAgdGhpcy5iaW5kUmVtb3ZhbFRyYWNrZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmQgbGlzdGVuZXJzIG9uIHRhcmdldCBlbGVtZW50c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bmJpbmRMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZExpc3RlbmVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpZCA9IF9wcm9wczMuaWQsXG4gICAgICAgICAgZ2xvYmFsRXZlbnRPZmYgPSBfcHJvcHMzLmdsb2JhbEV2ZW50T2ZmO1xuXG4gICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KGlkKTtcbiAgICAgIHRhcmdldEFycmF5LmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBfdGhpczQudW5iaW5kQmFzaWNMaXN0ZW5lcih0YXJnZXQpO1xuICAgICAgICBpZiAoX3RoaXM0LmlzQ3VzdG9tRXZlbnQodGFyZ2V0KSkgX3RoaXM0LmN1c3RvbVVuYmluZExpc3RlbmVyKHRhcmdldCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGdsb2JhbEV2ZW50T2ZmKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihnbG9iYWxFdmVudE9mZiwgdGhpcy5oaWRlVG9vbHRpcCk7XG4gICAgICB0aGlzLnVuYmluZFJlbW92YWxUcmFja2VyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgYmVmb3JlIGJpbmQgbGlzdGVuZXIgYW5kIHVtbW91bnQgdGhlIGNvbXBvbnRcbiAgICAgKiBpdCBpcyBuZWNlc3NhcnkgdG8gaW52bG9rZSB0aGlzIGV2ZW4gd2hlbiBiaW5kaW5nIGN1c3RvbSBldmVudFxuICAgICAqIHNvIHRoYXQgdGhlIHRvb2x0aXAgY2FuIHN3aXRjaCBiZXR3ZWVuIGN1c3RvbSBhbmQgZGVmYXVsdCBsaXN0ZW5lclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bmJpbmRCYXNpY0xpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kQmFzaWNMaXN0ZW5lcih0YXJnZXQpIHtcbiAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gdGhpcy5pc0NhcHR1cmUodGFyZ2V0KTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5zaG93VG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy51cGRhdGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5oaWRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VG9vbHRpcENvbnRlbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb29sdGlwQ29udGVudCgpIHtcbiAgICAgIHZhciBfcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBnZXRDb250ZW50ID0gX3Byb3BzNC5nZXRDb250ZW50LFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzNC5jaGlsZHJlbjtcblxuICAgICAgLy8gR2VuZXJhdGUgdG9vbHRpcCBjb250ZW50XG5cbiAgICAgIHZhciBjb250ZW50ID0gdm9pZCAwO1xuICAgICAgaWYgKGdldENvbnRlbnQpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZ2V0Q29udGVudCkpIHtcbiAgICAgICAgICBjb250ZW50ID0gZ2V0Q29udGVudFswXSAmJiBnZXRDb250ZW50WzBdKHRoaXMuc3RhdGUub3JpZ2luVG9vbHRpcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGVudCA9IGdldENvbnRlbnQodGhpcy5zdGF0ZS5vcmlnaW5Ub29sdGlwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKDAsIF9nZXRUaXBDb250ZW50Mi5kZWZhdWx0KSh0aGlzLnN0YXRlLm9yaWdpblRvb2x0aXAsIGNoaWxkcmVuLCBjb250ZW50LCB0aGlzLnN0YXRlLmlzTXVsdGlsaW5lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc0VtcHR5VGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNFbXB0eVRpcChwbGFjZWhvbGRlcikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwbGFjZWhvbGRlciA9PT0gJ3N0cmluZycgJiYgcGxhY2Vob2xkZXIgPT09ICcnIHx8IHBsYWNlaG9sZGVyID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gbW91c2UgZW50ZXIsIHNob3cgdGhlIHRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2hvd1Rvb2x0aXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93VG9vbHRpcChlLCBpc0dsb2JhbENhbGwpIHtcbiAgICAgIGlmIChpc0dsb2JhbENhbGwpIHtcbiAgICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBvdGhlciBlbGVtZW50cyBiZWxvbmdzIHRvIG90aGVyIFJlYWN0VG9vbHRpcFxuICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KHRoaXMucHJvcHMuaWQpO1xuICAgICAgICB2YXIgaXNNeUVsZW1lbnQgPSB0YXJnZXRBcnJheS5zb21lKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlID09PSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzTXlFbGVtZW50KSByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBHZXQgdGhlIHRvb2x0aXAgY29udGVudFxuICAgICAgLy8gY2FsY3VsYXRlIGluIHRoaXMgcGhyYXNlIHNvIHRoYXQgdGlwIHdpZHRoIGhlaWdodCBjYW4gYmUgZGV0ZWN0ZWRcbiAgICAgIHZhciBfcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfcHJvcHM1Lm11bHRpbGluZSxcbiAgICAgICAgICBnZXRDb250ZW50ID0gX3Byb3BzNS5nZXRDb250ZW50O1xuXG4gICAgICB2YXIgb3JpZ2luVG9vbHRpcCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwJyk7XG4gICAgICB2YXIgaXNNdWx0aWxpbmUgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW11bHRpbGluZScpIHx8IG11bHRpbGluZSB8fCBmYWxzZTtcblxuICAgICAgLy8gSWYgaXQgaXMgZm9jdXMgZXZlbnQgb3IgY2FsbGVkIGJ5IFJlYWN0VG9vbHRpcC5zaG93LCBzd2l0Y2ggdG8gYHNvbGlkYCBlZmZlY3RcbiAgICAgIHZhciBzd2l0Y2hUb1NvbGlkID0gZSBpbnN0YW5jZW9mIHdpbmRvdy5Gb2N1c0V2ZW50IHx8IGlzR2xvYmFsQ2FsbDtcblxuICAgICAgLy8gaWYgaXQgbmVlZHMgdG8gc2tpcCBhZGRpbmcgaGlkZSBsaXN0ZW5lciB0byBzY3JvbGxcbiAgICAgIHZhciBzY3JvbGxIaWRlID0gdHJ1ZTtcbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1oaWRlJykpIHtcbiAgICAgICAgc2Nyb2xsSGlkZSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWhpZGUnKSA9PT0gJ3RydWUnO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNjcm9sbEhpZGUgIT0gbnVsbCkge1xuICAgICAgICBzY3JvbGxIaWRlID0gdGhpcy5wcm9wcy5zY3JvbGxIaWRlO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGNvcnJlY3QgcGxhY2UgaXMgc2V0XG4gICAgICB2YXIgZGVzaXJlZFBsYWNlID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wbGFjZScpIHx8IHRoaXMucHJvcHMucGxhY2UgfHwgJ3RvcCc7XG4gICAgICB2YXIgZWZmZWN0ID0gc3dpdGNoVG9Tb2xpZCAmJiAnc29saWQnIHx8IHRoaXMuZ2V0RWZmZWN0KGUuY3VycmVudFRhcmdldCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1vZmZzZXQnKSB8fCB0aGlzLnByb3BzLm9mZnNldCB8fCB7fTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgX2dldFBvc2l0aW9uMi5kZWZhdWx0KShlLCBlLmN1cnJlbnRUYXJnZXQsIF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKSwgZGVzaXJlZFBsYWNlLCBkZXNpcmVkUGxhY2UsIGVmZmVjdCwgb2Zmc2V0KTtcbiAgICAgIHZhciBwbGFjZSA9IHJlc3VsdC5pc05ld1N0YXRlID8gcmVzdWx0Lm5ld1N0YXRlLnBsYWNlIDogZGVzaXJlZFBsYWNlO1xuXG4gICAgICAvLyBUbyBwcmV2ZW50IHByZXZpb3VzbHkgY3JlYXRlZCB0aW1lcnMgZnJvbSB0cmlnZ2VyaW5nXG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcblxuICAgICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcblxuICAgICAgdmFyIHJlc2hvd0RlbGF5ID0gdGhpcy5zdGF0ZS5zaG93ID8gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1kZWxheS11cGRhdGUnKSB8fCB0aGlzLnByb3BzLmRlbGF5VXBkYXRlIDogMDtcblxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICB2YXIgdXBkYXRlU3RhdGUgPSBmdW5jdGlvbiB1cGRhdGVTdGF0ZSgpIHtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3JpZ2luVG9vbHRpcDogb3JpZ2luVG9vbHRpcCxcbiAgICAgICAgICBpc011bHRpbGluZTogaXNNdWx0aWxpbmUsXG4gICAgICAgICAgZGVzaXJlZFBsYWNlOiBkZXNpcmVkUGxhY2UsXG4gICAgICAgICAgcGxhY2U6IHBsYWNlLFxuICAgICAgICAgIHR5cGU6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpIHx8IHNlbGYucHJvcHMudHlwZSB8fCAnZGFyaycsXG4gICAgICAgICAgZWZmZWN0OiBlZmZlY3QsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgaHRtbDogdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1odG1sJykgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWh0bWwnKSA9PT0gJ3RydWUnIDogc2VsZi5wcm9wcy5odG1sIHx8IGZhbHNlLFxuICAgICAgICAgIGRlbGF5U2hvdzogdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1kZWxheS1zaG93JykgfHwgc2VsZi5wcm9wcy5kZWxheVNob3cgfHwgMCxcbiAgICAgICAgICBkZWxheUhpZGU6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVsYXktaGlkZScpIHx8IHNlbGYucHJvcHMuZGVsYXlIaWRlIHx8IDAsXG4gICAgICAgICAgZGVsYXlVcGRhdGU6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVsYXktdXBkYXRlJykgfHwgc2VsZi5wcm9wcy5kZWxheVVwZGF0ZSB8fCAwLFxuICAgICAgICAgIGJvcmRlcjogdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1ib3JkZXInKSA/IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYm9yZGVyJykgPT09ICd0cnVlJyA6IHNlbGYucHJvcHMuYm9yZGVyIHx8IGZhbHNlLFxuICAgICAgICAgIGV4dHJhQ2xhc3M6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xhc3MnKSB8fCBzZWxmLnByb3BzLmNsYXNzIHx8IHNlbGYucHJvcHMuY2xhc3NOYW1lIHx8ICcnLFxuICAgICAgICAgIGRpc2FibGU6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwLWRpc2FibGUnKSA/IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwLWRpc2FibGUnKSA9PT0gJ3RydWUnIDogc2VsZi5wcm9wcy5kaXNhYmxlIHx8IGZhbHNlLFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IHRhcmdldFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHNjcm9sbEhpZGUpIHNlbGYuYWRkU2Nyb2xsTGlzdGVuZXIoc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICBzZWxmLnVwZGF0ZVRvb2x0aXAoZSk7XG5cbiAgICAgICAgICBpZiAoZ2V0Q29udGVudCAmJiBBcnJheS5pc0FycmF5KGdldENvbnRlbnQpKSB7XG4gICAgICAgICAgICBzZWxmLmludGVydmFsVXBkYXRlQ29udGVudCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbGYubW91bnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2dldENvbnRlbnQgPSBzZWxmLnByb3BzLmdldENvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSAoMCwgX2dldFRpcENvbnRlbnQyLmRlZmF1bHQpKG9yaWdpblRvb2x0aXAsICcnLCBfZ2V0Q29udGVudFswXSgpLCBpc011bHRpbGluZSk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRW1wdHlUaXAgPSBzZWxmLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgaXNFbXB0eVRpcDogaXNFbXB0eVRpcFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZ2V0Q29udGVudFsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGRlbGF5IGNhbGwgaW1tZWRpYXRlbHksIGRvbid0IGFsbG93IGV2ZW50cyB0byBnZXQgaW4gZmlyc3QuXG4gICAgICBpZiAocmVzaG93RGVsYXkpIHtcbiAgICAgICAgdGhpcy5kZWxheVJlc2hvdyA9IHNldFRpbWVvdXQodXBkYXRlU3RhdGUsIHJlc2hvd0RlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBtb3VzZSBob3ZlciwgdXBkYXRldG9vbHRpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVUb29sdGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVG9vbHRpcChlKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgZGVsYXlTaG93ID0gX3N0YXRlLmRlbGF5U2hvdyxcbiAgICAgICAgICBkaXNhYmxlID0gX3N0YXRlLmRpc2FibGU7XG4gICAgICB2YXIgYWZ0ZXJTaG93ID0gdGhpcy5wcm9wcy5hZnRlclNob3c7XG5cbiAgICAgIHZhciBwbGFjZWhvbGRlciA9IHRoaXMuZ2V0VG9vbHRpcENvbnRlbnQoKTtcbiAgICAgIHZhciBkZWxheVRpbWUgPSBwYXJzZUludChkZWxheVNob3csIDEwKTtcbiAgICAgIHZhciBldmVudFRhcmdldCA9IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldDtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIG1vdXNlIGlzIGFjdHVhbGx5IG92ZXIgdGhlIHRvb2x0aXAsIGlmIHNvIGRvbid0IGhpZGUgdGhlIHRvb2x0aXBcbiAgICAgIGlmICh0aGlzLm1vdXNlT25Ub29sVGlwKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0VtcHR5VGlwKHBsYWNlaG9sZGVyKSB8fCBkaXNhYmxlKSByZXR1cm47IC8vIGlmIHRoZSB0b29sdGlwIGlzIGVtcHR5LCBkaXNhYmxlIHRoZSB0b29sdGlwXG4gICAgICB2YXIgdXBkYXRlU3RhdGUgPSBmdW5jdGlvbiB1cGRhdGVTdGF0ZSgpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGxhY2Vob2xkZXIpICYmIHBsYWNlaG9sZGVyLmxlbmd0aCA+IDAgfHwgcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICB2YXIgaXNJbnZpc2libGUgPSAhX3RoaXM1LnN0YXRlLnNob3c7XG4gICAgICAgICAgX3RoaXM1LnNldFN0YXRlKHtcbiAgICAgICAgICAgIGN1cnJlbnRFdmVudDogZSxcbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IGV2ZW50VGFyZ2V0LFxuICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzNS51cGRhdGVQb3NpdGlvbigpO1xuICAgICAgICAgICAgaWYgKGlzSW52aXNpYmxlICYmIGFmdGVyU2hvdykgYWZ0ZXJTaG93KGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVNob3dMb29wKTtcbiAgICAgIGlmIChkZWxheVNob3cpIHtcbiAgICAgICAgdGhpcy5kZWxheVNob3dMb29wID0gc2V0VGltZW91dCh1cGRhdGVTdGF0ZSwgZGVsYXlUaW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAqIElmIHdlJ3JlIG1vdXNpbmcgb3ZlciB0aGUgdG9vbHRpcCByZW1vdmUgaXQgd2hlbiB3ZSBsZWF2ZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGlzdGVuRm9yVG9vbHRpcEV4aXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5Gb3JUb29sdGlwRXhpdCgpIHtcbiAgICAgIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuXG5cbiAgICAgIGlmIChzaG93ICYmIHRoaXMudG9vbHRpcFJlZikge1xuICAgICAgICB0aGlzLnRvb2x0aXBSZWYuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZUxpc3RlbmVyRm9yVG9vbHRpcEV4aXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lckZvclRvb2x0aXBFeGl0KCkge1xuICAgICAgdmFyIHNob3cgPSB0aGlzLnN0YXRlLnNob3c7XG5cblxuICAgICAgaWYgKHNob3cgJiYgdGhpcy50b29sdGlwUmVmKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcFJlZi5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5oaWRlVG9vbHRpcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBtb3VzZSBsZWF2ZSwgaGlkZSB0b29sdGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hpZGVUb29sdGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZVRvb2x0aXAoZSwgaGFzVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRlbGF5SGlkZSA9IF9zdGF0ZTIuZGVsYXlIaWRlLFxuICAgICAgICAgIGRpc2FibGUgPSBfc3RhdGUyLmRpc2FibGU7XG4gICAgICB2YXIgYWZ0ZXJIaWRlID0gdGhpcy5wcm9wcy5hZnRlckhpZGU7XG5cbiAgICAgIHZhciBwbGFjZWhvbGRlciA9IHRoaXMuZ2V0VG9vbHRpcENvbnRlbnQoKTtcbiAgICAgIGlmICghdGhpcy5tb3VudCkgcmV0dXJuO1xuICAgICAgaWYgKHRoaXMuaXNFbXB0eVRpcChwbGFjZWhvbGRlcikgfHwgZGlzYWJsZSkgcmV0dXJuOyAvLyBpZiB0aGUgdG9vbHRpcCBpcyBlbXB0eSwgZGlzYWJsZSB0aGUgdG9vbHRpcFxuICAgICAgaWYgKGhhc1RhcmdldCkge1xuICAgICAgICAvLyBEb24ndCB0cmlnZ2VyIG90aGVyIGVsZW1lbnRzIGJlbG9uZ3MgdG8gb3RoZXIgUmVhY3RUb29sdGlwXG4gICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRoaXMuZ2V0VGFyZ2V0QXJyYXkodGhpcy5wcm9wcy5pZCk7XG4gICAgICAgIHZhciBpc015RWxlbWVudCA9IHRhcmdldEFycmF5LnNvbWUoZnVuY3Rpb24gKGVsZSkge1xuICAgICAgICAgIHJldHVybiBlbGUgPT09IGUuY3VycmVudFRhcmdldDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNNeUVsZW1lbnQgfHwgIXRoaXMuc3RhdGUuc2hvdykgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzZXRTdGF0ZSA9IGZ1bmN0aW9uIHJlc2V0U3RhdGUoKSB7XG4gICAgICAgIHZhciBpc1Zpc2libGUgPSBfdGhpczYuc3RhdGUuc2hvdztcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG1vdXNlIGlzIGFjdHVhbGx5IG92ZXIgdGhlIHRvb2x0aXAsIGlmIHNvIGRvbid0IGhpZGUgdGhlIHRvb2x0aXBcbiAgICAgICAgaWYgKF90aGlzNi5tb3VzZU9uVG9vbFRpcCgpKSB7XG4gICAgICAgICAgX3RoaXM2Lmxpc3RlbkZvclRvb2x0aXBFeGl0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzNi5yZW1vdmVMaXN0ZW5lckZvclRvb2x0aXBFeGl0KCk7XG5cbiAgICAgICAgX3RoaXM2LnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM2LnJlbW92ZVNjcm9sbExpc3RlbmVyKCk7XG4gICAgICAgICAgaWYgKGlzVmlzaWJsZSAmJiBhZnRlckhpZGUpIGFmdGVySGlkZShlKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcbiAgICAgIGlmIChkZWxheUhpZGUpIHtcbiAgICAgICAgdGhpcy5kZWxheUhpZGVMb29wID0gc2V0VGltZW91dChyZXNldFN0YXRlLCBwYXJzZUludChkZWxheUhpZGUsIDEwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHNjcm9sbCBldmVudGxpc3RlbmVyIHdoZW4gdG9vbHRpcCBzaG93XG4gICAgICogYXV0b21hdGljYWxseSBoaWRlIHRoZSB0b29sdGlwIHdoZW4gc2Nyb2xsaW5nXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZFNjcm9sbExpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU2Nyb2xsTGlzdGVuZXIoY3VycmVudFRhcmdldCkge1xuICAgICAgdmFyIGlzQ2FwdHVyZU1vZGUgPSB0aGlzLmlzQ2FwdHVyZShjdXJyZW50VGFyZ2V0KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhpZGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVTY3JvbGxMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVNjcm9sbExpc3RlbmVyKCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0aW9uIHRoZSBwb3NpdGlvblxuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBjdXJyZW50RXZlbnQgPSBfc3RhdGUzLmN1cnJlbnRFdmVudCxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX3N0YXRlMy5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgIHBsYWNlID0gX3N0YXRlMy5wbGFjZSxcbiAgICAgICAgICBkZXNpcmVkUGxhY2UgPSBfc3RhdGUzLmRlc2lyZWRQbGFjZSxcbiAgICAgICAgICBlZmZlY3QgPSBfc3RhdGUzLmVmZmVjdCxcbiAgICAgICAgICBvZmZzZXQgPSBfc3RhdGUzLm9mZnNldDtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIF9nZXRQb3NpdGlvbjIuZGVmYXVsdCkoY3VycmVudEV2ZW50LCBjdXJyZW50VGFyZ2V0LCBub2RlLCBwbGFjZSwgZGVzaXJlZFBsYWNlLCBlZmZlY3QsIG9mZnNldCk7XG5cbiAgICAgIGlmIChyZXN1bHQuaXNOZXdTdGF0ZSkge1xuICAgICAgICAvLyBTd2l0Y2ggdG8gcmV2ZXJzZSBwbGFjZW1lbnRcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUocmVzdWx0Lm5ld1N0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM3LnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gU2V0IHRvb2x0aXAgcG9zaXRpb25cbiAgICAgIG5vZGUuc3R5bGUubGVmdCA9IHJlc3VsdC5wb3NpdGlvbi5sZWZ0ICsgJ3B4JztcbiAgICAgIG5vZGUuc3R5bGUudG9wID0gcmVzdWx0LnBvc2l0aW9uLnRvcCArICdweCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHN0eWxlIHRhZyBpbiBoZWFkZXJcbiAgICAgKiBpbiB0aGlzIHdheSB3ZSBjYW4gaW5zZXJ0IGRlZmF1bHQgY3NzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldFN0eWxlSGVhZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3R5bGVIZWFkZXIoKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICBpZiAoIWhlYWQucXVlcnlTZWxlY3Rvcignc3R5bGVbaWQ9XCJyZWFjdC10b29sdGlwXCJdJykpIHtcbiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHRhZy5pZCA9ICdyZWFjdC10b29sdGlwJztcbiAgICAgICAgdGFnLmlubmVySFRNTCA9IF9zdHlsZTIuZGVmYXVsdDtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgJiYgX193ZWJwYWNrX25vbmNlX18pIHtcbiAgICAgICAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIF9fd2VicGFja19ub25jZV9fKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHRhZywgaGVhZC5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDTGVhciBhbGwga2luZHMgb2YgdGltZW91dCBvZiBpbnRlcnZhbFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhclRpbWVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJUaW1lcigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5U2hvd0xvb3ApO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlIaWRlTG9vcCk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVJlc2hvdyk7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxVcGRhdGVDb250ZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIF9zdGF0ZTQgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGV4dHJhQ2xhc3MgPSBfc3RhdGU0LmV4dHJhQ2xhc3MsXG4gICAgICAgICAgaHRtbCA9IF9zdGF0ZTQuaHRtbCxcbiAgICAgICAgICBhcmlhUHJvcHMgPSBfc3RhdGU0LmFyaWFQcm9wcyxcbiAgICAgICAgICBkaXNhYmxlID0gX3N0YXRlNC5kaXNhYmxlO1xuXG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICB2YXIgaXNFbXB0eVRpcCA9IHRoaXMuaXNFbXB0eVRpcChwbGFjZWhvbGRlcik7XG4gICAgICB2YXIgdG9vbHRpcENsYXNzID0gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSgnX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcCcsIHsgJ3Nob3cnOiB0aGlzLnN0YXRlLnNob3cgJiYgIWRpc2FibGUgJiYgIWlzRW1wdHlUaXAgfSwgeyAnYm9yZGVyJzogdGhpcy5zdGF0ZS5ib3JkZXIgfSwgeyAncGxhY2UtdG9wJzogdGhpcy5zdGF0ZS5wbGFjZSA9PT0gJ3RvcCcgfSwgeyAncGxhY2UtYm90dG9tJzogdGhpcy5zdGF0ZS5wbGFjZSA9PT0gJ2JvdHRvbScgfSwgeyAncGxhY2UtbGVmdCc6IHRoaXMuc3RhdGUucGxhY2UgPT09ICdsZWZ0JyB9LCB7ICdwbGFjZS1yaWdodCc6IHRoaXMuc3RhdGUucGxhY2UgPT09ICdyaWdodCcgfSwgeyAndHlwZS1kYXJrJzogdGhpcy5zdGF0ZS50eXBlID09PSAnZGFyaycgfSwgeyAndHlwZS1zdWNjZXNzJzogdGhpcy5zdGF0ZS50eXBlID09PSAnc3VjY2VzcycgfSwgeyAndHlwZS13YXJuaW5nJzogdGhpcy5zdGF0ZS50eXBlID09PSAnd2FybmluZycgfSwgeyAndHlwZS1lcnJvcic6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ2Vycm9yJyB9LCB7ICd0eXBlLWluZm8nOiB0aGlzLnN0YXRlLnR5cGUgPT09ICdpbmZvJyB9LCB7ICd0eXBlLWxpZ2h0JzogdGhpcy5zdGF0ZS50eXBlID09PSAnbGlnaHQnIH0sIHsgJ2FsbG93X2hvdmVyJzogdGhpcy5wcm9wcy5kZWxheVVwZGF0ZSB9LCB7ICdhbGxvd19jbGljayc6IHRoaXMucHJvcHMuY2xpY2thYmxlIH0pO1xuXG4gICAgICB2YXIgV3JhcHBlciA9IHRoaXMucHJvcHMud3JhcHBlcjtcbiAgICAgIGlmIChSZWFjdFRvb2x0aXAuc3VwcG9ydGVkV3JhcHBlcnMuaW5kZXhPZihXcmFwcGVyKSA8IDApIHtcbiAgICAgICAgV3JhcHBlciA9IFJlYWN0VG9vbHRpcC5kZWZhdWx0UHJvcHMud3JhcHBlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFdyYXBwZXIsIF9leHRlbmRzKHsgY2xhc3NOYW1lOiB0b29sdGlwQ2xhc3MgKyAnICcgKyBleHRyYUNsYXNzLFxuICAgICAgICAgIGlkOiB0aGlzLnByb3BzLmlkLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczgudG9vbHRpcFJlZiA9IF9yZWY7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBhcmlhUHJvcHMsIHtcbiAgICAgICAgICAnZGF0YS1pZCc6ICd0b29sdGlwJyxcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHBsYWNlaG9sZGVyIH0gfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFdyYXBwZXIsXG4gICAgICAgICAgX2V4dGVuZHMoeyBjbGFzc05hbWU6IHRvb2x0aXBDbGFzcyArICcgJyArIGV4dHJhQ2xhc3MsXG4gICAgICAgICAgICBpZDogdGhpcy5wcm9wcy5pZFxuICAgICAgICAgIH0sIGFyaWFQcm9wcywge1xuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZjIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOC50b29sdGlwUmVmID0gX3JlZjI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2RhdGEtaWQnOiAndG9vbHRpcCcgfSksXG4gICAgICAgICAgcGxhY2Vob2xkZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVhY3RUb29sdGlwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KSwgX2NsYXNzMi5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgcGxhY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB0eXBlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZWZmZWN0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb2Zmc2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgbXVsdGlsaW5lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGJvcmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBpbnNlY3VyZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBjbGFzczogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaHRtbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBkZWxheUhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBkZWxheVVwZGF0ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGRlbGF5U2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGV2ZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZXZlbnRPZmY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB3YXRjaFdpbmRvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBpc0NhcHR1cmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZ2xvYmFsRXZlbnRPZmY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBnZXRDb250ZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgYWZ0ZXJTaG93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGFmdGVySGlkZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBkaXNhYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNjcm9sbEhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcmVzaXplSGlkZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB3cmFwcGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY2xpY2thYmxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xcbn0sIF9jbGFzczIuZGVmYXVsdFByb3BzID0ge1xuICBpbnNlY3VyZTogdHJ1ZSxcbiAgcmVzaXplSGlkZTogdHJ1ZSxcbiAgd3JhcHBlcjogJ2RpdicsXG4gIGNsaWNrYWJsZTogZmFsc2Vcbn0sIF9jbGFzczIuc3VwcG9ydGVkV3JhcHBlcnMgPSBbJ2RpdicsICdzcGFuJ10sIF9jbGFzczIuZGlzcGxheU5hbWUgPSAnUmVhY3RUb29sdGlwJywgX3RlbXApKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzO1xuXG4vKiBleHBvcnQgZGVmYXVsdCBub3QgZml0IGZvciBzdGFuZGFsb25lLCBpdCB3aWxsIGV4cG9ydHMge2RlZmF1bHQ6Li4ufSAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUb29sdGlwOyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcblxuICBHTE9CQUw6IHtcbiAgICBISURFOiAnX19yZWFjdF90b29sdGlwX2hpZGVfZXZlbnQnLFxuICAgIFJFQlVJTEQ6ICdfX3JlYWN0X3Rvb2x0aXBfcmVidWlsZF9ldmVudCcsXG4gICAgU0hPVzogJ19fcmVhY3RfdG9vbHRpcF9zaG93X2V2ZW50J1xuICB9XG59OyIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjExJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nLFxuICAgICAgcmVUcmltU3RhcnQgPSAvXlxccysvLFxuICAgICAgcmVUcmltRW5kID0gL1xccyskLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4gIC8qKiBVc2VkIHRvIGFzc2lnbiBkZWZhdWx0IGBjb250ZXh0YCBvYmplY3QgcHJvcGVydGllcy4gKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQnVmZmVyJywgJ0RhdGFWaWV3JywgJ0RhdGUnLCAnRXJyb3InLCAnRmxvYXQzMkFycmF5JywgJ0Zsb2F0NjRBcnJheScsXG4gICAgJ0Z1bmN0aW9uJywgJ0ludDhBcnJheScsICdJbnQxNkFycmF5JywgJ0ludDMyQXJyYXknLCAnTWFwJywgJ01hdGgnLCAnT2JqZWN0JyxcbiAgICAnUHJvbWlzZScsICdSZWdFeHAnLCAnU2V0JywgJ1N0cmluZycsICdTeW1ib2wnLCAnVHlwZUVycm9yJywgJ1VpbnQ4QXJyYXknLFxuICAgICdVaW50OENsYW1wZWRBcnJheScsICdVaW50MTZBcnJheScsICdVaW50MzJBcnJheScsICdXZWFrTWFwJyxcbiAgICAnXycsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAncGFyc2VJbnQnLCAnc2V0VGltZW91dCdcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5LiAqL1xuICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG4gIHZhciBjbG9uZWFibGVUYWdzID0ge307XG4gIGNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBtYXAgTGF0aW4gVW5pY29kZSBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuICovXG4gIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAgICdcXHhjMCc6ICdBJywgICdcXHhjMSc6ICdBJywgJ1xceGMyJzogJ0EnLCAnXFx4YzMnOiAnQScsICdcXHhjNCc6ICdBJywgJ1xceGM1JzogJ0EnLFxuICAgICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAgICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgICAnXFx4ZDAnOiAnRCcsICAnXFx4ZjAnOiAnZCcsXG4gICAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAgICdcXHhjYyc6ICdJJywgICdcXHhjZCc6ICdJJywgJ1xceGNlJzogJ0knLCAnXFx4Y2YnOiAnSScsXG4gICAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICAgJ1xceGQyJzogJ08nLCAgJ1xceGQzJzogJ08nLCAnXFx4ZDQnOiAnTycsICdcXHhkNSc6ICdPJywgJ1xceGQ2JzogJ08nLCAnXFx4ZDgnOiAnTycsXG4gICAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgICAnXFx4ZjknOiAndScsICAnXFx4ZmEnOiAndScsICdcXHhmYic6ICd1JywgJ1xceGZjJzogJ3UnLFxuICAgICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAgICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICAgJ1xceGRlJzogJ1RoJywgJ1xceGZlJzogJ3RoJyxcbiAgICAnXFx4ZGYnOiAnc3MnLFxuICAgIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICAgJ1xcdTAxMDAnOiAnQScsICAnXFx1MDEwMic6ICdBJywgJ1xcdTAxMDQnOiAnQScsXG4gICAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAgICdcXHUwMTA3JzogJ2MnLCAgJ1xcdTAxMDknOiAnYycsICdcXHUwMTBiJzogJ2MnLCAnXFx1MDEwZCc6ICdjJyxcbiAgICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgICAnXFx1MDExMyc6ICdlJywgICdcXHUwMTE1JzogJ2UnLCAnXFx1MDExNyc6ICdlJywgJ1xcdTAxMTknOiAnZScsICdcXHUwMTFiJzogJ2UnLFxuICAgICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICAgJ1xcdTAxMjQnOiAnSCcsICAnXFx1MDEyNic6ICdIJywgJ1xcdTAxMjUnOiAnaCcsICdcXHUwMTI3JzogJ2gnLFxuICAgICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgICAnXFx1MDEzNCc6ICdKJywgICdcXHUwMTM1JzogJ2onLFxuICAgICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAgICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICAgJ1xcdTAxM2EnOiAnbCcsICAnXFx1MDEzYyc6ICdsJywgJ1xcdTAxM2UnOiAnbCcsICdcXHUwMTQwJzogJ2wnLCAnXFx1MDE0Mic6ICdsJyxcbiAgICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAgICdcXHUwMTRjJzogJ08nLCAgJ1xcdTAxNGUnOiAnTycsICdcXHUwMTUwJzogJ08nLFxuICAgICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAgICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAgICdcXHUwMTU1JzogJ3InLCAgJ1xcdTAxNTcnOiAncicsICdcXHUwMTU5JzogJ3InLFxuICAgICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICAgJ1xcdTAxNjInOiAnVCcsICAnXFx1MDE2NCc6ICdUJywgJ1xcdTAxNjYnOiAnVCcsXG4gICAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICAgJ1xcdTAxNjknOiAndScsICAnXFx1MDE2Yic6ICd1JywgJ1xcdTAxNmQnOiAndScsICdcXHUwMTZmJzogJ3UnLCAnXFx1MDE3MSc6ICd1JywgJ1xcdTAxNzMnOiAndScsXG4gICAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgICAnXFx1MDE3OSc6ICdaJywgICdcXHUwMTdiJzogJ1onLCAnXFx1MDE3ZCc6ICdaJyxcbiAgICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgICAnXFx1MDE1Mic6ICdPZScsICdcXHUwMTUzJzogJ29lJyxcbiAgICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xuICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4gKi9cbiAgdmFyIGh0bWxVbmVzY2FwZXMgPSB7XG4gICAgJyZhbXA7JzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmIzM5Oyc6IFwiJ1wiXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIC8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG4gIHZhciBmcmVlUGFyc2VGbG9hdCA9IHBhcnNlRmxvYXQsXG4gICAgICBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbiAgdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG4gIHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbiAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4gIC8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xuICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICAgIGlmICh0eXBlcykge1xuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKCdzb3VyY2VVUkwnIGluIG9wdGlvbnNcbiAgICAgICAgICA/IG9wdGlvbnMuc291cmNlVVJMXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IChsb2Rhc2hGdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgICBuYW1lcyA9IHJlYWxOYW1lc1trZXldIHx8IChyZWFsTmFtZXNba2V5XSA9IFtdKTtcblxuICAgICAgICBuYW1lcy5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImltcG9ydCBpc05hdGl2ZSBmcm9tICcuL2lzTmF0aXZlJztcblxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG5sZXQgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAobGV0IGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgIHRpbWVvdXREdXJhdGlvbiA9IDE7XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIGxldCBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXG4gIC8vIE11dGF0aW9uT2JzZXJ2ZXIgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIHNjaGVkdWxpbmcgbWljcm90YXNrcywgd2hpY2hcbiAgLy8gYXJlIHNjaGVkdWxlZCAqYmVmb3JlKiB0aGUgbmV4dCB0YXNrLiBUaGlzIGdpdmVzIHVzIGEgd2F5IHRvIGRlYm91bmNlXG4gIC8vIGEgZnVuY3Rpb24gYnV0IGVuc3VyZSBpdCdzIGNhbGxlZCAqYmVmb3JlKiB0aGUgbmV4dCBwYWludC5cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgZm4oKTtcbiAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgfSk7XG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCd4LWluZGV4JywgaSk7XG4gICAgICBpID0gaSArIDE7IC8vIGRvbid0IHVzZSBjb21wdW5kICgrPSkgYmVjYXVzZSBpdCBkb2Vzbid0IGdldCBvcHRpbWl6ZWQgaW4gVjhcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgbGV0IHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIEl0J3MgY29tbW9uIGZvciBNdXRhdGlvbk9ic2VydmVyIHBvbHlmaWxscyB0byBiZSBzZWVuIGluIHRoZSB3aWxkLCBob3dldmVyXG4vLyB0aGVzZSByZWx5IG9uIE11dGF0aW9uIEV2ZW50cyB3aGljaCBvbmx5IG9jY3VyIHdoZW4gYW4gZWxlbWVudCBpcyBjb25uZWN0ZWRcbi8vIHRvIHRoZSBET00uIFRoZSBhbGdvcml0aG0gdXNlZCBpbiB0aGlzIG1vZHVsZSBkb2VzIG5vdCB1c2UgYSBjb25uZWN0ZWQgZWxlbWVudCxcbi8vIGFuZCBzbyB3ZSBtdXN0IGVuc3VyZSB0aGF0IGEgKm5hdGl2ZSogTXV0YXRpb25PYnNlcnZlciBpcyBhdmFpbGFibGUuXG5jb25zdCBzdXBwb3J0c05hdGl2ZU11dGF0aW9uT2JzZXJ2ZXIgPVxuICBpc0Jyb3dzZXIgJiYgaXNOYXRpdmUod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xuZXhwb3J0IGRlZmF1bHQgKHN1cHBvcnRzTmF0aXZlTXV0YXRpb25PYnNlcnZlclxuICA/IG1pY3JvdGFza0RlYm91bmNlXG4gIDogdGFza0RlYm91bmNlKTtcbiIsImNvbnN0IG5hdGl2ZUhpbnRzID0gW1xuICAnbmF0aXZlIGNvZGUnLFxuICAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJywgLy8gZm9yIG1vYmlsZSBzYWZhcmkgaU9TIDkuMFxuXTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSBmdW5jdGlvbiBpcyBpbXBsZW1lbnRlZCBuYXRpdmVseSAoYXMgb3Bwb3NlZCB0byBhIHBvbHlmaWxsKS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RnVuY3Rpb24gfCB1bmRlZmluZWR9IGZuIHRoZSBmdW5jdGlvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZuID0+XG4gIG5hdGl2ZUhpbnRzLnNvbWUoaGludCA9PiAoZm4gfHwgJycpLnRvU3RyaW5nKCkuaW5kZXhPZihoaW50KSA+IC0xKTtcbiIsIi8qKlxuICogVGVsbHMgaWYgeW91IGFyZSBydW5uaW5nIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRTEwXG4gKi9cbmxldCBpc0lFMTAgPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBpZiAoaXNJRTEwID09PSB1bmRlZmluZWQpIHtcbiAgICBpc0lFMTAgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgIT09IC0xO1xuICB9XG4gIHJldHVybiBpc0lFMTA7XG59XG4iLCIvKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIGNvbnN0IGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIChcbiAgICBmdW5jdGlvblRvQ2hlY2sgJiZcbiAgICBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICApO1xufVxuIiwiLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICBjb25zdCBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cbiIsIi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKFxuICAgICFlbGVtZW50IHx8XG4gICAgWydIVE1MJywgJ0JPRFknLCAnI2RvY3VtZW50J10uaW5kZXhPZihlbGVtZW50Lm5vZGVOYW1lKSAhPT0gLTFcbiAgKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIGNvbnN0IHsgb3ZlcmZsb3csIG92ZXJmbG93WCwgb3ZlcmZsb3dZIH0gPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gIGlmICgvKGF1dG98c2Nyb2xsKS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5Jztcbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBlbGVtZW50ICYmIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICBjb25zdCBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChcbiAgICBbJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJlxuICAgIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJ1xuICApIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuIiwiLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iLCJpbXBvcnQgaXNPZmZzZXRDb250YWluZXIgZnJvbSAnLi9pc09mZnNldENvbnRhaW5lcic7XG5pbXBvcnQgZ2V0Um9vdCBmcm9tICcuL2dldFJvb3QnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuL2dldE9mZnNldFBhcmVudCc7XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIGNvbnN0IG9yZGVyID1cbiAgICBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJlxuICAgIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICBjb25zdCBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgY29uc3QgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgY29uc3QgeyBjb21tb25BbmNlc3RvckNvbnRhaW5lciB9ID0gcmFuZ2U7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuICBpZiAoXG4gICAgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJlxuICAgICAgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSB8fFxuICAgIHN0YXJ0LmNvbnRhaW5zKGVuZClcbiAgKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICBjb25zdCBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cbiIsImltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRPZmZzZXRQYXJlbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIGNvbnN0IHsgbm9kZU5hbWUgfSA9IGVsZW1lbnQ7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnRcbiAgKTtcbn1cbiIsIi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCwgc2lkZSA9ICd0b3AnKSB7XG4gIGNvbnN0IHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgY29uc3QgaHRtbCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgY29uc3Qgc2Nyb2xsaW5nRWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG4iLCIvKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIGNvbnN0IHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIGNvbnN0IHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gKFxuICAgICtzdHlsZXNbYGJvcmRlciR7c2lkZUF9V2lkdGhgXS5zcGxpdCgncHgnKVswXSArXG4gICAgK3N0eWxlc1tgYm9yZGVyJHtzaWRlQn1XaWR0aGBdLnNwbGl0KCdweCcpWzBdXG4gICk7XG59XG4iLCJpbXBvcnQgaXNJRTEwIGZyb20gJy4vaXNJRTEwJztcblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChcbiAgICBib2R5W2BvZmZzZXQke2F4aXN9YF0sXG4gICAgYm9keVtgc2Nyb2xsJHtheGlzfWBdLFxuICAgIGh0bWxbYGNsaWVudCR7YXhpc31gXSxcbiAgICBodG1sW2BvZmZzZXQke2F4aXN9YF0sXG4gICAgaHRtbFtgc2Nyb2xsJHtheGlzfWBdLFxuICAgIGlzSUUxMCgpXG4gICAgICA/IGh0bWxbYG9mZnNldCR7YXhpc31gXSArXG4gICAgICAgIGNvbXB1dGVkU3R5bGVbYG1hcmdpbiR7YXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0J31gXSArXG4gICAgICAgIGNvbXB1dGVkU3R5bGVbYG1hcmdpbiR7YXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCd9YF1cbiAgICAgIDogMFxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTaXplcygpIHtcbiAgY29uc3QgYm9keSA9IHdpbmRvdy5kb2N1bWVudC5ib2R5O1xuICBjb25zdCBodG1sID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGlzSUUxMCgpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgfTtcbn1cbiIsIi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4ge1xuICAgIC4uLm9mZnNldHMsXG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0LFxuICB9O1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0Qm9yZGVyc1NpemUgZnJvbSAnLi9nZXRCb3JkZXJzU2l6ZSc7XG5pbXBvcnQgZ2V0V2luZG93U2l6ZXMgZnJvbSAnLi9nZXRXaW5kb3dTaXplcyc7XG5pbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4vZ2V0Q2xpZW50UmVjdCc7XG5pbXBvcnQgaXNJRTEwIGZyb20gJy4vaXNJRTEwJztcblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICBsZXQgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgaWYgKGlzSUUxMCgpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIGNvbnN0IHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gY2F0Y2ggKGVycikge31cbiAgfSBlbHNlIHtcbiAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3AsXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICBjb25zdCBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKCkgOiB7fTtcbiAgY29uc3Qgd2lkdGggPVxuICAgIHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LnJpZ2h0IC0gcmVzdWx0LmxlZnQ7XG4gIGNvbnN0IGhlaWdodCA9XG4gICAgc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIGxldCBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgbGV0IHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBpbmNsdWRlU2Nyb2xsIGZyb20gJy4vaW5jbHVkZVNjcm9sbCc7XG5pbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gJy4vZ2V0U2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSAnLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuaW1wb3J0IHJ1bklzSUUxMCBmcm9tICcuL2lzSUUxMCc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuL2dldENsaWVudFJlY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICBjb25zdCBpc0lFMTAgPSBydW5Jc0lFMTAoKTtcbiAgY29uc3QgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIGNvbnN0IGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIGNvbnN0IHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgY29uc3Qgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICBjb25zdCBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgY29uc3QgYm9yZGVyVG9wV2lkdGggPSArc3R5bGVzLmJvcmRlclRvcFdpZHRoLnNwbGl0KCdweCcpWzBdO1xuICBjb25zdCBib3JkZXJMZWZ0V2lkdGggPSArc3R5bGVzLmJvcmRlckxlZnRXaWR0aC5zcGxpdCgncHgnKVswXTtcblxuICBsZXQgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHQsXG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIGNvbnN0IG1hcmdpblRvcCA9ICtzdHlsZXMubWFyZ2luVG9wLnNwbGl0KCdweCcpWzBdO1xuICAgIGNvbnN0IG1hcmdpbkxlZnQgPSArc3R5bGVzLm1hcmdpbkxlZnQuc3BsaXQoJ3B4JylbMF07XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKFxuICAgIGlzSUUxMFxuICAgICAgPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KVxuICAgICAgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJ1xuICApIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG4iLCJpbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50LCBzdWJ0cmFjdCA9IGZhbHNlKSB7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgY29uc3QgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG4iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gJy4vZ2V0U2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5pbXBvcnQgZmluZENvbW1vbk9mZnNldFBhcmVudCBmcm9tICcuL2ZpbmRDb21tb25PZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIGZyb20gJy4vZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlJztcbmltcG9ydCBnZXRXaW5kb3dTaXplcyBmcm9tICcuL2dldFdpbmRvd1NpemVzJztcbmltcG9ydCBpc0ZpeGVkIGZyb20gJy4vaXNGaXhlZCc7XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kYXJpZXMoXG4gIHBvcHBlcixcbiAgcmVmZXJlbmNlLFxuICBwYWRkaW5nLFxuICBib3VuZGFyaWVzRWxlbWVudFxuKSB7XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIGxldCBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgY29uc3Qgb2Zmc2V0UGFyZW50ID0gZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQpO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICBsZXQgYm91bmRhcmllc05vZGU7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShwb3BwZXIpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIGNvbnN0IG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoXG4gICAgICBib3VuZGFyaWVzTm9kZSxcbiAgICAgIG9mZnNldFBhcmVudFxuICAgICk7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBjb25zdCB7IGhlaWdodCwgd2lkdGggfSA9IGdldFdpbmRvd1NpemVzKCk7XG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIGJvdW5kYXJpZXMubGVmdCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IHBhZGRpbmc7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG4iLCJpbXBvcnQgZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIGZyb20gJy4vZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlJztcbmltcG9ydCBnZXRTY3JvbGwgZnJvbSAnLi9nZXRTY3JvbGwnO1xuaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi9nZXRDbGllbnRSZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgY29uc3QgaHRtbCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbChodG1sKTtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChodG1sLCAnbGVmdCcpO1xuXG4gIGNvbnN0IG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG4iLCJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgY29uc3Qgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cbiIsImltcG9ydCBnZXRCb3VuZGFyaWVzIGZyb20gJy4uL3V0aWxzL2dldEJvdW5kYXJpZXMnO1xuXG5mdW5jdGlvbiBnZXRBcmVhKHsgd2lkdGgsIGhlaWdodCB9KSB7XG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChcbiAgcGxhY2VtZW50LFxuICByZWZSZWN0LFxuICBwb3BwZXIsXG4gIHJlZmVyZW5jZSxcbiAgYm91bmRhcmllc0VsZW1lbnQsXG4gIHBhZGRpbmcgPSAwXG4pIHtcbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIGNvbnN0IGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKFxuICAgIHBvcHBlcixcbiAgICByZWZlcmVuY2UsXG4gICAgcGFkZGluZyxcbiAgICBib3VuZGFyaWVzRWxlbWVudFxuICApO1xuXG4gIGNvbnN0IHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3AsXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodCxcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b20sXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodCxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpXG4gICAgLm1hcChrZXkgPT4gKHtcbiAgICAgIGtleSxcbiAgICAgIC4uLnJlY3RzW2tleV0sXG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pLFxuICAgIH0pKVxuICAgIC5zb3J0KChhLCBiKSA9PiBiLmFyZWEgLSBhLmFyZWEpO1xuXG4gIGNvbnN0IGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoXG4gICAgKHsgd2lkdGgsIGhlaWdodCB9KSA9PlxuICAgICAgd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0XG4gICk7XG5cbiAgY29uc3QgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDBcbiAgICA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5XG4gICAgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgY29uc3QgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/IGAtJHt2YXJpYXRpb259YCA6ICcnKTtcbn1cbiIsImltcG9ydCBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IGZyb20gJy4vZmluZENvbW1vbk9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIGZyb20gJy4vZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlJztcblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIGNvbnN0IGNvbW1vbk9mZnNldFBhcmVudCA9IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50KTtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICBjb25zdCB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSk7XG4gIGNvbnN0IHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0KTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeCxcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIGNvbnN0IGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgbWF0Y2hlZCA9PiBoYXNoW21hdGNoZWRdKTtcbn1cbiIsImltcG9ydCBnZXRPdXRlclNpemVzIGZyb20gJy4vZ2V0T3V0ZXJTaXplcyc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi9nZXRPcHBvc2l0ZVBsYWNlbWVudCc7XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIGNvbnN0IHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICBjb25zdCBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHQsXG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICBjb25zdCBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgY29uc3QgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIGNvbnN0IHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIGNvbnN0IG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgY29uc3Qgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9XG4gICAgcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gK1xuICAgIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtXG4gICAgcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9XG4gICAgICByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9XG4gICAgICByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuIiwiLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgZmluZEluZGV4IGZyb20gJy4vZmluZEluZGV4JztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIGNvbnN0IG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkXG4gICAgPyBtb2RpZmllcnNcbiAgICA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBpZiAobW9kaWZpZXIuZnVuY3Rpb24pIHtcbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgY29uc3QgZm4gPSBtb2RpZmllci5mdW5jdGlvbiB8fCBtb2RpZmllci5mbjtcbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChjdXIgPT4gY3VyW3Byb3BdID09PSB2YWx1ZSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICBjb25zdCBtYXRjaCA9IGZpbmQoYXJyLCBvYmogPT4gb2JqW3Byb3BdID09PSB2YWx1ZSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG4iLCIvKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKFxuICAgICh7IG5hbWUsIGVuYWJsZWQgfSkgPT4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWVcbiAgKTtcbn1cbiIsIi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIGNvbnN0IHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIGNvbnN0IHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICBjb25zdCB0b0NoZWNrID0gcHJlZml4ID8gYCR7cHJlZml4fSR7dXBwZXJQcm9wfWAgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5kb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICBjb25zdCBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgY29uc3QgdGFyZ2V0ID0gaXNCb2R5ID8gd2luZG93IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhcbiAgICAgIGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksXG4gICAgICBldmVudCxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgc2Nyb2xsUGFyZW50c1xuICAgICk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKFxuICByZWZlcmVuY2UsXG4gIG9wdGlvbnMsXG4gIHN0YXRlLFxuICB1cGRhdGVCb3VuZFxuKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIGNvbnN0IHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKFxuICAgIHNjcm9sbEVsZW1lbnQsXG4gICAgJ3Njcm9sbCcsXG4gICAgc3RhdGUudXBkYXRlQm91bmQsXG4gICAgc3RhdGUuc2Nyb2xsUGFyZW50c1xuICApO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuIiwiaW1wb3J0IGlzTW9kaWZpZXJFbmFibGVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkJztcbmltcG9ydCBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lJztcblxuLyoqXG4gKiBEZXN0cm95IHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCByZW1vdmVFdmVudExpc3RlbmVycyBmcm9tICcuLi91dGlscy9yZW1vdmVFdmVudExpc3RlbmVycyc7XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBvblVwZGF0ZSBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2godGFyZ2V0ID0+IHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuIiwiLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuIiwiaW1wb3J0IGlzTnVtZXJpYyBmcm9tICcuL2lzTnVtZXJpYyc7XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgbGV0IHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoXG4gICAgICBbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PVxuICAgICAgICAtMSAmJlxuICAgICAgaXNOdW1lcmljKHN0eWxlc1twcm9wXSlcbiAgICApIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tICcuL2ZpbmQnO1xuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQoXG4gIG1vZGlmaWVycyxcbiAgcmVxdWVzdGluZ05hbWUsXG4gIHJlcXVlc3RlZE5hbWVcbikge1xuICBjb25zdCByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsICh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWUpO1xuXG4gIGNvbnN0IGlzUmVxdWlyZWQgPVxuICAgICEhcmVxdWVzdGluZyAmJlxuICAgIG1vZGlmaWVycy5zb21lKG1vZGlmaWVyID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiZcbiAgICAgICAgbW9kaWZpZXIuZW5hYmxlZCAmJlxuICAgICAgICBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXJcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgY29uc3QgcmVxdWVzdGluZyA9IGBcXGAke3JlcXVlc3RpbmdOYW1lfVxcYGA7XG4gICAgY29uc3QgcmVxdWVzdGVkID0gYFxcYCR7cmVxdWVzdGVkTmFtZX1cXGBgO1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGAke3JlcXVlc3RlZH0gbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJHtyZXF1ZXN0aW5nfSBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICR7cmVxdWVzdGluZ30hYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG4iLCIvKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1yaWdodGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgW1xuICAnYXV0by1zdGFydCcsXG4gICdhdXRvJyxcbiAgJ2F1dG8tZW5kJyxcbiAgJ3RvcC1zdGFydCcsXG4gICd0b3AnLFxuICAndG9wLWVuZCcsXG4gICdyaWdodC1zdGFydCcsXG4gICdyaWdodCcsXG4gICdyaWdodC1lbmQnLFxuICAnYm90dG9tLWVuZCcsXG4gICdib3R0b20nLFxuICAnYm90dG9tLXN0YXJ0JyxcbiAgJ2xlZnQtZW5kJyxcbiAgJ2xlZnQnLFxuICAnbGVmdC1zdGFydCcsXG5dO1xuIiwiaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi4vbWV0aG9kcy9wbGFjZW1lbnRzJztcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG5jb25zdCB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQsIGNvdW50ZXIgPSBmYWxzZSkge1xuICBjb25zdCBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIGNvbnN0IGFyciA9IHZhbGlkUGxhY2VtZW50c1xuICAgIC5zbGljZShpbmRleCArIDEpXG4gICAgLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuIiwiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvbiBmcm9tICcuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvbic7XG5pbXBvcnQgZ2V0UG9wcGVyT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRQb3BwZXJPZmZzZXRzJztcbmltcG9ydCBydW5Nb2RpZmllcnMgZnJvbSAnLi4vdXRpbHMvcnVuTW9kaWZpZXJzJztcbmltcG9ydCBnZXRCb3VuZGFyaWVzIGZyb20gJy4uL3V0aWxzL2dldEJvdW5kYXJpZXMnO1xuaW1wb3J0IGlzTW9kaWZpZXJFbmFibGVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkJztcbmltcG9ydCBjbG9ja3dpc2UgZnJvbSAnLi4vdXRpbHMvY2xvY2t3aXNlJztcblxuY29uc3QgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJyxcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGNvbnN0IGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKFxuICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLFxuICAgIG9wdGlvbnMucGFkZGluZyxcbiAgICBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50XG4gICk7XG5cbiAgbGV0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGxldCBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGxldCB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIGxldCBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIGNvbnN0IHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIGNvbnN0IHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIGNvbnN0IG92ZXJsYXBzUmVmID1cbiAgICAgIChwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAncmlnaHQnICYmXG4gICAgICAgIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSkgfHxcbiAgICAgIChwbGFjZW1lbnQgPT09ICd0b3AnICYmXG4gICAgICAgIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSkgfHxcbiAgICAgIChwbGFjZW1lbnQgPT09ICdib3R0b20nICYmXG4gICAgICAgIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKSk7XG5cbiAgICBjb25zdCBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgY29uc3Qgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIGNvbnN0IG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICBjb25zdCBvdmVyZmxvd3NCb3R0b20gPVxuICAgICAgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgY29uc3Qgb3ZlcmZsb3dzQm91bmRhcmllcyA9XG4gICAgICAocGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCkgfHxcbiAgICAgIChwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3ApIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gICAgY29uc3QgZmxpcHBlZFZhcmlhdGlvbiA9XG4gICAgICAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiZcbiAgICAgICgoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCkgfHxcbiAgICAgICAgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCkgfHxcbiAgICAgICAgKCFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3ApIHx8XG4gICAgICAgICghaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSkpO1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHtcbiAgICAgICAgLi4uZGF0YS5vZmZzZXRzLnBvcHBlcixcbiAgICAgICAgLi4uZ2V0UG9wcGVyT2Zmc2V0cyhcbiAgICAgICAgICBkYXRhLmluc3RhbmNlLnBvcHBlcixcbiAgICAgICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICAgIGRhdGEucGxhY2VtZW50XG4gICAgICAgICksXG4gICAgICB9O1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IGlzTnVtZXJpYyBmcm9tICcuLi91dGlscy9pc051bWVyaWMnO1xuaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi4vdXRpbHMvZ2V0Q2xpZW50UmVjdCc7XG5pbXBvcnQgZmluZCBmcm9tICcuLi91dGlscy9maW5kJztcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICBjb25zdCBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIGNvbnN0IHZhbHVlID0gK3NwbGl0WzFdO1xuICBjb25zdCB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIGxldCBlbGVtZW50O1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIGNvbnN0IHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICBsZXQgc2l6ZTtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KFxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KFxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIHx8IDBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VPZmZzZXQoXG4gIG9mZnNldCxcbiAgcG9wcGVyT2Zmc2V0cyxcbiAgcmVmZXJlbmNlT2Zmc2V0cyxcbiAgYmFzZVBsYWNlbWVudFxuKSB7XG4gIGNvbnN0IG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICBjb25zdCB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICBjb25zdCBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmcmFnID0+IGZyYWcudHJpbSgpKTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgY29uc3QgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKFxuICAgIGZpbmQoZnJhZ21lbnRzLCBmcmFnID0+IGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMSlcbiAgKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIGNvbnN0IHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICBsZXQgb3BzID0gZGl2aWRlciAhPT0gLTFcbiAgICA/IFtcbiAgICAgICAgZnJhZ21lbnRzXG4gICAgICAgICAgLnNsaWNlKDAsIGRpdmlkZXIpXG4gICAgICAgICAgLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksXG4gICAgICAgIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChcbiAgICAgICAgICBmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpXG4gICAgICAgICksXG4gICAgICBdXG4gICAgOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKChvcCwgaW5kZXgpID0+IHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgY29uc3QgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KVxuICAgICAgPyAnaGVpZ2h0J1xuICAgICAgOiAnd2lkdGgnO1xuICAgIGxldCBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiAoXG4gICAgICBvcFxuICAgICAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgICAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IHtcbiAgICAgICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFtdKVxuICAgICAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAgICAgLm1hcChzdHIgPT4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSlcbiAgICApO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goKG9wLCBpbmRleCkgPT4ge1xuICAgIG9wLmZvckVhY2goKGZyYWcsIGluZGV4MikgPT4ge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIHsgb2Zmc2V0IH0pIHtcbiAgY29uc3QgeyBwbGFjZW1lbnQsIG9mZnNldHM6IHsgcG9wcGVyLCByZWZlcmVuY2UgfSB9ID0gZGF0YTtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIGxldCBvZmZzZXRzO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBhcHBseVN0eWxlLCB7IGFwcGx5U3R5bGVPbkxvYWQgfSBmcm9tICcuL2FwcGx5U3R5bGUnO1xuaW1wb3J0IGNvbXB1dGVTdHlsZSBmcm9tICcuL2NvbXB1dGVTdHlsZSc7XG5pbXBvcnQgYXJyb3cgZnJvbSAnLi9hcnJvdyc7XG5pbXBvcnQgZmxpcCBmcm9tICcuL2ZsaXAnO1xuaW1wb3J0IGtlZXBUb2dldGhlciBmcm9tICcuL2tlZXBUb2dldGhlcic7XG5pbXBvcnQgb2Zmc2V0IGZyb20gJy4vb2Zmc2V0JztcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSAnLi9wcmV2ZW50T3ZlcmZsb3cnO1xuaW1wb3J0IHNoaWZ0IGZyb20gJy4vc2hpZnQnO1xuaW1wb3J0IGhpZGUgZnJvbSAnLi9oaWRlJztcbmltcG9ydCBpbm5lciBmcm9tICcuL2lubmVyJztcblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0LFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXRsZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBoZWlnaHQuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBNb3JlIG9uIHRoaXMgW3JlYWRpbmcgdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MylcbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwLFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIgdGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgaGFzIGFsd2F5cyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLCBjYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50JyxcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaG90aGVyc1xuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEV4cGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGFzc3VyZSBpdCB0byBwb2ludCB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMsIHlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyLFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdWN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XScsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLlxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLFxuICAgICAqIHRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyLFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGUsXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0JyxcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3Ugb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzZCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZCxcbiAgfSxcbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9ucyB1c2VkIGJ5IFBvcHBlci5qc1xuICogdGhpcyBvYmplY3QgZ2V0IHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cbiIsImltcG9ydCBtb2RpZmllcnMgZnJvbSAnLi4vbW9kaWZpZXJzL2luZGV4JztcblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhpcyBvYmplY3QsIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50XG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZFxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogKCkgPT4ge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZCwgdGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6ICgpID0+IHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzLFxufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuIiwiLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICBjb25zdCB7IHJlZmVyZW5jZSwgcG9wcGVyIH0gPSBkYXRhLm9mZnNldHM7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIGNvbnN0IHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgY29uc3QgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgY29uc3Qgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IHsgW3NpZGVdOiByZWZlcmVuY2Vbc2lkZV0gfSxcbiAgICAgIGVuZDoge1xuICAgICAgICBbc2lkZV06IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHsgLi4ucG9wcGVyLCAuLi5zaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dIH07XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRCb3VuZGFyaWVzIGZyb20gJy4uL3V0aWxzL2dldEJvdW5kYXJpZXMnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICBsZXQgYm91bmRhcmllc0VsZW1lbnQgPVxuICAgIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgY29uc3QgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoXG4gICAgZGF0YS5pbnN0YW5jZS5wb3BwZXIsXG4gICAgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsXG4gICAgb3B0aW9ucy5wYWRkaW5nLFxuICAgIGJvdW5kYXJpZXNFbGVtZW50XG4gICk7XG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgY29uc3Qgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICBsZXQgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICBjb25zdCBjaGVjayA9IHtcbiAgICBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgbGV0IHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAoXG4gICAgICAgIHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmXG4gICAgICAgICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2VcbiAgICAgICkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgW3BsYWNlbWVudF06IHZhbHVlIH07XG4gICAgfSxcbiAgICBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICBjb25zdCBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgbGV0IHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChcbiAgICAgICAgcG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiZcbiAgICAgICAgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZVxuICAgICAgKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4oXG4gICAgICAgICAgcG9wcGVyW21haW5TaWRlXSxcbiAgICAgICAgICBib3VuZGFyaWVzW3BsYWNlbWVudF0gLVxuICAgICAgICAgICAgKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBbbWFpblNpZGVdOiB2YWx1ZSB9O1xuICAgIH0sXG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChwbGFjZW1lbnQgPT4ge1xuICAgIGNvbnN0IHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMVxuICAgICAgPyAncHJpbWFyeSdcbiAgICAgIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0geyAuLi5wb3BwZXIsIC4uLmNoZWNrW3NpZGVdKHBsYWNlbWVudCkgfTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIGNvbnN0IHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICBjb25zdCBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIGNvbnN0IG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID1cbiAgICAgIGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGdldE91dGVyU2l6ZXMgZnJvbSAnLi4vdXRpbHMvZ2V0T3V0ZXJTaXplcyc7XG5pbXBvcnQgaXNNb2RpZmllclJlcXVpcmVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZCc7XG5pbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4uL3V0aWxzL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgbGV0IGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50ISdcbiAgICAgICk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIGNvbnN0IGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIGNvbnN0IHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgY29uc3Qgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICBjb25zdCBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICBjb25zdCBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVjdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT1cbiAgICAgIHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9XG4gICAgICByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIGNvbnN0IGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICBjb25zdCBwb3BwZXJNYXJnaW5TaWRlID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KFxuICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgIGBtYXJnaW4ke3NpZGVDYXBpdGFsaXplZH1gXG4gICkucmVwbGFjZSgncHgnLCAnJyk7XG4gIGxldCBzaWRlVmFsdWUgPVxuICAgIGNlbnRlciAtIGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcilbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSB7fTtcbiAgZGF0YS5vZmZzZXRzLmFycm93W3NpZGVdID0gTWF0aC5yb3VuZChzaWRlVmFsdWUpO1xuICBkYXRhLm9mZnNldHMuYXJyb3dbYWx0U2lkZV0gPSAnJzsgLy8gbWFrZSBzdXJlIHRvIHVuc2V0IGFueSBldmVudHVhbCBhbHRTaWRlIHZhbHVlIGZyb20gdGhlIERPTSBub2RlXG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIvKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuIiwiaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi4vdXRpbHMvZ2V0Q2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIGNvbnN0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGNvbnN0IHsgcG9wcGVyLCByZWZlcmVuY2UgfSA9IGRhdGEub2Zmc2V0cztcbiAgY29uc3QgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIGNvbnN0IHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID1cbiAgICByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLVxuICAgIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBpc01vZGlmaWVyUmVxdWlyZWQgZnJvbSAnLi4vdXRpbHMvaXNNb2RpZmllclJlcXVpcmVkJztcbmltcG9ydCBmaW5kIGZyb20gJy4uL3V0aWxzL2ZpbmQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgY29uc3QgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIGNvbnN0IGJvdW5kID0gZmluZChcbiAgICBkYXRhLmluc3RhbmNlLm1vZGlmaWVycyxcbiAgICBtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93J1xuICApLmJvdW5kYXJpZXM7XG5cbiAgaWYgKFxuICAgIHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8XG4gICAgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHxcbiAgICByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fFxuICAgIHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0XG4gICkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSBmcm9tICcuLi91dGlscy9nZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUnO1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vdXRpbHMvZmluZCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL3V0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgeCwgeSB9ID0gb3B0aW9ucztcbiAgY29uc3QgeyBwb3BwZXIgfSA9IGRhdGEub2Zmc2V0cztcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcbiAgY29uc3QgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChcbiAgICBkYXRhLmluc3RhbmNlLm1vZGlmaWVycyxcbiAgICBtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSdcbiAgKS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzISdcbiAgICApO1xuICB9XG4gIGNvbnN0IGdwdUFjY2VsZXJhdGlvbiA9XG4gICAgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWRcbiAgICAgID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uXG4gICAgICA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIGNvbnN0IG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIGNvbnN0IG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgY29uc3Qgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb24sXG4gIH07XG5cbiAgLy8gZmxvb3Igc2lkZXMgdG8gYXZvaWQgYmx1cnJ5IHRleHRcbiAgY29uc3Qgb2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiBNYXRoLmZsb29yKHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IE1hdGguZmxvb3IocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiBNYXRoLmZsb29yKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBNYXRoLmZsb29yKHBvcHBlci5yaWdodCksXG4gIH07XG5cbiAgY29uc3Qgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIGNvbnN0IHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIGNvbnN0IHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIGxldCBsZWZ0LCB0b3A7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gYHRyYW5zbGF0ZTNkKCR7bGVmdH1weCwgJHt0b3B9cHgsIDApYDtcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgY29uc3QgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIGNvbnN0IGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IGAke3NpZGVBfSwgJHtzaWRlQn1gO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICBjb25zdCBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50LFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSB7IC4uLmF0dHJpYnV0ZXMsIC4uLmRhdGEuYXR0cmlidXRlcyB9O1xuICBkYXRhLnN0eWxlcyA9IHsgLi4uc3R5bGVzLCAuLi5kYXRhLnN0eWxlcyB9O1xuICBkYXRhLmFycm93U3R5bGVzID0geyAuLi5kYXRhLm9mZnNldHMuYXJyb3csIC4uLmRhdGEuYXJyb3dTdHlsZXMgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBzZXRTdHlsZXMgZnJvbSAnLi4vdXRpbHMvc2V0U3R5bGVzJztcbmltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gJy4uL3V0aWxzL3NldEF0dHJpYnV0ZXMnO1xuaW1wb3J0IGdldFJlZmVyZW5jZU9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cyc7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChcbiAgcmVmZXJlbmNlLFxuICBwb3BwZXIsXG4gIG9wdGlvbnMsXG4gIG1vZGlmaWVyT3B0aW9ucyxcbiAgc3RhdGVcbikge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgY29uc3QgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgY29uc3QgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQoXG4gICAgb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgcmVmZXJlbmNlT2Zmc2V0cyxcbiAgICBwb3BwZXIsXG4gICAgcmVmZXJlbmNlLFxuICAgIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsXG4gICAgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nXG4gICk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cbiIsIi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG4iLCIvLyBVdGlsc1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi91dGlscy9pc0Z1bmN0aW9uJztcblxuLy8gTWV0aG9kc1xuaW1wb3J0IHVwZGF0ZSBmcm9tICcuL21ldGhvZHMvdXBkYXRlJztcbmltcG9ydCBkZXN0cm95IGZyb20gJy4vbWV0aG9kcy9kZXN0cm95JztcbmltcG9ydCBlbmFibGVFdmVudExpc3RlbmVycyBmcm9tICcuL21ldGhvZHMvZW5hYmxlRXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IGRpc2FibGVFdmVudExpc3RlbmVycyBmcm9tICcuL21ldGhvZHMvZGlzYWJsZUV2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBEZWZhdWx0cyBmcm9tICcuL21ldGhvZHMvZGVmYXVsdHMnO1xuaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi9tZXRob2RzL3BsYWNlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3BwZXIge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zID0ge30pIHtcbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4uUG9wcGVyLkRlZmF1bHRzLCAuLi5vcHRpb25zIH07XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXSxcbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoe1xuICAgICAgLi4uUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycyxcbiAgICAgIC4uLm9wdGlvbnMubW9kaWZpZXJzLFxuICAgIH0pLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0ge1xuICAgICAgICAvLyBJZiBpdCdzIGEgYnVpbHQtaW4gbW9kaWZpZXIsIHVzZSBpdCBhcyBiYXNlXG4gICAgICAgIC4uLihQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9KSxcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGN1c3RvbSBvcHRpb25zLCBvdmVycmlkZSBhbmQgbWVyZ2Ugd2l0aCBkZWZhdWx0IG9uZXNcbiAgICAgICAgLi4uKG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSksXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKVxuICAgICAgLm1hcChuYW1lID0+ICh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0sXG4gICAgICB9KSlcbiAgICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEub3JkZXIgLSBiLm9yZGVyKTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKG1vZGlmaWVyT3B0aW9ucyA9PiB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKFxuICAgICAgICAgIHRoaXMucmVmZXJlbmNlLFxuICAgICAgICAgIHRoaXMucG9wcGVyLFxuICAgICAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBtb2RpZmllck9wdGlvbnMsXG4gICAgICAgICAgdGhpcy5zdGF0ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIGNvbnN0IGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG4gIHVwZGF0ZSgpIHtcbiAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9XG4gIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICB9XG4gIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGUgYW4gdXBkYXRlLCBpdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlXG4gICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgKi9cbiAgc2NoZWR1bGVVcGRhdGUgPSAoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUpO1xuXG4gIC8qKlxuICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICpcbiAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgKiBAc3RhdGljXG4gICAqIEBwcml2YXRlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAqIEBtZW1iZXIgVXRpbHNcbiAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgKi9cbiAgc3RhdGljIFV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblxuICBzdGF0aWMgcGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgc3RhdGljIERlZmF1bHRzID0gRGVmYXVsdHM7XG59XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTBcbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuIiwiaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50JztcbmltcG9ydCBnZXRSZWZlcmVuY2VPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFJlZmVyZW5jZU9mZnNldHMnO1xuaW1wb3J0IGdldFBvcHBlck9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UG9wcGVyT2Zmc2V0cyc7XG5pbXBvcnQgcnVuTW9kaWZpZXJzIGZyb20gJy4uL3V0aWxzL3J1bk1vZGlmaWVycyc7XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9LFxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhcbiAgICB0aGlzLnN0YXRlLFxuICAgIHRoaXMucG9wcGVyLFxuICAgIHRoaXMucmVmZXJlbmNlXG4gICk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQoXG4gICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudCxcbiAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlLFxuICAgIHRoaXMucG9wcGVyLFxuICAgIHRoaXMucmVmZXJlbmNlLFxuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCxcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZ1xuICApO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKFxuICAgIHRoaXMucG9wcGVyLFxuICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgZGF0YS5wbGFjZW1lbnRcbiAgKTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuIiwiaW1wb3J0IHNldHVwRXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi4vdXRpbHMvc2V0dXBFdmVudExpc3RlbmVycyc7XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnMoXG4gICAgICB0aGlzLnJlZmVyZW5jZSxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHRoaXMuc3RhdGUsXG4gICAgICB0aGlzLnNjaGVkdWxlVXBkYXRlXG4gICAgKTtcbiAgfVxufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGFhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxiYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGNhKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2QsYyxlLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZCl9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QihcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2soSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixkKXt2YXIgYz12b2lkIDAsZT17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZVtjXSYmKGVbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBkYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBlYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBmYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWRhKGEsZSsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZCkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZCxjLGUpe3ZhciBnPVwiXCI7bnVsbCE9ZCYmKGc9KFwiXCIrZCkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZSk7VShhLGZhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtudWxsPT09YT9CKFwiMzIxXCIpOnZvaWQgMDtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLGVhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpiYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjphYSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixkKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGQpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnosY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7bnVsbD09PWF8fHZvaWQgMD09PWE/QihcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZT1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPVxuYil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuOC42XCIsXG51bnN0YWJsZV9Db25jdXJyZW50TW9kZTp4LHVuc3RhYmxlX1Byb2ZpbGVyOnUsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRPd25lcjpKLGFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bYyxkLGUsZixnLGhdLGs9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW2srK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB4KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6eChcIjIyN1wiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgsbCl7dmFyIGs9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsayl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxsKXtkYT0hMTtlYT1udWxsO2NhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGwpe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBrPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB4KFwiMTk4XCIpLGs9dm9pZCAwO2ZhfHwoZmE9ITAsaGE9ayl9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp4KFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6eChcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT94KFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgbD1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGwpe2ZvcihlIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShlKSYmcWEobFtlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6eChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT94KFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e30sdGE9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtudWxsPT1iP3goXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1cbnZhciBCYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtsYT94KFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP3goXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfX07XG5mdW5jdGlvbiBDYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXRhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBEYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSYmKHlhKGEsQWEpLHphP3goXCI5NVwiKTp2b2lkIDAsZmEpKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO312YXIgRWE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRmE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitFYSxHYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0VhO2Z1bmN0aW9uIEhhKGEpe2lmKGFbRmFdKXJldHVybiBhW0ZhXTtmb3IoOyFhW0ZhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIElhKGEpe2E9YVtGYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt4KFwiMzNcIil9ZnVuY3Rpb24gS2EoYSl7cmV0dXJuIGFbR2FdfHxudWxsfWZ1bmN0aW9uIExhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIE5hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TGEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU1hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTWEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFFhKGEpe3lhKGEsTmEpfXZhciBSYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFNhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRhPXthbmltYXRpb25lbmQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFVhPXt9LFZhPXt9O1xuUmEmJihWYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdhKGEpe2lmKFVhW2FdKXJldHVybiBVYVthXTtpZighVGFbYV0pcmV0dXJuIGE7dmFyIGI9VGFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmEpcmV0dXJuIFVhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGE9V2EoXCJhbmltYXRpb25lbmRcIiksWWE9V2EoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmE9V2EoXCJhbmltYXRpb25zdGFydFwiKSwkYT1XYShcInRyYW5zaXRpb25lbmRcIiksYWI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJiPW51bGwsY2I9bnVsbCxkYj1udWxsO1xuZnVuY3Rpb24gZWIoKXtpZihkYilyZXR1cm4gZGI7dmFyIGEsYj1jYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBkYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGZiKCl7cmV0dXJuITB9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2ZiOmdiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Z2I7cmV0dXJuIHRoaXN9XG5uKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZmIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZmIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9ZmJ9LGlzUGVyc2lzdGVudDpnYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtoYihjKTtyZXR1cm4gY307aGIoeSk7ZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gamIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOngoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gaGIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9aWI7YS5yZWxlYXNlPWpifXZhciBrYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPVs5LDEzLDI3LDMyXSxuYj1SYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csb2I9bnVsbDtSYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYob2I9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBwYj1SYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIW9iLHFiPVJhJiYoIW5ifHxvYiYmODxvYiYmMTE+PW9iKSxyYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxzYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx0Yj0hMTtcbmZ1bmN0aW9uIHViKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09bWIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB2YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB3Yj0hMTtmdW5jdGlvbiB4YihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gdmIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3RiPSEwO3JldHVybiByYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1yYiYmdGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24geWIoYSxiKXtpZih3YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhbmImJnViKGEsYik/KGE9ZWIoKSxkYj1jYj1iYj1udWxsLHdiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBxYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgemI9e2V2ZW50VHlwZXM6c2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKG5iKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9c2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9c2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXNiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB3Yj91YihhLGMpJiYoZT1zYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXNiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHFiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHdifHxlIT09c2IuY29tcG9zaXRpb25TdGFydD9lPT09c2IuY29tcG9zaXRpb25FbmQmJndiJiYoZj1lYigpKTooYmI9ZCxjYj1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCx3Yj1cbiEwKSksZT1rYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj12YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUWEoZSksZj1lKTpmPW51bGw7KGE9cGI/eGIoYSxjKTp5YihhLGMpKT8oYj1sYi5nZXRQb29sZWQoc2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFFhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEFiPW51bGwsQmI9bnVsbCxDYj1udWxsO2Z1bmN0aW9uIERiKGEpe2lmKGE9dWEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBYj94KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj10YShhLnN0YXRlTm9kZSk7QWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBFYihhKXtCYj9DYj9DYi5wdXNoKGEpOkNiPVthXTpCYj1hfWZ1bmN0aW9uIEZiKCl7aWYoQmIpe3ZhciBhPUJiLGI9Q2I7Q2I9QmI9bnVsbDtEYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspRGIoYlthXSl9fVxuZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBJYigpe312YXIgSmI9ITE7ZnVuY3Rpb24gS2IoYSxiKXtpZihKYilyZXR1cm4gYShiKTtKYj0hMDt0cnl7cmV0dXJuIEdiKGEsYil9ZmluYWxseXtpZihKYj0hMSxudWxsIT09QmJ8fG51bGwhPT1DYilJYigpLEZiKCl9fXZhciBMYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBNYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIUxiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIE5iKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBPYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gUGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFFiKGEpe3ZhciBiPVBiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBSYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9UWIoYSkpfWZ1bmN0aW9uIFNiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1QYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBUYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtUYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtcbnZhciBVYj0vXiguKilbXFxcXFxcL10vLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixWYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFdiPXo/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixYYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxZYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxaYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCwkYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxhYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGJjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxjYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixkYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxlYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsZmM9ej9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixnYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gaGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWdjJiZhW2djXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gaWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBiYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBYYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBXYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgWmI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgWWI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBkYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGFjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgJGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBjYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgZWM6cmV0dXJuIGljKGEudHlwZSk7Y2FzZSBmYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIGljKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIGpjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1pYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1pYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFViLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIga2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbWM9e30sbmM9e307XG5mdW5jdGlvbiBvYyhhKXtpZihsYy5jYWxsKG5jLGEpKXJldHVybiEwO2lmKGxjLmNhbGwobWMsYSkpcmV0dXJuITE7aWYoa2MudGVzdChhKSlyZXR1cm4gbmNbYV09ITA7bWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEMoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciByYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLFxuc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5mdW5jdGlvbiB0YyhhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChxYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHVjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB2YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiB3YyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIHhjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIHljKGEsYil7eGMoYSxiKTt2YXIgYz11YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT96YyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZ6YyhhLGIudHlwZSx1YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEFjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIHpjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgQmM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gQ2MoYSxiLGMpe2E9eS5nZXRQb29sZWQoQmMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtFYihjKTtRYShhKTtyZXR1cm4gYX12YXIgRGM9bnVsbCxFYz1udWxsO2Z1bmN0aW9uIEZjKGEpe0RhKGEpfVxuZnVuY3Rpb24gR2MoYSl7dmFyIGI9SmEoYSk7aWYoU2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSGMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgSWM9ITE7UmEmJihJYz1PYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBKYygpe0RjJiYoRGMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpLEVjPURjPW51bGwpfWZ1bmN0aW9uIEtjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZHYyhFYykmJihhPUNjKEVjLGEsTmIoYSkpLEtiKEZjLGEpKX1mdW5jdGlvbiBMYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oSmMoKSxEYz1iLEVjPWMsRGMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpKTpcImJsdXJcIj09PWEmJkpjKCl9ZnVuY3Rpb24gTWMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gR2MoRWMpfVxuZnVuY3Rpb24gTmMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBHYyhiKX1mdW5jdGlvbiBPYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBHYyhiKX1cbnZhciBQYz17ZXZlbnRUeXBlczpCYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkljLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9KYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9SGM6TWIoZSk/SWM/Zj1PYzooZj1NYyxnPUxjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1OYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gQ2MoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZ6YyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxRYz15LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksUmM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gU2MoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1SY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFRjKCl7cmV0dXJuIFNjfVxudmFyIFVjPTAsVmM9MCxXYz0hMSxYYz0hMSxZYz1RYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9VWM7VWM9YS5zY3JlZW5YO3JldHVybiBXYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFdjPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9VmM7VmM9YS5zY3JlZW5ZO3JldHVybiBYYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFhjPSEwLDApfX0pLFpjPVljLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSwkYz17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sYWQ9e2V2ZW50VHlwZXM6JGMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SGEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxsPXZvaWQgMCxrPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPVljLGg9JGMubW91c2VMZWF2ZSxsPSRjLm1vdXNlRW50ZXIsaz1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPVpjLGg9JGMucG9pbnRlckxlYXZlLGw9JGMucG9pbnRlckVudGVyLGs9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkphKGYpO2U9bnVsbD09Yj9lOkphKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWsrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChsLGIsYyxkKTtjLnR5cGU9aytcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2s9MDtmb3IoZz1iO2c7Zz1MYShnKSlrKys7Zz0wO2ZvcihsPWU7bDtsPUxhKGwpKWcrKztmb3IoOzA8ay1nOyliPUxhKGIpLGstLTtmb3IoOzA8Zy1rOyllPUxhKGUpLGctLTtmb3IoO2stLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPUxhKGIpO2U9TGEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2s9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TGEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtrPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztmLnB1c2goZCk7ZD1MYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKU9hKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KU9hKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX07ZnVuY3Rpb24gYmQoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBjZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gZGQoYSxiKXtpZihiZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWNkLmNhbGwoYixjW2RdKXx8IWJkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gZWQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gZmQoYSl7MiE9PWVkKGEpP3goXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9ZWQoYSksMz09PWI/eChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gZmQoZSksYTtpZihnPT09ZClyZXR1cm4gZmQoZSksYjtnPWcuc2libGluZ314KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6eChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3goXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz94KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhkKGEpe2E9Z2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgaWQ9eS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLGpkPXkuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksa2Q9UWMuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBsZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBtZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sbmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LG9kPVFjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1tZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1sZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/bmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2xkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2xkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSkscGQ9WWMuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPVFjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjfSkscmQ9eS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9WWMuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx0ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtYYSxcImFuaW1hdGlvbkVuZFwiXSxbWWEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbJGEsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSx1ZD17fSx2ZD17fTtmdW5jdGlvbiB3ZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O3VkW2FdPWI7dmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCEwKX0pO3RkLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMSl9KTtcbnZhciB4ZD17ZXZlbnRUeXBlczp1ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1sZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9b2Q7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWtkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9WWM7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBYYTpjYXNlIFlhOmNhc2UgWmE6YT1pZDticmVhaztjYXNlICRhOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9UWM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPWpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9WmM7YnJlYWs7ZGVmYXVsdDphPXl9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtRYShiKTtyZXR1cm4gYn19LHlkPXhkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbnpkPVtdO2Z1bmN0aW9uIEFkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU5iKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPG9hLmxlbmd0aDtoKyspe3ZhciBsPW9hW2hdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXhhKGcsbCkpfURhKGcpfX12YXIgQmQ9ITA7XG5mdW5jdGlvbiBFKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gRWQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBDZChhLGIpe0hiKERkLGEsYil9XG5mdW5jdGlvbiBEZChhLGIpe2lmKEJkKXt2YXIgYz1OYihiKTtjPUhhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09ZWQoYyl8fChjPW51bGwpO2lmKHpkLmxlbmd0aCl7dmFyIGQ9emQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7S2IoQWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD56ZC5sZW5ndGgmJnpkLnB1c2goYSl9fX12YXIgRmQ9e30sR2Q9MCxIZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBJZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxIZCl8fChhW0hkXT1HZCsrLEZkW2FbSGRdXT17fSk7cmV0dXJuIEZkW2FbSGRdXX1mdW5jdGlvbiBKZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gS2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGQoYSxiKXt2YXIgYz1LZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZChjKX19ZnVuY3Rpb24gTWQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZCgpe2Zvcih2YXIgYT13aW5kb3csYj1KZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1KZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gUGQoKXt2YXIgYT1OZCgpO2lmKE9kKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntiPShiPWEub3duZXJEb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgYz1iLmdldFNlbGVjdGlvbiYmYi5nZXRTZWxlY3Rpb24oKTtpZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEEpe2I9bnVsbDticmVhayBhfXZhciBmPTAsZz0tMSxoPS0xLGw9MCxrPTAsbT1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB0Ozspe20hPT1ifHwwIT09ZCYmMyE9PW0ubm9kZVR5cGV8fChnPWYrZCk7bSE9PWV8fDAhPT1jJiYzIT09bS5ub2RlVHlwZXx8KGg9ZitjKTszPT09bS5ub2RlVHlwZSYmKGYrPW0ubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHQ9bS5maXJzdENoaWxkKSlicmVhaztwPW07bT10fWZvcig7Oyl7aWYobT09PWEpYnJlYWsgYjtwPT09YiYmKytsPT09ZCYmKGc9Zik7cD09PWUmJisraz09PWMmJihoPWYpO2lmKG51bGwhPT0odD1tLm5leHRTaWJsaW5nKSlicmVhazttPXA7cD1tLnBhcmVudE5vZGV9bT10fWI9LTE9PT1nfHwtMT09PWg/bnVsbDp7c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cmV0dXJue2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn19XG5mdW5jdGlvbiBRZChhKXt2YXIgYj1OZCgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTWQoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk9kKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUxkKGMsZik7dmFyIGc9TGQoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBSZD1SYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFNkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxUZD1udWxsLFVkPW51bGwsVmQ9bnVsbCxXZD0hMTtcbmZ1bmN0aW9uIFhkKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoV2R8fG51bGw9PVRkfHxUZCE9PUpkKGMpKXJldHVybiBudWxsO2M9VGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmT2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gVmQmJmRkKFZkLGMpP251bGw6KFZkPWMsYT15LmdldFBvb2xlZChTZC5zZWxlY3QsVWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1UZCxRYShhKSxhKX1cbnZhciBZZD17ZXZlbnRUeXBlczpTZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1JZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/SmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihNYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlUZD1lLFVkPWIsVmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlZkPVVkPVRkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOldkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gV2Q9ITEsWGQoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBYZChjLGQpfXJldHVybiBudWxsfX07QmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt0YT1LYTt1YT1JYTt2YT1KYTtCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOnhkLEVudGVyTGVhdmVFdmVudFBsdWdpbjphZCxDaGFuZ2VFdmVudFBsdWdpbjpQYyxTZWxlY3RFdmVudFBsdWdpbjpZZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnpifSk7ZnVuY3Rpb24gWmQoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkZChhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPVpkKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBhZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGJlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGNlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/eChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOngoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnVjKGMpfX1cbmZ1bmN0aW9uIGRlKGEsYil7dmFyIGM9dWMoYi52YWx1ZSksZD11YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGVlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBmZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBnZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGhlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9nZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBpZT12b2lkIDAsamU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09ZmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7aWU9aWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9aWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24ga2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBsZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxtZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMobGUpLmZvckVhY2goZnVuY3Rpb24oYSl7bWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtsZVtiXT1sZVthXX0pfSk7ZnVuY3Rpb24gbmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGxlLmhhc093blByb3BlcnR5KGEpJiZsZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBvZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1uZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBwZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gcWUoYSxiKXtiJiYocGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/eChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp4KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT94KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gcmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gc2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6RWQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkVkKFwiZm9jdXNcIixhKTtFZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6T2IoZSkmJkVkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFiLmluZGV4T2YoZSkmJkUoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24gdGUoKXt9dmFyIHVlPW51bGwsdmU9bnVsbDtcbmZ1bmN0aW9uIHdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiB4ZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgeWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsemU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEFlPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxCZT1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrO1xuZnVuY3Rpb24gQ2UoYSxiLGMsZCxlKXthW0dhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZ4YyhhLGUpO3JlKGMsZCk7ZD1yZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP29lKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9qZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/a2UoYSxoKTp0YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2FlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9hZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTphZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gRGUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBFZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgRmU9W10sR2U9LTE7ZnVuY3Rpb24gRihhKXswPkdlfHwoYS5jdXJyZW50PUZlW0dlXSxGZVtHZV09bnVsbCxHZS0tKX1mdW5jdGlvbiBHKGEsYil7R2UrKztGZVtHZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBIZT17fSxIPXtjdXJyZW50OkhlfSxJPXtjdXJyZW50OiExfSxJZT1IZTtcbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gSGU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gSihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEtlKGEpe0YoSSxhKTtGKEgsYSl9ZnVuY3Rpb24gTGUoYSl7RihJLGEpO0YoSCxhKX1cbmZ1bmN0aW9uIE1lKGEsYixjKXtILmN1cnJlbnQhPT1IZT94KFwiMTY4XCIpOnZvaWQgMDtHKEgsYixhKTtHKEksYyxhKX1mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp4KFwiMTA4XCIsaWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxIZTtJZT1ILmN1cnJlbnQ7RyhILGIsYSk7RyhJLEkuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp4KFwiMTY5XCIpO2M/KGI9TmUoYSxiLEllKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsRihJLGEpLEYoSCxhKSxHKEgsYixhKSk6RihJLGEpO0coSSxjLGEpfXZhciBRZT1udWxsLFJlPW51bGw7ZnVuY3Rpb24gU2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFRlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1FlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtSZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmNvbnRleHREZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gSyhhLGIsYyxkKXtyZXR1cm4gbmV3IFVlKGEsYixjLGQpfVxuZnVuY3Rpb24gVmUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBXZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gVmUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWNjKXJldHVybiAxMTtpZihhPT09ZWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gWGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1LKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBZZShhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpVmUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgWGI6cmV0dXJuIFplKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgYmM6cmV0dXJuICRlKGMsZXwzLGYsYik7Y2FzZSBZYjpyZXR1cm4gJGUoYyxlfDIsZixiKTtjYXNlIFpiOnJldHVybiBhPUsoMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1aYixhLnR5cGU9WmIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBkYzpyZXR1cm4gYT1LKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWRjLGEudHlwZT1kYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgJGI6Zz0xMDticmVhayBhO2Nhc2UgYWM6Zz05O2JyZWFrIGE7Y2FzZSBjYzpnPTExO2JyZWFrIGE7Y2FzZSBlYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGZjOmc9MTY7ZD1udWxsO2JyZWFrIGF9eChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPUsoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBaZShhLGIsYyxkKXthPUsoNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uICRlKGEsYixjLGQpe2E9Syg4LGEsZCxiKTtiPTA9PT0oYiYxKT9ZYjpiYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGFmKGEsYixjKXthPUsoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gYmYoYSxiLGMpe2I9Syg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBjZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGVmKGEsYil7YS5kaWRFcnJvcj0hMTtpZigwPT09YilhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MDtlbHNle2I8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEubGF0ZXN0UGVuZGluZ1RpbWU7MCE9PWMmJihjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU+YiYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTswPT09Yz9jZihhLGIpOmI8YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLGNmKGEsYikpOlxuYj5jJiZjZihhLGIpfWRmKDAsYSl9ZnVuY3Rpb24gZmYoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2E9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yz5iJiYoYj1jKTthPmImJihiPWEpO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gTChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIGpmPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24ga2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgdGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1lZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UudGFnPXJmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9bGYoKTtjPW1mKGMsYSk7dmFyIGQ9bmYoYyk7ZC50YWc9XG5zZjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7b2YoKTtwZihhLGQpO3FmKGEsYyl9fTtmdW5jdGlvbiB1ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFkZChjLGQpfHwhZGQoZSxmKTohMH1cbmZ1bmN0aW9uIHZmKGEsYixjKXt2YXIgZD0hMSxlPUhlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU0oZik6KGU9SihiKT9JZTpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9KZShhLGUpOkhlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9dGY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gd2YoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24geGYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU0oZik6KGY9SihiKT9JZTpILmN1cnJlbnQsZS5jb250ZXh0PUplKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihrZihhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHpmPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBBZihhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigxIT09Yy50YWc/eChcIjMwOVwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6eChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09amYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/eChcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOngoXCIyOTBcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIEJmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ4KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBDZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVhlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPUFmKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1ZZShjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1BZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWJmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVplKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1hZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYz1ZZShiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1BZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgV2I6cmV0dXJuIGI9YmYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHpmKGIpfHxcbmhjKGIpKXJldHVybiBiPVplKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO0JmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PVhiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTpsKGEsYixjLGQpOm51bGw7Y2FzZSBXYjpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbH1pZih6ZihjKXx8aGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO0JmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1YYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmwoYixhLGQsZSk7Y2FzZSBXYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKX1pZih6ZihkKXx8aGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO0JmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscT1nLHU9Zz0wLEI9bnVsbDtudWxsIT09cSYmdTxoLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHc9dChlLHEsaFt1XSxrKTtpZihudWxsPT09dyl7bnVsbD09PXEmJihxPUIpO2JyZWFrfWEmJlxucSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHcsZyx1KTtudWxsPT09bT9sPXc6bS5zaWJsaW5nPXc7bT13O3E9Qn1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKHE9cChlLGhbdV0saykpZz1mKHEsZyx1KSxudWxsPT09bT9sPXE6bS5zaWJsaW5nPXEsbT1xO3JldHVybiBsfWZvcihxPWQoZSxxKTt1PGgubGVuZ3RoO3UrKylpZihCPUEocSxlLHUsaFt1XSxrKSlhJiZudWxsIT09Qi5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT1CLmtleT91OkIua2V5KSxnPWYoQixnLHUpLG51bGw9PT1tP2w9QjptLnNpYmxpbmc9QixtPUI7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBSKGUsZyxoLGspe3ZhciBsPWhjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3goXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/eChcIjE1MVwiKTp2b2lkIDA7XG5mb3IodmFyIG09bD1udWxsLHE9Zyx1PWc9MCxCPW51bGwsdz1oLm5leHQoKTtudWxsIT09cSYmIXcuZG9uZTt1Kyssdz1oLm5leHQoKSl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdj10KGUscSx3LnZhbHVlLGspO2lmKG51bGw9PT12KXtxfHwocT1CKTticmVha31hJiZxJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7cT1CfWlmKHcuZG9uZSlyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PXAoZSx3LnZhbHVlLGspLG51bGwhPT13JiYoZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTtyZXR1cm4gbH1mb3IocT1kKGUscSk7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PUEocSxlLHUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGEmJm51bGwhPT13LmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PXcua2V5P3U6XG53LmtleSksZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1YYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBWYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PVhiOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PVhiP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1BZihhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPVxuay5zaWJsaW5nfWYudHlwZT09PVhiPyhkPVplKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1ZZShmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1BZihhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgV2I6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1iZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cblwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoemYoZikpcmV0dXJuIHYoYSxkLGYsaCk7aWYoaGMoZikpcmV0dXJuIFIoYSxkLGYsaCk7bCYmQmYoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDpoPWEudHlwZSx4KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgRGY9Q2YoITApLEVmPUNmKCExKSxGZj17fSxOPXtjdXJyZW50OkZmfSxHZj17Y3VycmVudDpGZn0sSGY9e2N1cnJlbnQ6RmZ9O2Z1bmN0aW9uIElmKGEpe2E9PT1GZj94KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpmKGEsYil7RyhIZixiLGEpO0coR2YsYSxhKTtHKE4sRmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6aGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWhlKGIsYyl9RihOLGEpO0coTixiLGEpfWZ1bmN0aW9uIEtmKGEpe0YoTixhKTtGKEdmLGEpO0YoSGYsYSl9ZnVuY3Rpb24gTGYoYSl7SWYoSGYuY3VycmVudCk7dmFyIGI9SWYoTi5jdXJyZW50KTt2YXIgYz1oZShiLGEudHlwZSk7YiE9PWMmJihHKEdmLGEsYSksRyhOLGMsYSkpfWZ1bmN0aW9uIE1mKGEpe0dmLmN1cnJlbnQ9PT1hJiYoRihOLGEpLEYoR2YsYSkpfVxudmFyIE5mPTAsT2Y9MixQZj00LFFmPTgsUmY9MTYsU2Y9MzIsVGY9NjQsVWY9MTI4LFZmPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsV2Y9MCxYZj1udWxsLE89bnVsbCxQPW51bGwsWWY9bnVsbCxRPW51bGwsWmY9bnVsbCwkZj0wLGFnPW51bGwsYmc9MCxjZz0hMSxkZz1udWxsLGVnPTA7ZnVuY3Rpb24gZmcoKXt4KFwiMzIxXCIpfWZ1bmN0aW9uIGdnKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIWJkKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUsZil7V2Y9ZjtYZj1iO1A9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7VmYuY3VycmVudD1udWxsPT09UD9pZzpqZztiPWMoZCxlKTtpZihjZyl7ZG8gY2c9ITEsZWcrPTEsUD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCxaZj1ZZixhZz1RPU89bnVsbCxWZi5jdXJyZW50PWpnLGI9YyhkLGUpO3doaWxlKGNnKTtkZz1udWxsO2VnPTB9VmYuY3VycmVudD1rZzthPVhmO2EubWVtb2l6ZWRTdGF0ZT1ZZjthLmV4cGlyYXRpb25UaW1lPSRmO2EudXBkYXRlUXVldWU9YWc7YS5lZmZlY3RUYWd8PWJnO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2E/eChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9ZnVuY3Rpb24gbGcoKXtWZi5jdXJyZW50PWtnO1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDtjZz0hMTtkZz1udWxsO2VnPTB9XG5mdW5jdGlvbiBtZygpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UT9ZZj1RPWE6UT1RLm5leHQ9YTtyZXR1cm4gUX1mdW5jdGlvbiBuZygpe2lmKG51bGwhPT1aZilRPVpmLFpmPVEubmV4dCxPPVAsUD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle251bGw9PT1QP3goXCIzMTBcIik6dm9pZCAwO089UDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtRPW51bGw9PT1RP1lmPWE6US5uZXh0PWE7UD1PLm5leHR9cmV0dXJuIFF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBwZyhhKXt2YXIgYj1uZygpLGM9Yi5xdWV1ZTtudWxsPT09Yz94KFwiMzExXCIpOnZvaWQgMDtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPGVnKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1kZyl7dmFyIGU9ZGcuZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe2RnLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsbD1kLGs9ITE7ZG97dmFyIG09bC5leHBpcmF0aW9uVGltZTttPFdmPyhrfHwoaz0hMCxoPWcsZT1mKSxtPiRmJiYoJGY9bSkpOmY9bC5lYWdlclJlZHVjZXI9PT1hP2wuZWFnZXJTdGF0ZTphKGYsbC5hY3Rpb24pO2c9bDtsPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWQpO2t8fChoPWcsZT1mKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09YWc/KGFnPXtsYXN0RWZmZWN0Om51bGx9LGFnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPWFnLmxhc3RFZmZlY3QsbnVsbD09PWI/YWcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsYWcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2coYSxiLGMsZCl7dmFyIGU9bWcoKTtiZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB0ZyhhLGIsYyxkKXt2YXIgZT1uZygpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmdnKGQsZy5kZXBzKSl7cmcoTmYsYyxmLGQpO3JldHVybn19Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyxmLGQpfWZ1bmN0aW9uIHVnKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gdmcoKXt9XG5mdW5jdGlvbiB3ZyhhLGIsYyl7MjU+ZWc/dm9pZCAwOngoXCIzMDFcIik7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PVhmfHxudWxsIT09ZCYmZD09PVhmKWlmKGNnPSEwLGE9e2V4cGlyYXRpb25UaW1lOldmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1kZyYmKGRnPW5ldyBNYXApLGM9ZGcuZ2V0KGIpLHZvaWQgMD09PWMpZGcuc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7b2YoKTt2YXIgZT1sZigpO2U9bWYoZSxhKTt2YXIgZj17ZXhwaXJhdGlvblRpbWU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1cbmR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGw9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGJkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31xZihhLGUpfX1cbnZhciBrZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmZyx1c2VDb250ZXh0OmZnLHVzZUVmZmVjdDpmZyx1c2VJbXBlcmF0aXZlSGFuZGxlOmZnLHVzZUxheW91dEVmZmVjdDpmZyx1c2VNZW1vOmZnLHVzZVJlZHVjZXI6ZmcsdXNlUmVmOmZnLHVzZVN0YXRlOmZnLHVzZURlYnVnVmFsdWU6Zmd9LGlnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7bWcoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHNnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg0LFBmfFNmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW1nKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW1nKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1tZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1tZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsXG5sYXN0UmVuZGVyZWRSZWR1Y2VyOm9nLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTp2Z30samc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGcoNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0Zyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxcbmIpe3JldHVybiB0Zyg0LFBmfFNmLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6cGcsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIG5nKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHBnKG9nLGEpfSx1c2VEZWJ1Z1ZhbHVlOnZnfSx4Zz1udWxsLHlnPW51bGwsemc9ITE7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUsoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBCZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gQ2coYSl7aWYoemcpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUJnKGEsYikpe2I9RGUoYyk7aWYoIWJ8fCFCZyhhLGIpKXthLmVmZmVjdFRhZ3w9Mjt6Zz0hMTt4Zz1hO3JldHVybn1BZyh4ZyxjKX14Zz1hO3lnPUVlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsemc9ITEseGc9YX19ZnVuY3Rpb24gRGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxOCE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9ZnVuY3Rpb24gRWcoYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCF6ZylyZXR1cm4gRGcoYSksemc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiF4ZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9eWc7YjspQWcoYSxiKSxiPURlKGIpO0RnKGEpO3lnPXhnP0RlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEZnKCl7eWc9eGc9bnVsbDt6Zz0hMX1cbnZhciBHZz1UYi5SZWFjdEN1cnJlbnRPd25lcixxZz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/RWYoYixudWxsLGMsZCk6RGYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gSGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0lnKGIsZSk7ZD1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFWZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxMZyhhLGIsZyxkLGUsZik7YT1ZZShjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmRkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEpnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVhlKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZkZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihxZz0hMSxlPGYpP0pnKGEsYixmKTpNZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIE5nKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gTWcoYSxiLGMsZCxlKXt2YXIgZj1KKGMpP0llOkguY3VycmVudDtmPUplKGIsZik7SWcoYixlKTtjPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBPZyhhLGIsYyxkLGUpe2lmKEooYykpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtJZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksdmYoYixjLGQsZSkseGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKTtQZz0hMTt2YXIgdD1iLm1lbW9pemVkU3RhdGU7bD1nLnN0YXRlPXQ7dmFyIEE9Yi51cGRhdGVRdWV1ZTtudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksbD1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx0IT09bHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSxsPWIubWVtb2l6ZWRTdGF0ZSksKGg9UGd8fHVmKGIsYyxoLGQsdCxsLGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWwpLGcucHJvcHM9ZCxnLnN0YXRlPWwsZy5jb250ZXh0PWssZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkwoYi50eXBlLGgpLGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspLFBnPSExLGw9Yi5tZW1vaXplZFN0YXRlLHQ9Zy5zdGF0ZT1sLEE9Yi51cGRhdGVRdWV1ZSxudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksdD1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxsIT09dHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSx0PWIubWVtb2l6ZWRTdGF0ZSksKG09UGd8fHVmKGIsYyxoLGQsbCx0LGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1cbnQpLGcucHJvcHM9ZCxnLnN0YXRlPXQsZy5jb250ZXh0PWssZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIFFnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIFFnKGEsYixjLGQsZSxmKXtOZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmUGUoYixjLCExKSxKZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtHZy5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1EZihiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPURmKGIsbnVsbCxoLGYpKTpTKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlBlKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9NZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZNZShhLGIuY29udGV4dCwhMSk7SmYoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gU2coYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFN0YXRlO2lmKDA9PT0oYi5lZmZlY3RUYWcmNjQpKXtmPW51bGw7dmFyIGc9ITF9ZWxzZSBmPXt0aW1lZE91dEF0Om51bGwhPT1mP2YudGltZWRPdXRBdDowfSxnPSEwLGIuZWZmZWN0VGFnJj0tNjU7aWYobnVsbD09PWEpaWYoZyl7dmFyIGg9ZS5mYWxsYmFjazthPVplKG51bGwsZCwwLG51bGwpOzA9PT0oYi5tb2RlJjEpJiYoYS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCk7ZD1aZShoLGQsYyxudWxsKTthLnNpYmxpbmc9ZDtjPWE7Yy5yZXR1cm49ZC5yZXR1cm49Yn1lbHNlIGM9ZD1FZihiLG51bGwsZS5jaGlsZHJlbixjKTtlbHNlIG51bGwhPT1hLm1lbW9pemVkU3RhdGU/KGQ9YS5jaGlsZCxoPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZT1YZShkLGQucGVuZGluZ1Byb3BzLDApLDA9PT0oYi5tb2RlJjEpJiYoZz1udWxsIT09XG5iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1kLmNoaWxkJiYoZS5jaGlsZD1nKSksZD1lLnNpYmxpbmc9WGUoaCxjLGguZXhwaXJhdGlvblRpbWUpLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9RGYoYixkLmNoaWxkLGUuY2hpbGRyZW4sYykpOihoPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9WmUobnVsbCxkLDAsbnVsbCksZS5jaGlsZD1oLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1lLnNpYmxpbmc9WmUoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1EZihiLGgsZS5jaGlsZHJlbixjKSksYi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGU7Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gSmcoYSxiLGMpe251bGwhPT1hJiYoYi5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcyk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3goXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBUZyhhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8SS5jdXJyZW50KXFnPSEwO2Vsc2V7aWYoZDxjKXtxZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpSZyhiKTtGZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6SihiLnR5cGUpJiZPZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOlVnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiBTZyhhLGIsYyk7Yj1KZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gSmcoYSxiLGMpfX1lbHNlIHFnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPVxuYi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1KZShiLEguY3VycmVudCk7SWcoYixjKTtlPWhnKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7bGcoKTtpZihKKGQpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYma2YoYixkLGcsYSk7ZS51cGRhdGVyPXRmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7eGYoYixkLGEsYyk7Yj1RZyhudWxsLGIsZCwhMCxmLFxuYyl9ZWxzZSBiLnRhZz0wLFMobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9aGYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1XZShhKTtmPUwoYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9TWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz1PZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1IZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1LZyhudWxsLGIsYSxMKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6eChcIjMwNlwiLGEsXCJcIil9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksTWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsXG5lPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE9nKGEsYixkLGUsYyk7Y2FzZSAzOlJnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD94KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpRmcoKSxiPUpnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKXlnPUVlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLHhnPWIsZT16Zz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPUVmKGIsbnVsbCxkLGMpKTooUyhhLGIsZCxjKSxGZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBMZihiKSxudWxsPT09YSYmQ2coYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLFxuZz1lLmNoaWxkcmVuLHhlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZ4ZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxOZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUyhhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2coYiksbnVsbDtjYXNlIDEzOnJldHVybiBTZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1EZihiLG51bGwsZCxjKTpTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLEhnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtVZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9YmQoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUkuY3VycmVudCl7Yj1KZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgbD1oLmNvbnRleHREZXBlbmRlbmNpZXM7aWYobnVsbCE9PWwpe2c9aC5jaGlsZDtmb3IodmFyIGs9bC5maXJzdDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQmJjAhPT1cbihrLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYoaz1uZihjKSxrLnRhZz1zZixwZihoLGspKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2s9aC5hbHRlcm5hdGU7bnVsbCE9PWsmJmsuZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7az1jO2Zvcih2YXIgbT1oLnJldHVybjtudWxsIT09bTspe3ZhciBwPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxrKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1rLG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8ayYmKHAuY2hpbGRFeHBpcmF0aW9uVGltZT1rKTtlbHNlIGlmKG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8aylwLmNoaWxkRXhwaXJhdGlvblRpbWU9aztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP1xubnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sSWcoYixjKSxlPU0oZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPUwoZSxiLnBlbmRpbmdQcm9wcyksZj1MKGUudHlwZSxmKSxLZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gTGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09XG5kP2U6TChkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEooZCk/KGE9ITAsT2UoYikpOmE9ITEsSWcoYixjKSx2ZihiLGQsZSxjKSx4ZihiLGQsZSxjKSxRZyhudWxsLGIsZCwhMCxhLGMpfXgoXCIxNTZcIil9dmFyIFZnPXtjdXJyZW50Om51bGx9LFdnPW51bGwsWGc9bnVsbCxZZz1udWxsO2Z1bmN0aW9uIFVnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0coVmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIFpnKGEpe3ZhciBiPVZnLmN1cnJlbnQ7RihWZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIElnKGEsYil7V2c9YTtZZz1YZz1udWxsO3ZhciBjPWEuY29udGV4dERlcGVuZGVuY2llcztudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZT49YiYmKHFnPSEwKTthLmNvbnRleHREZXBlbmRlbmNpZXM9bnVsbH1cbmZ1bmN0aW9uIE0oYSxiKXtpZihZZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpWWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PVhnPyhudWxsPT09V2c/eChcIjMwOFwiKTp2b2lkIDAsWGc9YixXZy5jb250ZXh0RGVwZW5kZW5jaWVzPXtmaXJzdDpiLGV4cGlyYXRpb25UaW1lOjB9KTpYZz1YZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgJGc9MCxyZj0xLHNmPTIsYWg9MyxQZz0hMTtmdW5jdGlvbiBiaChhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBjaChhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOiRnLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIGRoKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHBmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1iaChjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9Y2goZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9Y2goZCkpO251bGw9PT1lfHxkPT09ZT9kaChkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KGRoKGQsYiksZGgoZSxiKSk6KGRoKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZWgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpOmZoKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9Y2goYikpO3JldHVybiBifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSByZjpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgYWg6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAkZzphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2Ugc2Y6UGc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiB5ZihhLGIsYyxkLGUpe1BnPSExO2I9ZmgoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxsPWIuZmlyc3RVcGRhdGUsaz1mO251bGwhPT1sOyl7dmFyIG09bC5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1sLGY9ayksaDxtJiYoaD1tKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bDooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RFZmZlY3Q9bCkpKTtsPWwubmV4dH1tPW51bGw7Zm9yKGw9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1sOyl7dmFyIHA9bC5leHBpcmF0aW9uVGltZTtwPGU/KG51bGw9PT1tJiYobT1sLG51bGw9PT1nJiYoZj1rKSksaDxwJiYoaD1wKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1sOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bCkpKTtsPWwubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWspO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9a31cbmZ1bmN0aW9uIGhoKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtpaChiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7aWgoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIGloKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIGpoKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6amMoYil9fWZ1bmN0aW9uIGtoKGEpe2EuZWZmZWN0VGFnfD00fXZhciBsaD12b2lkIDAsbWg9dm9pZCAwLG5oPXZvaWQgMCxvaD12b2lkIDA7bGg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O21oPWZ1bmN0aW9uKCl7fTtcbm5oPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihOLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj12YyhnLGYpO2Q9dmMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPSRkKGcsZik7ZD0kZChnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWJlKGcsZik7ZD1iZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXRlKX1xZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmc2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZraChiKX19O29oPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZraChiKX07XG52YXIgcGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gcWgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1qYyhjKSk7bnVsbCE9PWMmJmljKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJmljKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIHJoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3NoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIHRoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09TmYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1OZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIHVoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1uZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gdmgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFJlJiZSZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe3NoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6cmgoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe3NoKGEsZil9YnJlYWs7Y2FzZSA1OnJoKGEpO2JyZWFrO2Nhc2UgNDp3aChhKX19XG5mdW5jdGlvbiB4aChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIHloKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKHhoKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn14KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6eChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKGtlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHx4aChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyZcbjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9dGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiB3aChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz94KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYodmgoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnKXtpZihudWxsIT09Yi5jaGlsZCl7ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYodmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gemgoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp0aChQZixRZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZDZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9bGYoKSkpO251bGwhPT1hJiZ1aChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBwaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUFoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fXZhciBCaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBDaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGgoZCk7cWgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Rmg/Rmg9bmV3IFNldChbdGhpc10pOkZoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7cWgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBHaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpKKGEudHlwZSkmJktlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIEtmKGEpLExlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT94KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBNZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAxODpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gWmcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBIaD1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEloPVRiLlJlYWN0Q3VycmVudE93bmVyLEpoPTEwNzM3NDE4MjIsS2g9ITEsVD1udWxsLExoPW51bGwsVT0wLE1oPS0xLE5oPSExLFY9bnVsbCxPaD0hMSxQaD1udWxsLFFoPW51bGwsUmg9bnVsbCxGaD1udWxsO2Z1bmN0aW9uIFNoKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTticmVhaztjYXNlIDU6TWYoYik7YnJlYWs7Y2FzZSA0OktmKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYil9YT1hLnJldHVybn1MaD1udWxsO1U9MDtNaD0tMTtOaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBUaCgpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYT1WLmVmZmVjdFRhZzthJjE2JiZrZShWLnN0YXRlTm9kZSxcIlwiKTtpZihhJjEyOCl7dmFyIGI9Vi5hbHRlcm5hdGU7bnVsbCE9PWImJihiPWIucmVmLG51bGwhPT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihudWxsKTpiLmN1cnJlbnQ9bnVsbCkpfXN3aXRjaChhJjE0KXtjYXNlIDI6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OnpoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODphPVYsd2goYSksYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsLGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwpfVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFVoKCl7Zm9yKDtudWxsIT09Vjspe2lmKFYuZWZmZWN0VGFnJjI1NilhOnt2YXIgYT1WLmFsdGVybmF0ZSxiPVY7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKE9mLE5mLGIpO2JyZWFrIGE7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6TChiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OngoXCIxNjNcIil9fVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFZoKGEsYil7Zm9yKDtudWxsIT09Vjspe3ZhciBjPVYuZWZmZWN0VGFnO2lmKGMmMzYpe3ZhciBkPVYuYWx0ZXJuYXRlLGU9VixmPWI7c3dpdGNoKGUudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKFJmLFNmLGUpO2JyZWFrO2Nhc2UgMTp2YXIgZz1lLnN0YXRlTm9kZTtpZihlLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kKWcuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoPWUuZWxlbWVudFR5cGU9PT1lLnR5cGU/ZC5tZW1vaXplZFByb3BzOkwoZS50eXBlLGQubWVtb2l6ZWRQcm9wcyk7Zy5jb21wb25lbnREaWRVcGRhdGUoaCxkLm1lbW9pemVkU3RhdGUsZy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9ZD1lLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiZoaChlLGQsZyxmKTticmVhaztjYXNlIDM6ZD1lLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kKXtnPW51bGw7aWYobnVsbCE9PWUuY2hpbGQpc3dpdGNoKGUuY2hpbGQudGFnKXtjYXNlIDU6Zz1cbmUuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPWUuY2hpbGQuc3RhdGVOb2RlfWhoKGUsZCxnLGYpfWJyZWFrO2Nhc2UgNTpmPWUuc3RhdGVOb2RlO251bGw9PT1kJiZlLmVmZmVjdFRhZyY0JiZ3ZShlLnR5cGUsZS5tZW1vaXplZFByb3BzKSYmZi5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX1jJjEyOCYmKGU9Vi5yZWYsbnVsbCE9PWUmJihmPVYuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlP2UoZik6ZS5jdXJyZW50PWYpKTtjJjUxMiYmKFBoPWEpO1Y9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFdoKGEsYil7Umg9UWg9UGg9bnVsbDt2YXIgYz1XO1c9ITA7ZG97aWYoYi5lZmZlY3RUYWcmNTEyKXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7dmFyIGY9Yjt0aChVZixOZixmKTt0aChOZixUZixmKX1jYXRjaChnKXtkPSEwLGU9Z31kJiZzaChiLGUpfWI9Yi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1iKTtXPWM7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpO1h8fFd8fFloKDEwNzM3NDE4MjMsITEpfWZ1bmN0aW9uIG9mKCl7bnVsbCE9PVFoJiZCZShRaCk7bnVsbCE9PVJoJiZSaCgpfVxuZnVuY3Rpb24gWmgoYSxiKXtPaD1LaD0hMDthLmN1cnJlbnQ9PT1iP3goXCIxNzdcIik6dm9pZCAwO3ZhciBjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3goXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZSxlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtlZihhLGU+ZD9lOmQpO0loLmN1cnJlbnQ9bnVsbDtkPXZvaWQgMDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3VlPUJkO3ZlPVBkKCk7QmQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7dmFyIGY9dm9pZCAwO3RyeXtVaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1mb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtcbmY9dm9pZCAwO3RyeXtUaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1RZCh2ZSk7dmU9bnVsbDtCZD0hIXVlO3VlPW51bGw7YS5jdXJyZW50PWI7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e1ZoKGEsYyl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWlmKG51bGwhPT1kJiZudWxsIT09UGgpe3ZhciBnPVdoLmJpbmQobnVsbCxhLGQpO1FoPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gQWUoZyl9KTtSaD1nfUtoPU9oPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBRZSYmUWUoYi5zdGF0ZU5vZGUpO2M9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPVxuYj5jP2I6YzswPT09YiYmKEZoPW51bGwpOyRoKGEsYil9XG5mdW5jdGlvbiBhaShhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7VD1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVU7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpRWcoYiksYi5lZmZlY3RUYWcmPS0zO21oKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTt2YXIgaD1JZihIZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpbmgoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBsPUlmKE4uY3VycmVudCk7aWYoRWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxwPWg7ZVtGYV09ZztlW0dhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxhYi5sZW5ndGg7aysrKUUoYWJba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLGUpO0UoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixlKTtFKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MoZSxtKTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UoZSxtKSxFKFwiaW52YWxpZFwiLGUpLHNlKHAsXCJvbkNoYW5nZVwiKX1xZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmc2UocCxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlJiKGUpO0FjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIoZSk7ZWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXRlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYma2goYil9ZWxzZXttPWI7cD1mO2U9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1mZS5odG1sJiYobD1nZShwKSk7bD09PWZlLmh0bWw/XCJzY3JpcHRcIj09PXA/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZS5pcz9rPWsuY3JlYXRlRWxlbWVudChwLHtpczplLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KHApLFwic2VsZWN0XCI9PT1wJiYocD1rLGUubXVsdGlwbGU/cC5tdWx0aXBsZT0hMDplLnNpemUmJihwLnNpemU9ZS5zaXplKSkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxwKTtlPWs7ZVtGYV09bTtlW0dhXT1nO2xoKGUsYiwhMSwhMSk7cD1lO2s9ZjttPWc7dmFyIHQ9aCxBPXJlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixcbnApO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWIubGVuZ3RoO2grKylFKGFiW2hdLHApO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLHApO0UoXCJsb2FkXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIscCk7RShcInN1Ym1pdFwiLHApO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixwKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MocCxtKTtoPXZjKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9JGQocCxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShwLFxubSk7aD1iZShwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXFlKGssaCk7bD12b2lkIDA7dmFyIHY9ayxSPXAsdT1oO2ZvcihsIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIHE9dVtsXTtcInN0eWxlXCI9PT1sP29lKFIscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8ocT1xP3EuX19odG1sOnZvaWQgMCxudWxsIT1xJiZqZShSLHEpKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2YgcT8oXCJ0ZXh0YXJlYVwiIT09dnx8XCJcIiE9PXEpJiZrZShSLHEpOlwibnVtYmVyXCI9PT10eXBlb2YgcSYma2UoUixcIlwiK3EpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihyYS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1xJiZzZSh0LGwpOm51bGwhPXEmJnRjKFIsbCxxLEEpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6UmIocCk7XG5BYyhwLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKHApO2VlKHAsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnAuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3VjKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1wO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3A9bS52YWx1ZTtudWxsIT1wP2FlKGgsISFtLm11bHRpcGxlLHAsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZhZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocC5vbmNsaWNrPXRlKX0oZz13ZShmLGcpKSYma2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/b2goZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDApLGU9SWYoSGYuY3VycmVudCksSWYoTi5jdXJyZW50KSxFZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltGYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZraChiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tGYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7VD1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6S2YoYik7bWgoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAxODpicmVhaztkZWZhdWx0OngoXCIxNTZcIil9VD1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVQpcmV0dXJuIFQ7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmXG4oYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdoKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGJpKGEpe3ZhciBiPVRnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1haShhKSk7SWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gY2koYSxiKXtLaD94KFwiMjQzXCIpOnZvaWQgMDtvZigpO0toPSEwO3ZhciBjPUhoLmN1cnJlbnQ7SGguY3VycmVudD1rZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1VfHxhIT09TGh8fG51bGw9PT1UKVNoKCksTGg9YSxVPWQsVD1YZShMaC5jdXJyZW50LG51bGwsVSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1UJiYhZGkoKTspVD1iaShUKTtlbHNlIGZvcig7bnVsbCE9PVQ7KVQ9YmkoVCl9Y2F0Y2godSl7aWYoWWc9WGc9V2c9bnVsbCxsZygpLG51bGw9PT1UKWU9ITAsRGgodSk7ZWxzZXtudWxsPT09VD94KFwiMjcxXCIpOnZvaWQgMDt2YXIgZj1ULGc9Zi5yZXR1cm47aWYobnVsbD09PWcpZT0hMCxEaCh1KTtlbHNle2E6e3ZhciBoPWEsbD1nLGs9ZixtPXU7Zz1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PVxubSYmXCJvYmplY3RcIj09PXR5cGVvZiBtJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS50aGVuKXt2YXIgcD1tO209bDt2YXIgdD0tMSxBPS0xO2Rve2lmKDEzPT09bS50YWcpe3ZhciB2PW0uYWx0ZXJuYXRlO2lmKG51bGwhPT12JiYodj12Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXYpKXtBPTEwKigxMDczNzQxODIyLXYudGltZWRPdXRBdCk7YnJlYWt9dj1tLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHYpaWYoMD49dil0PTA7ZWxzZSBpZigtMT09PXR8fHY8dCl0PXZ9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1sO2Rve2lmKHY9MTM9PT1tLnRhZyl2PXZvaWQgMD09PW0ubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bS5tZW1vaXplZFN0YXRlO2lmKHYpe2w9bS51cGRhdGVRdWV1ZTtudWxsPT09bD8obD1uZXcgU2V0LGwuYWRkKHApLG0udXBkYXRlUXVldWU9bCk6bC5hZGQocCk7aWYoMD09PShtLm1vZGUmMSkpe20uZWZmZWN0VGFnfD1cbjY0O2suZWZmZWN0VGFnJj0tMTk1NzsxPT09ay50YWcmJihudWxsPT09ay5hbHRlcm5hdGU/ay50YWc9MTc6KGc9bmYoMTA3Mzc0MTgyMyksZy50YWc9c2YscGYoayxnKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9aDtsPWc7dmFyIFI9ay5waW5nQ2FjaGU7bnVsbD09PVI/KFI9ay5waW5nQ2FjaGU9bmV3IEJoLHY9bmV3IFNldCxSLnNldChwLHYpKToodj1SLmdldChwKSx2b2lkIDA9PT12JiYodj1uZXcgU2V0LFIuc2V0KHAsdikpKTt2LmhhcyhsKXx8KHYuYWRkKGwpLGs9ZWkuYmluZChudWxsLGsscCxsKSxwLnRoZW4oayxrKSk7LTE9PT10P2g9MTA3Mzc0MTgyMzooLTE9PT1BJiYoQT0xMCooMTA3Mzc0MTgyMi1nZihoLGcpKS01RTMpLGg9QSt0KTswPD1oJiZNaDxoJiYoTWg9aCk7bS5lZmZlY3RUYWd8PTIwNDg7bS5leHBpcmF0aW9uVGltZT1nO2JyZWFrIGF9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1FcnJvcigoaWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcblwiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIramMoaykpfU5oPSEwO209amgobSxrKTtoPWw7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5lZmZlY3RUYWd8PTIwNDg7aC5leHBpcmF0aW9uVGltZT1nO2c9Q2goaCxtLGcpO2VoKGgsZyk7YnJlYWsgYTtjYXNlIDE6aWYodD1tLEE9aC50eXBlLGs9aC5zdGF0ZU5vZGUsMD09PShoLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1rJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhrKSkpKXtoLmVmZmVjdFRhZ3w9MjA0ODtcbmguZXhwaXJhdGlvblRpbWU9ZztnPUVoKGgsdCxnKTtlaChoLGcpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVQ9YWkoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtLaD0hMTtIaC5jdXJyZW50PWM7WWc9WGc9V2c9bnVsbDtsZygpO2lmKGUpTGg9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVQpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2M9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09Yz94KFwiMjgxXCIpOnZvaWQgMDtMaD1udWxsO2lmKE5oKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7Zj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU8ZHx8MCE9PWYmJmY8ZHx8MCE9PWcmJmc8ZCl7ZmYoYSxkKTtmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJmIpe2EuZGlkRXJyb3I9ITA7ZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWQ7XG5iPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztmaShhLGMsZCxiLC0xKTtyZXR1cm59fWImJi0xIT09TWg/KGZmKGEsZCksYj0xMCooMTA3Mzc0MTgyMi1nZihhLGQpKSxiPE1oJiYoTWg9YiksYj0xMCooMTA3Mzc0MTgyMi1sZigpKSxiPU1oLWIsZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWQsYS5maW5pc2hlZFdvcms9Yyl9fVxuZnVuY3Rpb24gc2goYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoZCkpKXthPWpoKGIsYSk7YT1FaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT1qaChiLGEpO2E9Q2goYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPWpoKGIsYSksYz1DaChhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxxZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIG1mKGEsYil7dmFyIGM9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpLGQ9dm9pZCAwO2lmKDA9PT0oYi5tb2RlJjEpKWQ9MTA3Mzc0MTgyMztlbHNlIGlmKEtoJiYhT2gpZD1VO2Vsc2V7c3dpdGNoKGMpe2Nhc2Ugci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eTpkPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eTpkPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX0xvd1ByaW9yaXR5OmNhc2Ugci51bnN0YWJsZV9JZGxlUHJpb3JpdHk6ZD0xO2JyZWFrO2RlZmF1bHQ6eChcIjMxM1wiKX1udWxsIT09TGgmJmQ9PT1VJiYtLWR9Yz09PXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkmJlxuKDA9PT1naXx8ZDxnaSkmJihnaT1kKTtyZXR1cm4gZH1mdW5jdGlvbiBlaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1MaCYmVT09PWMpTGg9bnVsbDtlbHNlIGlmKGI9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWUsMCE9PWImJmM8PWImJmM+PWQpe2EuZGlkRXJyb3I9ITE7Yj1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWJ8fGI+YylhLmxhdGVzdFBpbmdlZFRpbWU9YztkZihjLGEpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKX19ZnVuY3Rpb24gQWgoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1sZigpO2I9bWYoYixhKTthPWhpKGEsYik7bnVsbCE9PWEmJihjZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmWGgoYSxiKSl9XG5mdW5jdGlvbiBoaShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gcWYoYSxiKXthPWhpKGEsYik7bnVsbCE9PWEmJighS2gmJjAhPT1VJiZiPlUmJlNoKCksY2YoYSxiKSxLaCYmIU9oJiZMaD09PWF8fFhoKGEsYS5leHBpcmF0aW9uVGltZSksaWk+amkmJihpaT0wLHgoXCIxODVcIikpKX1mdW5jdGlvbiBraShhLGIsYyxkLGUpe3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX12YXIgbGk9bnVsbCxZPW51bGwsbWk9MCxuaT12b2lkIDAsVz0hMSxvaT1udWxsLFo9MCxnaT0wLHBpPSExLHFpPW51bGwsWD0hMSxyaT0hMSxzaT1udWxsLHRpPXIudW5zdGFibGVfbm93KCksdWk9MTA3Mzc0MTgyMi0odGkvMTB8MCksdmk9dWksamk9NTAsaWk9MCx3aT1udWxsO2Z1bmN0aW9uIHhpKCl7dWk9MTA3Mzc0MTgyMi0oKHIudW5zdGFibGVfbm93KCktdGkpLzEwfDApfVxuZnVuY3Rpb24geWkoYSxiKXtpZigwIT09bWkpe2lmKGI8bWkpcmV0dXJuO251bGwhPT1uaSYmci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhuaSl9bWk9YjthPXIudW5zdGFibGVfbm93KCktdGk7bmk9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHppLHt0aW1lb3V0OjEwKigxMDczNzQxODIyLWIpLWF9KX1mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2EuZXhwaXJhdGlvblRpbWU9ZDswIT09ZXx8ZGkoKT8wPGUmJihhLnRpbWVvdXRIYW5kbGU9eWUoQWkuYmluZChudWxsLGEsYixjKSxlKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9Yil9ZnVuY3Rpb24gQWkoYSxiLGMpe2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWM7YS5maW5pc2hlZFdvcms9Yjt4aSgpO3ZpPXVpO0JpKGEsYyl9ZnVuY3Rpb24gJGgoYSxiKXthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1cbmZ1bmN0aW9uIGxmKCl7aWYoVylyZXR1cm4gdmk7Q2koKTtpZigwPT09Wnx8MT09PVopeGkoKSx2aT11aTtyZXR1cm4gdml9ZnVuY3Rpb24gWGgoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1ZPyhsaT1ZPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWT1ZLm5leHRTY2hlZHVsZWRSb290PWEsWS5uZXh0U2NoZWR1bGVkUm9vdD1saSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFg/cmkmJihvaT1hLFo9MTA3Mzc0MTgyMyxEaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9ZaCgxMDczNzQxODIzLCExKTp5aShhLGIpKX1cbmZ1bmN0aW9uIENpKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVkpZm9yKHZhciBjPVksZD1saTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WT94KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGk9WT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGkpbGk9ZT1kLm5leHRTY2hlZHVsZWRSb290LFkubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WSl7WT1jO1kubmV4dFNjaGVkdWxlZFJvb3Q9bGk7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WSlicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fW9pPWI7Wj1hfXZhciBFaT0hMTtmdW5jdGlvbiBkaSgpe3JldHVybiBFaT8hMDpyLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/RWk9ITA6ITF9ZnVuY3Rpb24gemkoKXt0cnl7aWYoIWRpKCkmJm51bGwhPT1saSl7eGkoKTt2YXIgYT1saTtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZ1aTw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249dWkpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09bGkpfVloKDAsITApfWZpbmFsbHl7RWk9ITF9fVxuZnVuY3Rpb24gWWgoYSxiKXtDaSgpO2lmKGIpZm9yKHhpKCksdmk9dWk7bnVsbCE9PW9pJiYwIT09WiYmYTw9WiYmIShFaSYmdWk+Wik7KURpKG9pLFosdWk+WiksQ2koKSx4aSgpLHZpPXVpO2Vsc2UgZm9yKDtudWxsIT09b2kmJjAhPT1aJiZhPD1aOylEaShvaSxaLCExKSxDaSgpO2ImJihtaT0wLG5pPW51bGwpOzAhPT1aJiZ5aShvaSxaKTtpaT0wO3dpPW51bGw7aWYobnVsbCE9PXNpKWZvcihhPXNpLHNpPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7cGl8fChwaT0hMCxxaT1kKX19aWYocGkpdGhyb3cgYT1xaSxxaT1udWxsLHBpPSExLGE7fWZ1bmN0aW9uIEJpKGEsYil7Vz94KFwiMjUzXCIpOnZvaWQgMDtvaT1hO1o9YjtEaShhLGIsITEpO1loKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gRGkoYSxiLGMpe1c/eChcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihkaSgpP2EuZmluaXNoZWRXb3JrPWQ6RmkoYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmRmkoYSxkLGIpKTtXPSExfVxuZnVuY3Rpb24gRmkoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09c2k/c2k9W2RdOnNpLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09d2k/aWkrKzood2k9YSxpaT0wKTtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7WmgoYSxiKX0pfWZ1bmN0aW9uIERoKGEpe251bGw9PT1vaT94KFwiMjQ2XCIpOnZvaWQgMDtvaS5leHBpcmF0aW9uVGltZT0wO3BpfHwocGk9ITAscWk9YSl9ZnVuY3Rpb24gR2koYSxiKXt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFg9Yyl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEhpKGEsYil7aWYoWCYmIXJpKXtyaT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtyaT0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gSWkoYSxiLGMpe1h8fFd8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKTt2YXIgZD1YO1g9ITA7dHJ5e3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjKX0pfWZpbmFsbHl7KFg9ZCl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEppKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWVkKGMpJiYxPT09Yy50YWc/dm9pZCAwOngoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoSihnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3goXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoSihoKSl7Yz1OZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1IZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1uZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5vZigpO3BmKGYsZSk7cWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBLaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1sZigpO2U9bWYoZixlKTtyZXR1cm4gSmkoYSxiLGMsZSxkKX1mdW5jdGlvbiBMaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIE1pKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6V2Isa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5BYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOnljKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1LYShkKTtlP3ZvaWQgMDp4KFwiOTBcIik7U2IoZCk7eWMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZhZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gTmkoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWxmKCkrNTAwKS8yNXwwKSsxKTtiPj1KaCYmKGI9SmgtMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smg9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfU5pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOngoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBPaTtKaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5OaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5OaS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6eChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD94KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO0JpKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O05pLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBPaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfU9pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5PaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIFBpKGEsYixjKXtiPUsoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGluZ0NhY2hlOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuUGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBPaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7S2koYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtQaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgT2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO0tpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307UGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IE9pO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtLaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuUGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IE5pKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gUWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUdiPUdpO0hiPUlpO0liPWZ1bmN0aW9uKCl7V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApfTtcbmZ1bmN0aW9uIFJpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgUGkoYSwhMSxiKX1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVJpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1IaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gTGkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIFRpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIE1pKGEsYixudWxsLGMpfVxudmFyIFZpPXtjcmVhdGVQb3J0YWw6VGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj94KFwiMTg4XCIpOngoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9aGQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtRaShjKT92b2lkIDA6eChcIjIwMFwiKTtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/XG54KFwiMzhcIik6dm9pZCAwO3JldHVybiBTaShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtRaShhKT92b2lkIDA6eChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEhpKGZ1bmN0aW9uKCl7U2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gVGkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOkdpLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpJaSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3goXCIxODdcIik6dm9pZCAwO3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGtpKGEsYil9ZmluYWxseXtYPWMsWWgoMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9jcmVhdGVSb290OlVpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1cblg7WD0hMDt0cnl7a2koYSl9ZmluYWxseXsoWD1iKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltJYSxKYSxLYSxCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscGEsUWEsZnVuY3Rpb24oYSl7eWEoYSxQYSl9LEViLEZiLERkLERhXX19O2Z1bmN0aW9uIFVpKGEsYil7UWkoYSk/dm9pZCAwOngoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBQaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1cbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBUZShuKHt9LGEse292ZXJyaWRlUHJvcHM6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi44LjZcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgV2k9e2RlZmF1bHQ6Vml9LFhpPVdpJiZWaXx8V2k7bW9kdWxlLmV4cG9ydHM9WGkuZGVmYXVsdHx8WGk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjEzLjZcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD1udWxsLGU9ITEsZz0zLGs9LTEsbD0tMSxtPSExLG49ITE7ZnVuY3Rpb24gcCgpe2lmKCFtKXt2YXIgYT1kLmV4cGlyYXRpb25UaW1lO24/cSgpOm49ITA7cih0LGEpfX1cbmZ1bmN0aW9uIHUoKXt2YXIgYT1kLGI9ZC5uZXh0O2lmKGQ9PT1iKWQ9bnVsbDtlbHNle3ZhciBjPWQucHJldmlvdXM7ZD1jLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtjPWEuY2FsbGJhY2s7Yj1hLmV4cGlyYXRpb25UaW1lO2E9YS5wcmlvcml0eUxldmVsO3ZhciBmPWcsUT1sO2c9YTtsPWI7dHJ5e3ZhciBoPWMoKX1maW5hbGx5e2c9ZixsPVF9aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgpaWYoaD17Y2FsbGJhY2s6aCxwcmlvcml0eUxldmVsOmEsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH0sbnVsbD09PWQpZD1oLm5leHQ9aC5wcmV2aW91cz1oO2Vsc2V7Yz1udWxsO2E9ZDtkb3tpZihhLmV4cGlyYXRpb25UaW1lPj1iKXtjPWE7YnJlYWt9YT1hLm5leHR9d2hpbGUoYSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9aCxwKCkpO2I9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1oO2gubmV4dD1jO2gucHJldmlvdXM9XG5ifX1mdW5jdGlvbiB2KCl7aWYoLTE9PT1rJiZudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl7bT0hMDt0cnl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKX1maW5hbGx5e209ITEsbnVsbCE9PWQ/cCgpOm49ITF9fX1mdW5jdGlvbiB0KGEpe209ITA7dmFyIGI9ZTtlPWE7dHJ5e2lmKGEpZm9yKDtudWxsIT09ZDspe3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoZC5leHBpcmF0aW9uVGltZTw9Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPD1jKX1lbHNlIGJyZWFrfWVsc2UgaWYobnVsbCE9PWQpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmIXcoKSl9fWZpbmFsbHl7bT0hMSxlPWIsbnVsbCE9PWQ/cCgpOm49ITEsdigpfX1cbnZhciB4PURhdGUseT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZT9jYW5jZWxBbmltYXRpb25GcmFtZTp2b2lkIDAsQyxEO2Z1bmN0aW9uIEUoYSl7Qz1BKGZ1bmN0aW9uKGIpe3ooRCk7YShiKX0pO0Q9eShmdW5jdGlvbigpe0IoQyk7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sMTAwKX1cbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBGPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIEYubm93KCl9fWVsc2UgZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKX07dmFyIHIscSx3LEc9bnVsbDtcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdz9HPXdpbmRvdzpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGdsb2JhbCYmKEc9Z2xvYmFsKTtcbmlmKEcmJkcuX3NjaGVkTW9jayl7dmFyIEg9Ry5fc2NoZWRNb2NrO3I9SFswXTtxPUhbMV07dz1IWzJdO2V4cG9ydHMudW5zdGFibGVfbm93PUhbM119ZWxzZSBpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgST1udWxsLEo9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUkpdHJ5e0koYSl9ZmluYWxseXtJPW51bGx9fTtyPWZ1bmN0aW9uKGEpe251bGwhPT1JP3NldFRpbWVvdXQociwwLGEpOihJPWEsc2V0VGltZW91dChKLDAsITEpKX07cT1mdW5jdGlvbigpe0k9bnVsbH07dz1mdW5jdGlvbigpe3JldHVybiExfX1lbHNle1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7dmFyIEs9bnVsbCxMPSExLE09LTEsTj0hMSxPPSExLFA9MCxSPTMzLFM9MzM7dz1mdW5jdGlvbigpe3JldHVybiBQPD1leHBvcnRzLnVuc3RhYmxlX25vdygpfTt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7TD0hMTt2YXIgYT1LLGI9TTtLPW51bGw7TT0tMTt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpLGY9ITE7aWYoMD49UC1jKWlmKC0xIT09YiYmYjw9YylmPSEwO2Vsc2V7Tnx8KE49ITAsRShWKSk7Sz1hO009YjtyZXR1cm59aWYobnVsbCE9PWEpe089ITA7dHJ5e2EoZil9ZmluYWxseXtPPSExfX19O1xudmFyIFY9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUspe0UoVik7dmFyIGI9YS1QK1M7YjxTJiZSPFM/KDg+YiYmKGI9OCksUz1iPFI/UjpiKTpSPWI7UD1hK1M7THx8KEw9ITAsVS5wb3N0TWVzc2FnZSh2b2lkIDApKX1lbHNlIE49ITF9O3I9ZnVuY3Rpb24oYSxiKXtLPWE7TT1iO098fDA+Yj9VLnBvc3RNZXNzYWdlKHZvaWQgMCk6Tnx8KE49ITAsRShWKSl9O3E9ZnVuY3Rpb24oKXtLPW51bGw7TD0hMTtNPS0xfX1leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9ZyxmPWs7Zz1hO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChnKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1nfXZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWMrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGcpe2Nhc2UgMTpiPWMrLTE7YnJlYWs7Y2FzZSAyOmI9YysyNTA7YnJlYWs7Y2FzZSA1OmI9YysxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWMrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1jKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6ZyxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09ZClkPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7Yz1udWxsO3ZhciBmPWQ7ZG97aWYoZi5leHBpcmF0aW9uVGltZT5iKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9YSxwKCkpO1xuYj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpZD1udWxsO2Vsc2V7YT09PWQmJihkPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1nO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2c9YyxrPWYsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gZ307XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWUmJihudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7bnVsbCE9PWQmJnAoKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBkfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIC8qKlxuICAgKiBIaWRlIGFsbCB0b29sdGlwXG4gICAqIEB0cmlnZ2VyIFJlYWN0VG9vbHRpcC5oaWRlKClcbiAgICovXG4gIHRhcmdldC5oaWRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGRpc3BhdGNoR2xvYmFsRXZlbnQoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5ISURFLCB7IHRhcmdldDogdGFyZ2V0IH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZWJ1aWxkIGFsbCB0b29sdGlwXG4gICAqIEB0cmlnZ2VyIFJlYWN0VG9vbHRpcC5yZWJ1aWxkKClcbiAgICovXG4gIHRhcmdldC5yZWJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIGRpc3BhdGNoR2xvYmFsRXZlbnQoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5SRUJVSUxEKTtcbiAgfTtcblxuICAvKipcbiAgICogU2hvdyBzcGVjaWZpYyB0b29sdGlwXG4gICAqIEB0cmlnZ2VyIFJlYWN0VG9vbHRpcC5zaG93KClcbiAgICovXG4gIHRhcmdldC5zaG93ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGRpc3BhdGNoR2xvYmFsRXZlbnQoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5TSE9XLCB7IHRhcmdldDogdGFyZ2V0IH0pO1xuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUuZ2xvYmFsUmVidWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5tb3VudCkge1xuICAgICAgdGhpcy51bmJpbmRMaXN0ZW5lcigpO1xuICAgICAgdGhpcy5iaW5kTGlzdGVuZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS5nbG9iYWxTaG93ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMubW91bnQpIHtcbiAgICAgIC8vIENyZWF0ZSBhIGZha2UgZXZlbnQsIHNwZWNpZmljIHNob3cgd2lsbCBsaW1pdCB0aGUgdHlwZSB0byBgc29saWRgXG4gICAgICAvLyBvbmx5IGBmbG9hdGAgdHlwZSBjYXJlcyBlLmNsaWVudFggZS5jbGllbnRZXG4gICAgICB2YXIgZSA9IHsgY3VycmVudFRhcmdldDogZXZlbnQuZGV0YWlsLnRhcmdldCB9O1xuICAgICAgdGhpcy5zaG93VG9vbHRpcChlLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS5nbG9iYWxIaWRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMubW91bnQpIHtcbiAgICAgIHZhciBoYXNUYXJnZXQgPSBldmVudCAmJiBldmVudC5kZXRhaWwgJiYgZXZlbnQuZGV0YWlsLnRhcmdldCAmJiB0cnVlIHx8IGZhbHNlO1xuICAgICAgdGhpcy5oaWRlVG9vbHRpcCh7IGN1cnJlbnRUYXJnZXQ6IGhhc1RhcmdldCAmJiBldmVudC5kZXRhaWwudGFyZ2V0IH0sIGhhc1RhcmdldCk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIF9jb25zdGFudCA9IHJlcXVpcmUoJy4uL2NvbnN0YW50Jyk7XG5cbnZhciBfY29uc3RhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29uc3RhbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGlzcGF0Y2hHbG9iYWxFdmVudCA9IGZ1bmN0aW9uIGRpc3BhdGNoR2xvYmFsRXZlbnQoZXZlbnROYW1lLCBvcHRzKSB7XG4gIC8vIENvbXBhdGliYWxlIHdpdGggSUVcbiAgLy8gQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI2NTk2MTIzL2ludGVybmV0LWV4cGxvcmVyLTktMTAtMTEtZXZlbnQtY29uc3RydWN0b3ItZG9lc250LXdvcmtcbiAgdmFyIGV2ZW50ID0gdm9pZCAwO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgeyBkZXRhaWw6IG9wdHMgfSk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZXZlbnQuZGV0YWlsID0gb3B0cztcbiAgfVxuXG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07IC8qKlxuICAgICogU3RhdGljIG1ldGhvZHMgZm9yIHJlYWN0LXRvb2x0aXBcbiAgICAqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiAocmVzaXplSGlkZSkge1xuICAgIC8vIFJlYWN0VG9vbHRpcC5oaWRlXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5ISURFLCB0aGlzLmdsb2JhbEhpZGUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuSElERSwgdGhpcy5nbG9iYWxIaWRlLCBmYWxzZSk7XG5cbiAgICAvLyBSZWFjdFRvb2x0aXAucmVidWlsZFxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuUkVCVUlMRCwgdGhpcy5nbG9iYWxSZWJ1aWxkKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLlJFQlVJTEQsIHRoaXMuZ2xvYmFsUmVidWlsZCwgZmFsc2UpO1xuXG4gICAgLy8gUmVhY3RUb29sdGlwLnNob3dcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLlNIT1csIHRoaXMuZ2xvYmFsU2hvdyk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5TSE9XLCB0aGlzLmdsb2JhbFNob3csIGZhbHNlKTtcblxuICAgIC8vIFJlc2l6ZVxuICAgIGlmIChyZXNpemVIaWRlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB0YXJnZXQucHJvdG90eXBlLnVuYmluZFdpbmRvd0V2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLkhJREUsIHRoaXMuZ2xvYmFsSGlkZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5SRUJVSUxELCB0aGlzLmdsb2JhbFJlYnVpbGQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuU0hPVywgdGhpcy5nbG9iYWxTaG93KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGludm9rZWQgYnkgcmVzaXplIGV2ZW50IG9mIHdpbmRvd1xuICAgKi9cbiAgdGFyZ2V0LnByb3RvdHlwZS5vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMubW91bnQpIHJldHVybjtcbiAgICB0aGlzLmhpZGVUb29sdGlwKCk7XG4gIH07XG59O1xuXG52YXIgX2NvbnN0YW50ID0gcmVxdWlyZSgnLi4vY29uc3RhbnQnKTtcblxudmFyIF9jb25zdGFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25zdGFudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHRhcmdldC5wcm90b3R5cGUuaXNDdXN0b21FdmVudCA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLnN0YXRlLmV2ZW50O1xuXG4gICAgcmV0dXJuIGV2ZW50IHx8ICEhZWxlLmdldEF0dHJpYnV0ZSgnZGF0YS1ldmVudCcpO1xuICB9O1xuXG4gIC8qIEJpbmQgbGlzdGVuZXIgZm9yIGN1c3RvbSBldmVudCAqL1xuICB0YXJnZXQucHJvdG90eXBlLmN1c3RvbUJpbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGV2ZW50ID0gX3N0YXRlLmV2ZW50LFxuICAgICAgICBldmVudE9mZiA9IF9zdGF0ZS5ldmVudE9mZjtcblxuICAgIHZhciBkYXRhRXZlbnQgPSBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50JykgfHwgZXZlbnQ7XG4gICAgdmFyIGRhdGFFdmVudE9mZiA9IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQtb2ZmJykgfHwgZXZlbnRPZmY7XG5cbiAgICBkYXRhRXZlbnQuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGN1c3RvbUxpc3RlbmVycy5nZXQoZWxlLCBldmVudCkpO1xuICAgICAgdmFyIGN1c3RvbUxpc3RlbmVyID0gY2hlY2tTdGF0dXMuYmluZChfdGhpcywgZGF0YUV2ZW50T2ZmKTtcbiAgICAgIGN1c3RvbUxpc3RlbmVycy5zZXQoZWxlLCBldmVudCwgY3VzdG9tTGlzdGVuZXIpO1xuICAgICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGN1c3RvbUxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgaWYgKGRhdGFFdmVudE9mZikge1xuICAgICAgZGF0YUV2ZW50T2ZmLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIF90aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIF90aGlzLmhpZGVUb29sdGlwLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyogVW5iaW5kIGxpc3RlbmVyIGZvciBjdXN0b20gZXZlbnQgKi9cbiAgdGFyZ2V0LnByb3RvdHlwZS5jdXN0b21VbmJpbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgX3N0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGV2ZW50ID0gX3N0YXRlMi5ldmVudCxcbiAgICAgICAgZXZlbnRPZmYgPSBfc3RhdGUyLmV2ZW50T2ZmO1xuXG4gICAgdmFyIGRhdGFFdmVudCA9IGV2ZW50IHx8IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQnKTtcbiAgICB2YXIgZGF0YUV2ZW50T2ZmID0gZXZlbnRPZmYgfHwgZWxlLmdldEF0dHJpYnV0ZSgnZGF0YS1ldmVudC1vZmYnKTtcblxuICAgIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKGRhdGFFdmVudCwgY3VzdG9tTGlzdGVuZXJzLmdldChlbGUsIGV2ZW50KSk7XG4gICAgaWYgKGRhdGFFdmVudE9mZikgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZGF0YUV2ZW50T2ZmLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8qKlxuICogQ3VzdG9tIGV2ZW50cyB0byBjb250cm9sIHNob3dpbmcgYW5kIGhpZGluZyBvZiB0b29sdGlwXG4gKlxuICogQGF0dHJpYnV0ZXNcbiAqIC0gYGV2ZW50YCB7U3RyaW5nfVxuICogLSBgZXZlbnRPZmZgIHtTdHJpbmd9XG4gKi9cblxudmFyIGNoZWNrU3RhdHVzID0gZnVuY3Rpb24gY2hlY2tTdGF0dXMoZGF0YUV2ZW50T2ZmLCBlKSB7XG4gIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuICB2YXIgaWQgPSB0aGlzLnByb3BzLmlkO1xuXG4gIHZhciBkYXRhSXNDYXB0dXJlID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pc2NhcHR1cmUnKTtcbiAgdmFyIGlzQ2FwdHVyZSA9IGRhdGFJc0NhcHR1cmUgJiYgZGF0YUlzQ2FwdHVyZSA9PT0gJ3RydWUnIHx8IHRoaXMucHJvcHMuaXNDYXB0dXJlO1xuICB2YXIgY3VycmVudEl0ZW0gPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdjdXJyZW50SXRlbScpO1xuXG4gIGlmICghaXNDYXB0dXJlKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICBpZiAoc2hvdyAmJiBjdXJyZW50SXRlbSA9PT0gJ3RydWUnKSB7XG4gICAgaWYgKCFkYXRhRXZlbnRPZmYpIHRoaXMuaGlkZVRvb2x0aXAoZSk7XG4gIH0gZWxzZSB7XG4gICAgZS5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZSgnY3VycmVudEl0ZW0nLCAndHJ1ZScpO1xuICAgIHNldFVudGFyZ2V0SXRlbXMoZS5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldFRhcmdldEFycmF5KGlkKSk7XG4gICAgdGhpcy5zaG93VG9vbHRpcChlKTtcbiAgfVxufTtcblxudmFyIHNldFVudGFyZ2V0SXRlbXMgPSBmdW5jdGlvbiBzZXRVbnRhcmdldEl0ZW1zKGN1cnJlbnRUYXJnZXQsIHRhcmdldEFycmF5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY3VycmVudFRhcmdldCAhPT0gdGFyZ2V0QXJyYXlbaV0pIHtcbiAgICAgIHRhcmdldEFycmF5W2ldLnNldEF0dHJpYnV0ZSgnY3VycmVudEl0ZW0nLCAnZmFsc2UnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0QXJyYXlbaV0uc2V0QXR0cmlidXRlKCdjdXJyZW50SXRlbScsICd0cnVlJyk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgY3VzdG9tTGlzdGVuZXJzID0ge1xuICBpZDogJzliNjlmOTJlLWQzZmUtNDk4Yi1iMWI0LWM1ZTYzYTUxYjBjZicsXG4gIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldCwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMuaWQgaW4gdGFyZ2V0KSB7XG4gICAgICB2YXIgbWFwID0gdGFyZ2V0W3RoaXMuaWRdO1xuICAgICAgbWFwW2V2ZW50XSA9IGxpc3RlbmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIGlzIHdvcmthcm91bmQgZm9yIFdlYWtNYXAsIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gb2xkZXIgYnJvd3NlcnMsIHN1Y2ggYXMgSUVcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHRoaXMuaWQsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogX2RlZmluZVByb3BlcnR5KHt9LCBldmVudCwgbGlzdGVuZXIpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KHRhcmdldCwgZXZlbnQpIHtcbiAgICB2YXIgbWFwID0gdGFyZ2V0W3RoaXMuaWRdO1xuICAgIGlmIChtYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG1hcFtldmVudF07XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmlzQ2FwdHVyZSA9IGZ1bmN0aW9uIChjdXJyZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRUYXJnZXQgJiYgY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaXNjYXB0dXJlJykgPT09ICd0cnVlJyB8fCB0aGlzLnByb3BzLmlzQ2FwdHVyZSB8fCBmYWxzZTtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHRhcmdldC5wcm90b3R5cGUuZ2V0RWZmZWN0ID0gZnVuY3Rpb24gKGN1cnJlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGF0YUVmZmVjdCA9IGN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWVmZmVjdCcpO1xuICAgIHJldHVybiBkYXRhRWZmZWN0IHx8IHRoaXMucHJvcHMuZWZmZWN0IHx8ICdmbG9hdCc7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHRhcmdldC5wcm90b3R5cGUuYmluZFJlbW92YWxUcmFja2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgTXV0YXRpb25PYnNlcnZlciA9IGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcygpO1xuICAgIGlmIChNdXRhdGlvbk9ic2VydmVyID09IG51bGwpIHJldHVybjtcblxuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIG0xID0gMDsgbTEgPCBtdXRhdGlvbnMubGVuZ3RoOyBtMSsrKSB7XG4gICAgICAgIHZhciBtdXRhdGlvbiA9IG11dGF0aW9uc1ttMV07XG4gICAgICAgIGZvciAodmFyIG0yID0gMDsgbTIgPCBtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoOyBtMisrKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBtdXRhdGlvbi5yZW1vdmVkTm9kZXNbbTJdO1xuICAgICAgICAgIGlmIChlbGVtZW50ID09PSBfdGhpcy5zdGF0ZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBfdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh3aW5kb3cuZG9jdW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuXG4gICAgdGhpcy5yZW1vdmFsVHJhY2tlciA9IG9ic2VydmVyO1xuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUudW5iaW5kUmVtb3ZhbFRyYWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZhbFRyYWNrZXIpIHtcbiAgICAgIHRoaXMucmVtb3ZhbFRyYWNrZXIuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5yZW1vdmFsVHJhY2tlciA9IG51bGw7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBUcmFja2luZyB0YXJnZXQgcmVtb3ZpbmcgZnJvbSBET00uXG4gKiBJdCdzIG5lc3Nlc2FyeSB0byBoaWRlIHRvb2x0aXAgd2hlbiBpdCdzIHRhcmdldCBkaXNhcHBlYXJzLlxuICogT3RoZXJ3aXNlLCB0aGUgdG9vbHRpcCB3b3VsZCBiZSBzaG93biBmb3JldmVyIHVudGlsIGFub3RoZXIgdGFyZ2V0XG4gKiBpcyB0cmlnZ2VyZWQuXG4gKlxuICogSWYgTXV0YXRpb25PYnNlcnZlciBpcyBub3QgYXZhaWxhYmxlLCB0aGlzIGZlYXR1cmUganVzdCBkb2Vzbid0IHdvcmsuXG4gKi9cblxuLy8gaHR0cHM6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDEyLzA1L2RvbS1tdXRhdGlvbm9ic2VydmVyLXJlYWN0aW5nLXRvLWRvbS1jaGFuZ2VzLXdpdGhvdXQta2lsbGluZy1icm93c2VyLXBlcmZvcm1hbmNlL1xudmFyIGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcyA9IGZ1bmN0aW9uIGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcygpIHtcbiAgcmV0dXJuIHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChlLCB0YXJnZXQsIG5vZGUsIHBsYWNlLCBkZXNpcmVkUGxhY2UsIGVmZmVjdCwgb2Zmc2V0KSB7XG4gIHZhciBfZ2V0RGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMobm9kZSksXG4gICAgICB0aXBXaWR0aCA9IF9nZXREaW1lbnNpb25zLndpZHRoLFxuICAgICAgdGlwSGVpZ2h0ID0gX2dldERpbWVuc2lvbnMuaGVpZ2h0O1xuXG4gIHZhciBfZ2V0RGltZW5zaW9uczIgPSBnZXREaW1lbnNpb25zKHRhcmdldCksXG4gICAgICB0YXJnZXRXaWR0aCA9IF9nZXREaW1lbnNpb25zMi53aWR0aCxcbiAgICAgIHRhcmdldEhlaWdodCA9IF9nZXREaW1lbnNpb25zMi5oZWlnaHQ7XG5cbiAgdmFyIF9nZXRDdXJyZW50T2Zmc2V0ID0gZ2V0Q3VycmVudE9mZnNldChlLCB0YXJnZXQsIGVmZmVjdCksXG4gICAgICBtb3VzZVggPSBfZ2V0Q3VycmVudE9mZnNldC5tb3VzZVgsXG4gICAgICBtb3VzZVkgPSBfZ2V0Q3VycmVudE9mZnNldC5tb3VzZVk7XG5cbiAgdmFyIGRlZmF1bHRPZmZzZXQgPSBnZXREZWZhdWx0UG9zaXRpb24oZWZmZWN0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCB0aXBXaWR0aCwgdGlwSGVpZ2h0KTtcblxuICB2YXIgX2NhbGN1bGF0ZU9mZnNldCA9IGNhbGN1bGF0ZU9mZnNldChvZmZzZXQpLFxuICAgICAgZXh0cmFPZmZzZXRfWCA9IF9jYWxjdWxhdGVPZmZzZXQuZXh0cmFPZmZzZXRfWCxcbiAgICAgIGV4dHJhT2Zmc2V0X1kgPSBfY2FsY3VsYXRlT2Zmc2V0LmV4dHJhT2Zmc2V0X1k7XG5cbiAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIHZhciB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgdmFyIF9nZXRQYXJlbnQgPSBnZXRQYXJlbnQobm9kZSksXG4gICAgICBwYXJlbnRUb3AgPSBfZ2V0UGFyZW50LnBhcmVudFRvcCxcbiAgICAgIHBhcmVudExlZnQgPSBfZ2V0UGFyZW50LnBhcmVudExlZnQ7XG5cbiAgLy8gR2V0IHRoZSBlZGdlIG9mZnNldCBvZiB0aGUgdG9vbHRpcFxuXG5cbiAgdmFyIGdldFRpcE9mZnNldExlZnQgPSBmdW5jdGlvbiBnZXRUaXBPZmZzZXRMZWZ0KHBsYWNlKSB7XG4gICAgdmFyIG9mZnNldF9YID0gZGVmYXVsdE9mZnNldFtwbGFjZV0ubDtcbiAgICByZXR1cm4gbW91c2VYICsgb2Zmc2V0X1ggKyBleHRyYU9mZnNldF9YO1xuICB9O1xuICB2YXIgZ2V0VGlwT2Zmc2V0UmlnaHQgPSBmdW5jdGlvbiBnZXRUaXBPZmZzZXRSaWdodChwbGFjZSkge1xuICAgIHZhciBvZmZzZXRfWCA9IGRlZmF1bHRPZmZzZXRbcGxhY2VdLnI7XG4gICAgcmV0dXJuIG1vdXNlWCArIG9mZnNldF9YICsgZXh0cmFPZmZzZXRfWDtcbiAgfTtcbiAgdmFyIGdldFRpcE9mZnNldFRvcCA9IGZ1bmN0aW9uIGdldFRpcE9mZnNldFRvcChwbGFjZSkge1xuICAgIHZhciBvZmZzZXRfWSA9IGRlZmF1bHRPZmZzZXRbcGxhY2VdLnQ7XG4gICAgcmV0dXJuIG1vdXNlWSArIG9mZnNldF9ZICsgZXh0cmFPZmZzZXRfWTtcbiAgfTtcbiAgdmFyIGdldFRpcE9mZnNldEJvdHRvbSA9IGZ1bmN0aW9uIGdldFRpcE9mZnNldEJvdHRvbShwbGFjZSkge1xuICAgIHZhciBvZmZzZXRfWSA9IGRlZmF1bHRPZmZzZXRbcGxhY2VdLmI7XG4gICAgcmV0dXJuIG1vdXNlWSArIG9mZnNldF9ZICsgZXh0cmFPZmZzZXRfWTtcbiAgfTtcblxuICAvL1xuICAvLyBGdW5jdGlvbnMgdG8gdGVzdCB3aGV0aGVyIHRoZSB0b29sdGlwJ3Mgc2lkZXMgYXJlIGluc2lkZVxuICAvLyB0aGUgY2xpZW50IHdpbmRvdyBmb3IgYSBnaXZlbiBvcmllbnRhdGlvbiBwXG4gIC8vXG4gIC8vICBfX19fX19fX19fX19fXG4gIC8vIHwgICAgICAgICAgICAgfCA8LS0gUmlnaHQgc2lkZVxuICAvLyB8IHAgPSAnbGVmdCcgIHxcXFxuICAvLyB8ICAgICAgICAgICAgIHwvICB8XFxcbiAgLy8gfF9fX19fX19fX19fX198ICAgfF9cXCAgPC0tIE1vdXNlXG4gIC8vICAgICAgLyBcXCAgICAgICAgICAgfFxuICAvLyAgICAgICB8XG4gIC8vICAgICAgIHxcbiAgLy8gIEJvdHRvbSBzaWRlXG4gIC8vXG4gIHZhciBvdXRzaWRlTGVmdCA9IGZ1bmN0aW9uIG91dHNpZGVMZWZ0KHApIHtcbiAgICByZXR1cm4gZ2V0VGlwT2Zmc2V0TGVmdChwKSA8IDA7XG4gIH07XG4gIHZhciBvdXRzaWRlUmlnaHQgPSBmdW5jdGlvbiBvdXRzaWRlUmlnaHQocCkge1xuICAgIHJldHVybiBnZXRUaXBPZmZzZXRSaWdodChwKSA+IHdpbmRvd1dpZHRoO1xuICB9O1xuICB2YXIgb3V0c2lkZVRvcCA9IGZ1bmN0aW9uIG91dHNpZGVUb3AocCkge1xuICAgIHJldHVybiBnZXRUaXBPZmZzZXRUb3AocCkgPCAwO1xuICB9O1xuICB2YXIgb3V0c2lkZUJvdHRvbSA9IGZ1bmN0aW9uIG91dHNpZGVCb3R0b20ocCkge1xuICAgIHJldHVybiBnZXRUaXBPZmZzZXRCb3R0b20ocCkgPiB3aW5kb3dIZWlnaHQ7XG4gIH07XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgdG9vbHRpcCB3aXRoIG9yaWVudGF0aW9uIHAgaXMgY29tcGxldGVseSBpbnNpZGUgdGhlIGNsaWVudCB3aW5kb3dcbiAgdmFyIG91dHNpZGUgPSBmdW5jdGlvbiBvdXRzaWRlKHApIHtcbiAgICByZXR1cm4gb3V0c2lkZUxlZnQocCkgfHwgb3V0c2lkZVJpZ2h0KHApIHx8IG91dHNpZGVUb3AocCkgfHwgb3V0c2lkZUJvdHRvbShwKTtcbiAgfTtcbiAgdmFyIGluc2lkZSA9IGZ1bmN0aW9uIGluc2lkZShwKSB7XG4gICAgcmV0dXJuICFvdXRzaWRlKHApO1xuICB9O1xuXG4gIHZhciBwbGFjZXNMaXN0ID0gWyd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnXTtcbiAgdmFyIGluc2lkZUxpc3QgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgcCA9IHBsYWNlc0xpc3RbaV07XG4gICAgaWYgKGluc2lkZShwKSkge1xuICAgICAgaW5zaWRlTGlzdC5wdXNoKHApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc05ld1N0YXRlID0gZmFsc2U7XG4gIHZhciBuZXdQbGFjZSA9IHZvaWQgMDtcbiAgaWYgKGluc2lkZShkZXNpcmVkUGxhY2UpICYmIGRlc2lyZWRQbGFjZSAhPT0gcGxhY2UpIHtcbiAgICBpc05ld1N0YXRlID0gdHJ1ZTtcbiAgICBuZXdQbGFjZSA9IGRlc2lyZWRQbGFjZTtcbiAgfSBlbHNlIGlmIChpbnNpZGVMaXN0Lmxlbmd0aCA+IDAgJiYgb3V0c2lkZShkZXNpcmVkUGxhY2UpICYmIG91dHNpZGUocGxhY2UpKSB7XG4gICAgaXNOZXdTdGF0ZSA9IHRydWU7XG4gICAgbmV3UGxhY2UgPSBpbnNpZGVMaXN0WzBdO1xuICB9XG5cbiAgaWYgKGlzTmV3U3RhdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNOZXdTdGF0ZTogdHJ1ZSxcbiAgICAgIG5ld1N0YXRlOiB7IHBsYWNlOiBuZXdQbGFjZSB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNOZXdTdGF0ZTogZmFsc2UsXG4gICAgcG9zaXRpb246IHtcbiAgICAgIGxlZnQ6IHBhcnNlSW50KGdldFRpcE9mZnNldExlZnQocGxhY2UpIC0gcGFyZW50TGVmdCwgMTApLFxuICAgICAgdG9wOiBwYXJzZUludChnZXRUaXBPZmZzZXRUb3AocGxhY2UpIC0gcGFyZW50VG9wLCAxMClcbiAgICB9XG4gIH07XG59O1xuXG52YXIgZ2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uIGdldERpbWVuc2lvbnMobm9kZSkge1xuICB2YXIgX25vZGUkZ2V0Qm91bmRpbmdDbGllID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGhlaWdodCA9IF9ub2RlJGdldEJvdW5kaW5nQ2xpZS5oZWlnaHQsXG4gICAgICB3aWR0aCA9IF9ub2RlJGdldEJvdW5kaW5nQ2xpZS53aWR0aDtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogcGFyc2VJbnQoaGVpZ2h0LCAxMCksXG4gICAgd2lkdGg6IHBhcnNlSW50KHdpZHRoLCAxMClcbiAgfTtcbn07XG5cbi8vIEdldCBjdXJyZW50IG1vdXNlIG9mZnNldFxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRvb2x0aXBcbiAqXG4gKiBAcGFyYW1zXG4gKiAtIGBlYCB7RXZlbnR9IHRoZSBldmVudCBvZiBjdXJyZW50IG1vdXNlXG4gKiAtIGB0YXJnZXRgIHtFbGVtZW50fSB0aGUgY3VycmVudFRhcmdldCBvZiB0aGUgZXZlbnRcbiAqIC0gYG5vZGVgIHtET019IHRoZSByZWFjdC10b29sdGlwIG9iamVjdFxuICogLSBgcGxhY2VgIHtTdHJpbmd9IHRvcCAvIHJpZ2h0IC8gYm90dG9tIC8gbGVmdFxuICogLSBgZWZmZWN0YCB7U3RyaW5nfSBmbG9hdCAvIHNvbGlkXG4gKiAtIGBvZmZzZXRgIHtPYmplY3R9IHRoZSBvZmZzZXQgdG8gZGVmYXVsdCBwb3NpdGlvblxuICpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIC0gYGlzTmV3U3RhdGVgIHtCb29sfSByZXF1aXJlZFxuICogLSBgbmV3U3RhdGVgIHtPYmplY3R9XG4gKiAtIGBwb3NpdGlvbmAge09iamVjdH0ge2xlZnQ6IHtOdW1iZXJ9LCB0b3A6IHtOdW1iZXJ9fVxuICovXG52YXIgZ2V0Q3VycmVudE9mZnNldCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRPZmZzZXQoZSwgY3VycmVudFRhcmdldCwgZWZmZWN0KSB7XG4gIHZhciBib3VuZGluZ0NsaWVudFJlY3QgPSBjdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdGFyZ2V0VG9wID0gYm91bmRpbmdDbGllbnRSZWN0LnRvcDtcbiAgdmFyIHRhcmdldExlZnQgPSBib3VuZGluZ0NsaWVudFJlY3QubGVmdDtcblxuICB2YXIgX2dldERpbWVuc2lvbnMzID0gZ2V0RGltZW5zaW9ucyhjdXJyZW50VGFyZ2V0KSxcbiAgICAgIHRhcmdldFdpZHRoID0gX2dldERpbWVuc2lvbnMzLndpZHRoLFxuICAgICAgdGFyZ2V0SGVpZ2h0ID0gX2dldERpbWVuc2lvbnMzLmhlaWdodDtcblxuICBpZiAoZWZmZWN0ID09PSAnZmxvYXQnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdXNlWDogZS5jbGllbnRYLFxuICAgICAgbW91c2VZOiBlLmNsaWVudFlcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91c2VYOiB0YXJnZXRMZWZ0ICsgdGFyZ2V0V2lkdGggLyAyLFxuICAgIG1vdXNlWTogdGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0IC8gMlxuICB9O1xufTtcblxuLy8gTGlzdCBhbGwgcG9zc2liaWxpdHkgb2YgdG9vbHRpcCBmaW5hbCBvZmZzZXRcbi8vIFRoaXMgaXMgdXNlZnVsIGluIGp1ZGdpbmcgaWYgaXQgaXMgbmVjZXNzYXJ5IGZvciB0b29sdGlwIHRvIHN3aXRjaCBwb3NpdGlvbiB3aGVuIG91dCBvZiB3aW5kb3dcbnZhciBnZXREZWZhdWx0UG9zaXRpb24gPSBmdW5jdGlvbiBnZXREZWZhdWx0UG9zaXRpb24oZWZmZWN0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCB0aXBXaWR0aCwgdGlwSGVpZ2h0KSB7XG4gIHZhciB0b3AgPSB2b2lkIDA7XG4gIHZhciByaWdodCA9IHZvaWQgMDtcbiAgdmFyIGJvdHRvbSA9IHZvaWQgMDtcbiAgdmFyIGxlZnQgPSB2b2lkIDA7XG4gIHZhciBkaXNUb01vdXNlID0gMztcbiAgdmFyIHRyaWFuZ2xlSGVpZ2h0ID0gMjtcbiAgdmFyIGN1cnNvckhlaWdodCA9IDEyOyAvLyBPcHRpbWl6ZSBmb3IgZmxvYXQgYm90dG9tIG9ubHksIGNhdXNlIHRoZSBjdXJzb3Igd2lsbCBoaWRlIHRoZSB0b29sdGlwXG5cbiAgaWYgKGVmZmVjdCA9PT0gJ2Zsb2F0Jykge1xuICAgIHRvcCA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggLyAyKSxcbiAgICAgIHI6IHRpcFdpZHRoIC8gMixcbiAgICAgIHQ6IC0odGlwSGVpZ2h0ICsgZGlzVG9Nb3VzZSArIHRyaWFuZ2xlSGVpZ2h0KSxcbiAgICAgIGI6IC1kaXNUb01vdXNlXG4gICAgfTtcbiAgICBib3R0b20gPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiBkaXNUb01vdXNlICsgY3Vyc29ySGVpZ2h0LFxuICAgICAgYjogdGlwSGVpZ2h0ICsgZGlzVG9Nb3VzZSArIHRyaWFuZ2xlSGVpZ2h0ICsgY3Vyc29ySGVpZ2h0XG4gICAgfTtcbiAgICBsZWZ0ID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICByOiAtZGlzVG9Nb3VzZSxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgICByaWdodCA9IHtcbiAgICAgIGw6IGRpc1RvTW91c2UsXG4gICAgICByOiB0aXBXaWR0aCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgfSBlbHNlIGlmIChlZmZlY3QgPT09ICdzb2xpZCcpIHtcbiAgICB0b3AgPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiAtKHRhcmdldEhlaWdodCAvIDIgKyB0aXBIZWlnaHQgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICBiOiAtKHRhcmdldEhlaWdodCAvIDIpXG4gICAgfTtcbiAgICBib3R0b20gPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiB0YXJnZXRIZWlnaHQgLyAyLFxuICAgICAgYjogdGFyZ2V0SGVpZ2h0IC8gMiArIHRpcEhlaWdodCArIHRyaWFuZ2xlSGVpZ2h0XG4gICAgfTtcbiAgICBsZWZ0ID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCArIHRhcmdldFdpZHRoIC8gMiArIHRyaWFuZ2xlSGVpZ2h0KSxcbiAgICAgIHI6IC0odGFyZ2V0V2lkdGggLyAyKSxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgICByaWdodCA9IHtcbiAgICAgIGw6IHRhcmdldFdpZHRoIC8gMixcbiAgICAgIHI6IHRpcFdpZHRoICsgdGFyZ2V0V2lkdGggLyAyICsgdHJpYW5nbGVIZWlnaHQsXG4gICAgICB0OiAtKHRpcEhlaWdodCAvIDIpLFxuICAgICAgYjogdGlwSGVpZ2h0IC8gMlxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyB0b3A6IHRvcCwgYm90dG9tOiBib3R0b20sIGxlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodCB9O1xufTtcblxuLy8gQ29uc2lkZXIgYWRkaXRpb25hbCBvZmZzZXQgaW50byBwb3NpdGlvbiBjYWxjdWxhdGlvblxudmFyIGNhbGN1bGF0ZU9mZnNldCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvZmZzZXQpIHtcbiAgdmFyIGV4dHJhT2Zmc2V0X1ggPSAwO1xuICB2YXIgZXh0cmFPZmZzZXRfWSA9IDA7XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkob2Zmc2V0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpIHtcbiAgICBvZmZzZXQgPSBKU09OLnBhcnNlKG9mZnNldC50b1N0cmluZygpLnJlcGxhY2UoL1xcJy9nLCAnXFxcIicpKTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gb2Zmc2V0KSB7XG4gICAgaWYgKGtleSA9PT0gJ3RvcCcpIHtcbiAgICAgIGV4dHJhT2Zmc2V0X1kgLT0gcGFyc2VJbnQob2Zmc2V0W2tleV0sIDEwKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGV4dHJhT2Zmc2V0X1kgKz0gcGFyc2VJbnQob2Zmc2V0W2tleV0sIDEwKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICBleHRyYU9mZnNldF9YIC09IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgIGV4dHJhT2Zmc2V0X1ggKz0gcGFyc2VJbnQob2Zmc2V0W2tleV0sIDEwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBleHRyYU9mZnNldF9YOiBleHRyYU9mZnNldF9YLCBleHRyYU9mZnNldF9ZOiBleHRyYU9mZnNldF9ZIH07XG59O1xuXG4vLyBHZXQgdGhlIG9mZnNldCBvZiB0aGUgcGFyZW50IGVsZW1lbnRzXG52YXIgZ2V0UGFyZW50ID0gZnVuY3Rpb24gZ2V0UGFyZW50KGN1cnJlbnRUYXJnZXQpIHtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBjdXJyZW50VGFyZ2V0O1xuICB3aGlsZSAoY3VycmVudFBhcmVudCkge1xuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50UGFyZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSAhPT0gJ25vbmUnKSBicmVhaztcbiAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIHBhcmVudFRvcCA9IGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgfHwgMDtcbiAgdmFyIHBhcmVudExlZnQgPSBjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCB8fCAwO1xuXG4gIHJldHVybiB7IHBhcmVudFRvcDogcGFyZW50VG9wLCBwYXJlbnRMZWZ0OiBwYXJlbnRMZWZ0IH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRpcCwgY2hpbGRyZW4sIGdldENvbnRlbnQsIG11bHRpbGluZSkge1xuICBpZiAoY2hpbGRyZW4pIHJldHVybiBjaGlsZHJlbjtcbiAgaWYgKGdldENvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiBnZXRDb250ZW50ICE9PSBudWxsKSByZXR1cm4gZ2V0Q29udGVudDsgLy8gZ2V0Q29udGVudCBjYW4gYmUgMCwgJycsIGV0Yy5cbiAgaWYgKGdldENvbnRlbnQgPT09IG51bGwpIHJldHVybiBudWxsOyAvLyBUaXAgbm90IGV4aXN0IGFuZCBjaGlsZGVybiBpcyBudWxsIG9yIHVuZGVmaW5lZFxuXG4gIHZhciByZWdleHAgPSAvPGJyXFxzKlxcLz8+LztcbiAgaWYgKCFtdWx0aWxpbmUgfHwgbXVsdGlsaW5lID09PSAnZmFsc2UnIHx8ICFyZWdleHAudGVzdCh0aXApKSB7XG4gICAgLy8gTm8gdHJpbSgpLCBzbyB0aGF0IHVzZXIgY2FuIGtlZXAgdGhlaXIgaW5wdXRcbiAgICByZXR1cm4gdGlwO1xuICB9XG5cbiAgLy8gTXVsdGlsaW5lIHRvb2x0aXAgY29udGVudFxuICByZXR1cm4gdGlwLnNwbGl0KHJlZ2V4cCkubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgeyBrZXk6IGksIGNsYXNzTmFtZTogJ211bHRpLWxpbmUnIH0sXG4gICAgICBkXG4gICAgKTtcbiAgfSk7XG59O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnBhcnNlQXJpYSA9IHBhcnNlQXJpYTtcbi8qKlxuICogU3VwcG9ydCBhcmlhLSBhbmQgcm9sZSBpbiBSZWFjdFRvb2x0aXBcbiAqXG4gKiBAcGFyYW1zIHByb3BzIHtPYmplY3R9XG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlQXJpYShwcm9wcykge1xuICB2YXIgYXJpYU9iaiA9IHt9O1xuICBPYmplY3Qua2V5cyhwcm9wcykuZmlsdGVyKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gYXJpYS14eHggYW5kIHJvbGUgaXMgYWNjZXB0YWJsZVxuICAgIHJldHVybiAoLyheYXJpYS1cXHcrJHxecm9sZSQpLy50ZXN0KHByb3ApXG4gICAgKTtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGFyaWFPYmpbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFyaWFPYmo7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChub2RlTGlzdCkge1xuICB2YXIgbGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICBpZiAobm9kZUxpc3QuaGFzT3duUHJvcGVydHkpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZUxpc3QpO1xuICB9XG4gIHJldHVybiBuZXcgQXJyYXkobGVuZ3RoKS5maWxsKCkubWFwKGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBub2RlTGlzdFtpbmRleF07XG4gIH0pO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSAnLl9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXB7Ym9yZGVyLXJhZGl1czozcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7Zm9udC1zaXplOjEzcHg7bGVmdDotOTk5ZW07b3BhY2l0eTowO3BhZGRpbmc6OHB4IDIxcHg7cG9zaXRpb246Zml4ZWQ7cG9pbnRlci1ldmVudHM6bm9uZTt0cmFuc2l0aW9uOm9wYWNpdHkgMC4zcyBlYXNlLW91dDt0b3A6LTk5OWVtO3Zpc2liaWxpdHk6aGlkZGVuO3otaW5kZXg6OTk5fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLmFsbG93X2hvdmVyLC5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLmFsbG93X2NsaWNre3BvaW50ZXItZXZlbnRzOmF1dG99Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXA6YmVmb3JlLC5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwOmFmdGVye2NvbnRlbnQ6XCJcIjt3aWR0aDowO2hlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnNob3d7b3BhY2l0eTowLjk7bWFyZ2luLXRvcDowcHg7bWFyZ2luLWxlZnQ6MHB4O3Zpc2liaWxpdHk6dmlzaWJsZX0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmt7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMyMjJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLnBsYWNlLXRvcDphZnRlcntib3JkZXItdG9wLWNvbG9yOiMyMjI7Ym9yZGVyLXRvcC1zdHlsZTpzb2xpZDtib3JkZXItdG9wLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsucGxhY2UtYm90dG9tOmFmdGVye2JvcmRlci1ib3R0b20tY29sb3I6IzIyMjtib3JkZXItYm90dG9tLXN0eWxlOnNvbGlkO2JvcmRlci1ib3R0b20td2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZGFyay5wbGFjZS1sZWZ0OmFmdGVye2JvcmRlci1sZWZ0LWNvbG9yOiMyMjI7Ym9yZGVyLWxlZnQtc3R5bGU6c29saWQ7Ym9yZGVyLWxlZnQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZGFyay5wbGFjZS1yaWdodDphZnRlcntib3JkZXItcmlnaHQtY29sb3I6IzIyMjtib3JkZXItcmlnaHQtc3R5bGU6c29saWQ7Ym9yZGVyLXJpZ2h0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsuYm9yZGVye2JvcmRlcjoxcHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsuYm9yZGVyLnBsYWNlLXRvcDpiZWZvcmV7Ym9yZGVyLXRvcDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsuYm9yZGVyLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsuYm9yZGVyLnBsYWNlLWxlZnQ6YmVmb3Jle2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZGFyay5ib3JkZXIucGxhY2UtcmlnaHQ6YmVmb3Jle2JvcmRlci1yaWdodDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3N7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM4REM1NzJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLnBsYWNlLXRvcDphZnRlcntib3JkZXItdG9wLWNvbG9yOiM4REM1NzI7Ym9yZGVyLXRvcC1zdHlsZTpzb2xpZDtib3JkZXItdG9wLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MucGxhY2UtYm90dG9tOmFmdGVye2JvcmRlci1ib3R0b20tY29sb3I6IzhEQzU3Mjtib3JkZXItYm90dG9tLXN0eWxlOnNvbGlkO2JvcmRlci1ib3R0b20td2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtc3VjY2Vzcy5wbGFjZS1sZWZ0OmFmdGVye2JvcmRlci1sZWZ0LWNvbG9yOiM4REM1NzI7Ym9yZGVyLWxlZnQtc3R5bGU6c29saWQ7Ym9yZGVyLWxlZnQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtc3VjY2Vzcy5wbGFjZS1yaWdodDphZnRlcntib3JkZXItcmlnaHQtY29sb3I6IzhEQzU3Mjtib3JkZXItcmlnaHQtc3R5bGU6c29saWQ7Ym9yZGVyLXJpZ2h0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MuYm9yZGVye2JvcmRlcjoxcHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MuYm9yZGVyLnBsYWNlLXRvcDpiZWZvcmV7Ym9yZGVyLXRvcDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MuYm9yZGVyLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MuYm9yZGVyLnBsYWNlLWxlZnQ6YmVmb3Jle2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtc3VjY2Vzcy5ib3JkZXIucGxhY2UtcmlnaHQ6YmVmb3Jle2JvcmRlci1yaWdodDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmd7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiNGMEFENEV9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLnBsYWNlLXRvcDphZnRlcntib3JkZXItdG9wLWNvbG9yOiNGMEFENEU7Ym9yZGVyLXRvcC1zdHlsZTpzb2xpZDtib3JkZXItdG9wLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcucGxhY2UtYm90dG9tOmFmdGVye2JvcmRlci1ib3R0b20tY29sb3I6I0YwQUQ0RTtib3JkZXItYm90dG9tLXN0eWxlOnNvbGlkO2JvcmRlci1ib3R0b20td2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtd2FybmluZy5wbGFjZS1sZWZ0OmFmdGVye2JvcmRlci1sZWZ0LWNvbG9yOiNGMEFENEU7Ym9yZGVyLWxlZnQtc3R5bGU6c29saWQ7Ym9yZGVyLWxlZnQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtd2FybmluZy5wbGFjZS1yaWdodDphZnRlcntib3JkZXItcmlnaHQtY29sb3I6I0YwQUQ0RTtib3JkZXItcmlnaHQtc3R5bGU6c29saWQ7Ym9yZGVyLXJpZ2h0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcuYm9yZGVye2JvcmRlcjoxcHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcuYm9yZGVyLnBsYWNlLXRvcDpiZWZvcmV7Ym9yZGVyLXRvcDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcuYm9yZGVyLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcuYm9yZGVyLnBsYWNlLWxlZnQ6YmVmb3Jle2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtd2FybmluZy5ib3JkZXIucGxhY2UtcmlnaHQ6YmVmb3Jle2JvcmRlci1yaWdodDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9ye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojQkU2NDY0fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IucGxhY2UtdG9wOmFmdGVye2JvcmRlci10b3AtY29sb3I6I0JFNjQ2NDtib3JkZXItdG9wLXN0eWxlOnNvbGlkO2JvcmRlci10b3Atd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IucGxhY2UtYm90dG9tOmFmdGVye2JvcmRlci1ib3R0b20tY29sb3I6I0JFNjQ2NDtib3JkZXItYm90dG9tLXN0eWxlOnNvbGlkO2JvcmRlci1ib3R0b20td2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojQkU2NDY0O2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLXJpZ2h0OmFmdGVye2JvcmRlci1yaWdodC1jb2xvcjojQkU2NDY0O2JvcmRlci1yaWdodC1zdHlsZTpzb2xpZDtib3JkZXItcmlnaHQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IuYm9yZGVye2JvcmRlcjoxcHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvci5ib3JkZXIucGxhY2UtYm90dG9tOmJlZm9yZXtib3JkZXItYm90dG9tOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IuYm9yZGVyLnBsYWNlLWxlZnQ6YmVmb3Jle2JvcmRlci1sZWZ0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZve2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzM3QUI3fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojMzM3QUI3O2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiMzMzdBQjc7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWluZm8ucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojMzM3QUI3O2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWluZm8ucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiMzMzdBQjc7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWluZm8uYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodHtjb2xvcjojMjIyO2JhY2tncm91bmQtY29sb3I6I2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LnBsYWNlLXRvcDphZnRlcntib3JkZXItdG9wLWNvbG9yOiNmZmY7Ym9yZGVyLXRvcC1zdHlsZTpzb2xpZDtib3JkZXItdG9wLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiNmZmY7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLWxlZnQtY29sb3I6I2ZmZjtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS1yaWdodDphZnRlcntib3JkZXItcmlnaHQtY29sb3I6I2ZmZjtib3JkZXItcmlnaHQtc3R5bGU6c29saWQ7Ym9yZGVyLXJpZ2h0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICMyMjJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXIucGxhY2UtdG9wOmJlZm9yZXtib3JkZXItdG9wOjhweCBzb2xpZCAjMjIyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHQuYm9yZGVyLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgIzIyMn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgIzIyMn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LmJvcmRlci5wbGFjZS1yaWdodDpiZWZvcmV7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjMjIyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLXRvcHttYXJnaW4tdG9wOi0xMHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLXRvcDpiZWZvcmV7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3R0b206LThweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotMTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yaWdodDo4cHggc29saWQgdHJhbnNwYXJlbnQ7Ym90dG9tOi02cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LThweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1ib3R0b217bWFyZ2luLXRvcDoxMHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDt0b3A6LThweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotMTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1ib3R0b206YWZ0ZXJ7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yaWdodDo4cHggc29saWQgdHJhbnNwYXJlbnQ7dG9wOi02cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LThweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1sZWZ0e21hcmdpbi1sZWZ0Oi0xMHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLWxlZnQ6YmVmb3Jle2JvcmRlci10b3A6NnB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206NnB4IHNvbGlkIHRyYW5zcGFyZW50O3JpZ2h0Oi04cHg7dG9wOjUwJTttYXJnaW4tdG9wOi01cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtbGVmdDphZnRlcntib3JkZXItdG9wOjVweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjVweCBzb2xpZCB0cmFuc3BhcmVudDtyaWdodDotNnB4O3RvcDo1MCU7bWFyZ2luLXRvcDotNHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLXJpZ2h0e21hcmdpbi1sZWZ0OjEwcHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtcmlnaHQ6YmVmb3Jle2JvcmRlci10b3A6NnB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206NnB4IHNvbGlkIHRyYW5zcGFyZW50O2xlZnQ6LThweDt0b3A6NTAlO21hcmdpbi10b3A6LTVweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1yaWdodDphZnRlcntib3JkZXItdG9wOjVweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjVweCBzb2xpZCB0cmFuc3BhcmVudDtsZWZ0Oi02cHg7dG9wOjUwJTttYXJnaW4tdG9wOi00cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAgLm11bHRpLWxpbmV7ZGlzcGxheTpibG9jaztwYWRkaW5nOjJweCAwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9JzsiLCJcInVzZSBzdHJpY3RcIjsgJCh3aW5kb3cpLm9uKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyAkKFwiLnBhZ2UtbG9hZGVyXCIpLmZhZGVPdXQoKSB9LCA1MDApIH0pLCAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7IGlmICgkKFwiLmNsb2NrXCIpWzBdKSB7IHZhciBhID0gbmV3IERhdGU7IGEuc2V0RGF0ZShhLmdldERhdGUoKSksIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgdmFyIGEgPSAobmV3IERhdGUpLmdldFNlY29uZHMoKTsgJChcIi50aW1lX19zZWNcIikuaHRtbCgoYSA8IDEwID8gXCIwXCIgOiBcIlwiKSArIGEpIH0sIDFlMyksIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgdmFyIGEgPSAobmV3IERhdGUpLmdldE1pbnV0ZXMoKTsgJChcIi50aW1lX19taW5cIikuaHRtbCgoYSA8IDEwID8gXCIwXCIgOiBcIlwiKSArIGEpIH0sIDFlMyksIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgdmFyIGEgPSAobmV3IERhdGUpLmdldEhvdXJzKCk7ICQoXCIudGltZV9faG91cnNcIikuaHRtbCgoYSA8IDEwID8gXCIwXCIgOiBcIlwiKSArIGEpIH0sIDFlMykgfSAkKFwiYm9keVwiKS5vbihcImNsaWNrXCIsIFwiLnRoZW1lc19faXRlbVwiLCBmdW5jdGlvbiAoYSkgeyBhLnByZXZlbnREZWZhdWx0KCksICQoXCIudGhlbWVzX19pdGVtXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLCAkKHRoaXMpLmFkZENsYXNzKFwiYWN0aXZlXCIpOyB2YXIgYiA9ICQodGhpcykuZGF0YShcInNhLXZhbHVlXCIpOyAkKFwiYm9keVwiKS5hdHRyKFwiZGF0YS1zYS10aGVtZVwiLCBiKSB9KSwgJChcImJvZHlcIikub24oXCJmb2N1c1wiLCBcIi5zZWFyY2hfX3RleHRcIiwgZnVuY3Rpb24gKCkgeyAkKHRoaXMpLmNsb3Nlc3QoXCIuc2VhcmNoXCIpLmFkZENsYXNzKFwic2VhcmNoLS1mb2N1c1wiKSB9KSwgJChcImJvZHlcIikub24oXCJibHVyXCIsIFwiLnNlYXJjaF9fdGV4dFwiLCBmdW5jdGlvbiAoKSB7ICQodGhpcykudmFsKFwiXCIpLCAkKHRoaXMpLmNsb3Nlc3QoXCIuc2VhcmNoXCIpLnJlbW92ZUNsYXNzKFwic2VhcmNoLS1mb2N1c1wiKSB9KSwgJChcImJvZHlcIikub24oXCJjbGlja1wiLCBcIi5uYXZpZ2F0aW9uX19zdWIgPiBhXCIsIGZ1bmN0aW9uIChhKSB7IGEucHJldmVudERlZmF1bHQoKSwgJCh0aGlzKS5wYXJlbnQoKS50b2dnbGVDbGFzcyhcIm5hdmlnYXRpb25fX3N1Yi0tdG9nZ2xlZFwiKSwgJCh0aGlzKS5uZXh0KFwidWxcIikuc2xpZGVUb2dnbGUoMjUwKSB9KSwgJChcIi5mb3JtLWdyb3VwLS1mbG9hdFwiKVswXSAmJiAoJChcIi5mb3JtLWdyb3VwLS1mbG9hdFwiKS5lYWNoKGZ1bmN0aW9uICgpIHsgMCA9PSAhJCh0aGlzKS5maW5kKFwiLmZvcm0tY29udHJvbFwiKS52YWwoKS5sZW5ndGggJiYgJCh0aGlzKS5maW5kKFwiLmZvcm0tY29udHJvbFwiKS5hZGRDbGFzcyhcImZvcm0tY29udHJvbC0tYWN0aXZlXCIpIH0pLCAkKFwiYm9keVwiKS5vbihcImJsdXJcIiwgXCIuZm9ybS1ncm91cC0tZmxvYXQgLmZvcm0tY29udHJvbFwiLCBmdW5jdGlvbiAoKSB7IDAgPT0gJCh0aGlzKS52YWwoKS5sZW5ndGggPyAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiZm9ybS1jb250cm9sLS1hY3RpdmVcIikgOiAkKHRoaXMpLmFkZENsYXNzKFwiZm9ybS1jb250cm9sLS1hY3RpdmVcIikgfSkpLCAkKFwiYm9keVwiKS5vbihcImNsaWNrXCIsIFwiLmRyb3Bkb3duLW1lbnUtLWFjdGl2ZVwiLCBmdW5jdGlvbiAoYSkgeyBhLnN0b3BQcm9wYWdhdGlvbigpIH0pIH0pLCAkKFwiI2Ryb3B6b25lLXVwbG9hZFwiKVswXSAmJiAoRHJvcHpvbmUuYXV0b0Rpc2NvdmVyID0gITEpLCAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7IGlmICgkKFwiI2RhdGEtdGFibGVcIilbMF0pIHsgJChcIiNkYXRhLXRhYmxlXCIpLkRhdGFUYWJsZSh7IGF1dG9XaWR0aDogITEsIHJlc3BvbnNpdmU6ICEwLCBsZW5ndGhNZW51OiBbWzE1LCAzMCwgNDUsIC0xXSwgW1wiMTUgUm93c1wiLCBcIjMwIFJvd3NcIiwgXCI0NSBSb3dzXCIsIFwiRXZlcnl0aGluZ1wiXV0sIGxhbmd1YWdlOiB7IHNlYXJjaFBsYWNlaG9sZGVyOiBcIlNlYXJjaCBmb3IgcmVjb3Jkcy4uLlwiIH0sIGRvbTogXCJCbGZydGlwXCIsIGJ1dHRvbnM6IFt7IGV4dGVuZDogXCJleGNlbEh0bWw1XCIsIHRpdGxlOiBcIkV4cG9ydCBEYXRhXCIgfSwgeyBleHRlbmQ6IFwiY3N2SHRtbDVcIiwgdGl0bGU6IFwiRXhwb3J0IERhdGFcIiB9LCB7IGV4dGVuZDogXCJwcmludFwiLCB0aXRsZTogXCJNYXRlcmlhbCBBZG1pblwiIH1dLCBpbml0Q29tcGxldGU6IGZ1bmN0aW9uIChhLCBiKSB7ICQodGhpcykuY2xvc2VzdChcIi5kYXRhVGFibGVzX3dyYXBwZXJcIikucHJlcGVuZCgnPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfYnV0dG9ucyBoaWRkZW4tc20tZG93biBhY3Rpb25zXCI+PHNwYW4gY2xhc3M9XCJhY3Rpb25zX19pdGVtIHptZGkgem1kaS1wcmludFwiIGRhdGEtdGFibGUtYWN0aW9uPVwicHJpbnRcIiAvPjxzcGFuIGNsYXNzPVwiYWN0aW9uc19faXRlbSB6bWRpIHptZGktZnVsbHNjcmVlblwiIGRhdGEtdGFibGUtYWN0aW9uPVwiZnVsbHNjcmVlblwiIC8+PGRpdiBjbGFzcz1cImRyb3Bkb3duIGFjdGlvbnNfX2l0ZW1cIj48aSBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgY2xhc3M9XCJ6bWRpIHptZGktZG93bmxvYWRcIiAvPjx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodFwiPjxhIGhyZWY9XCJcIiBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBkYXRhLXRhYmxlLWFjdGlvbj1cImV4Y2VsXCI+RXhjZWwgKC54bHN4KTwvYT48YSBocmVmPVwiXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgZGF0YS10YWJsZS1hY3Rpb249XCJjc3ZcIj5DU1YgKC5jc3YpPC9hPjwvdWw+PC9kaXY+PC9kaXY+JykgfSB9KSwgJChcImJvZHlcIikub24oXCJjbGlja1wiLCBcIltkYXRhLXRhYmxlLWFjdGlvbl1cIiwgZnVuY3Rpb24gKGEpIHsgYS5wcmV2ZW50RGVmYXVsdCgpOyB2YXIgYiA9ICQodGhpcykuZGF0YShcInRhYmxlLWFjdGlvblwiKTsgaWYgKFwiZXhjZWxcIiA9PT0gYiAmJiAkKHRoaXMpLmNsb3Nlc3QoXCIuZGF0YVRhYmxlc193cmFwcGVyXCIpLmZpbmQoXCIuYnV0dG9ucy1leGNlbFwiKS50cmlnZ2VyKFwiY2xpY2tcIiksIFwiY3N2XCIgPT09IGIgJiYgJCh0aGlzKS5jbG9zZXN0KFwiLmRhdGFUYWJsZXNfd3JhcHBlclwiKS5maW5kKFwiLmJ1dHRvbnMtY3N2XCIpLnRyaWdnZXIoXCJjbGlja1wiKSwgXCJwcmludFwiID09PSBiICYmICQodGhpcykuY2xvc2VzdChcIi5kYXRhVGFibGVzX3dyYXBwZXJcIikuZmluZChcIi5idXR0b25zLXByaW50XCIpLnRyaWdnZXIoXCJjbGlja1wiKSwgXCJmdWxsc2NyZWVuXCIgPT09IGIpIHsgdmFyIGMgPSAkKHRoaXMpLmNsb3Nlc3QoXCIuY2FyZFwiKTsgYy5oYXNDbGFzcyhcImNhcmQtLWZ1bGxzY3JlZW5cIikgPyAoYy5yZW1vdmVDbGFzcyhcImNhcmQtLWZ1bGxzY3JlZW5cIiksICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiZGF0YS10YWJsZS10b2dnbGVkXCIpKSA6IChjLmFkZENsYXNzKFwiY2FyZC0tZnVsbHNjcmVlblwiKSwgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJkYXRhLXRhYmxlLXRvZ2dsZWRcIikpIH0gfSkgfSBpZiAoJChcIi50ZXh0YXJlYS1hdXRvc2l6ZVwiKVswXSAmJiBhdXRvc2l6ZSgkKFwiLnRleHRhcmVhLWF1dG9zaXplXCIpKSwgJChcImlucHV0LW1hc2tcIilbMF0gJiYgJChcIi5pbnB1dC1tYXNrXCIpLm1hc2soKSwgJChcInNlbGVjdC5zZWxlY3QyXCIpWzBdKSB7IHZhciBhID0gJChcIi5zZWxlY3QyLXBhcmVudFwiKVswXSA/ICQoXCIuc2VsZWN0Mi1wYXJlbnRcIikgOiAkKFwiYm9keVwiKTsgJChcInNlbGVjdC5zZWxlY3QyXCIpLnNlbGVjdDIoeyBkcm9wZG93bkF1dG9XaWR0aDogITAsIHdpZHRoOiBcIjEwMCVcIiwgZHJvcGRvd25QYXJlbnQ6IGEgfSkgfSBpZiAoJChcIiNkcm9wem9uZS11cGxvYWRcIilbMF0gJiYgJChcIiNkcm9wem9uZS11cGxvYWRcIikuZHJvcHpvbmUoeyB1cmw6IFwiL2ZpbGUvcG9zdFwiLCBhZGRSZW1vdmVMaW5rczogITAgfSksICQoXCIuZGF0ZXRpbWUtcGlja2VyXCIpWzBdICYmICQoXCIuZGF0ZXRpbWUtcGlja2VyXCIpLmZsYXRwaWNrcih7IGVuYWJsZVRpbWU6ICEwLCBuZXh0QXJyb3c6ICc8aSBjbGFzcz1cInptZGkgem1kaS1sb25nLWFycm93LXJpZ2h0XCIgLz4nLCBwcmV2QXJyb3c6ICc8aSBjbGFzcz1cInptZGkgem1kaS1sb25nLWFycm93LWxlZnRcIiAvPicgfSksICQoXCIuZGF0ZS1waWNrZXJcIilbMF0gJiYgJChcIi5kYXRlLXBpY2tlclwiKS5mbGF0cGlja3IoeyBlbmFibGVUaW1lOiAhMSwgbmV4dEFycm93OiAnPGkgY2xhc3M9XCJ6bWRpIHptZGktbG9uZy1hcnJvdy1yaWdodFwiIC8+JywgcHJldkFycm93OiAnPGkgY2xhc3M9XCJ6bWRpIHptZGktbG9uZy1hcnJvdy1sZWZ0XCIgLz4nIH0pLCAkKFwiLnRpbWUtcGlja2VyXCIpWzBdICYmICQoXCIudGltZS1waWNrZXJcIikuZmxhdHBpY2tyKHsgbm9DYWxlbmRhcjogITAsIGVuYWJsZVRpbWU6ICEwIH0pLCAkKFwiI2lucHV0LXNsaWRlclwiKVswXSkgeyB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXQtc2xpZGVyXCIpOyBub1VpU2xpZGVyLmNyZWF0ZShiLCB7IHN0YXJ0OiBbMjBdLCBjb25uZWN0OiBcImxvd2VyXCIsIHJhbmdlOiB7IG1pbjogMCwgbWF4OiAxMDAgfSB9KSwgYi5ub1VpU2xpZGVyLm9uKFwidXBkYXRlXCIsIGZ1bmN0aW9uIChhLCBiKSB7IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXQtc2xpZGVyLXZhbHVlXCIpLnZhbHVlID0gYVtiXSB9KSB9IGlmICgkKFwiI2lucHV0LXNsaWRlci1yYW5nZVwiKVswXSkgeyB2YXIgYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXQtc2xpZGVyLXJhbmdlXCIpLCBkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dC1zbGlkZXItcmFuZ2UtdmFsdWUtMVwiKSwgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXQtc2xpZGVyLXJhbmdlLXZhbHVlLTJcIiksIGYgPSBbZCwgZV07IG5vVWlTbGlkZXIuY3JlYXRlKGMsIHsgc3RhcnQ6IFsyMCwgODBdLCBjb25uZWN0OiAhMCwgcmFuZ2U6IHsgbWluOiAwLCBtYXg6IDEwMCB9IH0pLCBjLm5vVWlTbGlkZXIub24oXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKGEsIGIpIHsgZltiXS52YWx1ZSA9IGFbYl0gfSkgfSBpZiAoJChcIi5pbnB1dC1zbGlkZXJcIilbMF0pIGZvciAodmFyIGcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW5wdXQtc2xpZGVyXCIpLCBoID0gMDsgaCA8IGcubGVuZ3RoOyBoKyspbm9VaVNsaWRlci5jcmVhdGUoZ1toXSwgeyBzdGFydDogWzIwXSwgY29ubmVjdDogXCJsb3dlclwiLCByYW5nZTogeyBtaW46IDAsIG1heDogMTAwIH0gfSk7IGlmICgkKFwiLmNvbG9yLXBpY2tlclwiKVswXSAmJiAoJChcIi5jb2xvci1waWNrZXJfX3ZhbHVlXCIpLmNvbG9ycGlja2VyKCksICQoXCJib2R5XCIpLm9uKFwiY2hhbmdlXCIsIFwiLmNvbG9yLXBpY2tlcl9fdmFsdWVcIiwgZnVuY3Rpb24gKCkgeyAkKHRoaXMpLmNsb3Nlc3QoXCIuY29sb3ItcGlja2VyXCIpLmZpbmQoXCIuY29sb3ItcGlja2VyX19wcmV2aWV3XCIpLmNzcyhcImJhY2tncm91bmRDb2xvclwiLCAkKHRoaXMpLnZhbCgpKSB9KSksICQoXCIud3lzaXd5Zy1lZGl0b3JcIilbMF0gJiYgJChcIi53eXNpd3lnLWVkaXRvclwiKS50cnVtYm93eWcoeyBhdXRvZ3JvdzogITAgfSksICQoXCIubGlnaHRib3hcIilbMF0gJiYgJChcIi5saWdodGJveFwiKS5saWdodEdhbGxlcnkoeyBlbmFibGVUb3VjaDogITAgfSksICQoJ1tkYXRhLXRvZ2dsZT1cInBvcG92ZXJcIl0nKVswXSAmJiAkKCdbZGF0YS10b2dnbGU9XCJwb3BvdmVyXCJdJykucG9wb3ZlcigpLCAkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJylbMF0gJiYgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKSwgJChcIi53aWRnZXQtY2FsZW5kYXJfX2JvZHlcIilbMF0pIHsgJChcIi53aWRnZXQtY2FsZW5kYXJfX2JvZHlcIikuZnVsbENhbGVuZGFyKHsgY29udGVudEhlaWdodDogXCJhdXRvXCIsIHRoZW1lOiAhMSwgYnV0dG9uSWNvbnM6IHsgcHJldjogXCIgem1kaSB6bWRpLWxvbmctYXJyb3ctbGVmdFwiLCBuZXh0OiBcIiB6bWRpIHptZGktbG9uZy1hcnJvdy1yaWdodFwiIH0sIGhlYWRlcjogeyByaWdodDogXCJuZXh0XCIsIGNlbnRlcjogXCJ0aXRsZSwgXCIsIGxlZnQ6IFwicHJldlwiIH0sIGRlZmF1bHREYXRlOiBcIjIwMTYtMDgtMTJcIiwgZWRpdGFibGU6ICEwLCBldmVudHM6IFt7IHRpdGxlOiBcIkRvbG9yIFBlbGxlbnRlc3F1ZVwiLCBzdGFydDogXCIyMDE2LTA4LTAxXCIgfSwgeyB0aXRsZTogXCJQdXJ1cyBOaWJoXCIsIHN0YXJ0OiBcIjIwMTYtMDgtMDdcIiB9LCB7IHRpdGxlOiBcIkFtZXQgQ29uZGltZW50dW1cIiwgc3RhcnQ6IFwiMjAxNi0wOC0wOVwiIH0sIHsgdGl0bGU6IFwiVGVsbHVzXCIsIHN0YXJ0OiBcIjIwMTYtMDgtMTJcIiB9LCB7IHRpdGxlOiBcIlZlc3RpYnVsdW1cIiwgc3RhcnQ6IFwiMjAxNi0wOC0xOFwiIH0sIHsgdGl0bGU6IFwiSXBzdW1cIiwgc3RhcnQ6IFwiMjAxNi0wOC0yNFwiIH0sIHsgdGl0bGU6IFwiRnJpbmdpbGxhIFNpdFwiLCBzdGFydDogXCIyMDE2LTA4LTI3XCIgfSwgeyB0aXRsZTogXCJBbWV0IFBoYXJldHJhXCIsIHVybDogXCJodHRwOi8vZ29vZ2xlLmNvbS9cIiwgc3RhcnQ6IFwiMjAxNi0wOC0zMFwiIH1dIH0pOyB2YXIgaSA9IG1vbWVudCgpLmZvcm1hdChcIllZWVlcIiksIGogPSBtb21lbnQoKS5mb3JtYXQoXCJkZGRkLCBNTU0gRFwiKTsgJChcIi53aWRnZXQtY2FsZW5kYXJfX3llYXJcIikuaHRtbChpKSwgJChcIi53aWRnZXQtY2FsZW5kYXJfX2RheVwiKS5odG1sKGopIH0gaWYgKCQoXCIubm90ZXNfX2JvZHlcIilbMF0pIHsgdmFyIGs7ICQoXCIubm90ZXNfX2JvZHlcIikuZWFjaChmdW5jdGlvbiAoYSwgYikgeyBrID0gJCh0aGlzKS5wcmV2KCkuaXMoXCIubm90ZXNfX3RpdGxlXCIpID8gNCA6IDYsICRjbGFtcChiLCB7IGNsYW1wOiBrIH0pIH0pIH0gJChcIi5zY3JvbGxiYXItaW5uZXJcIilbMF0gJiYgJChcIi5zY3JvbGxiYXItaW5uZXJcIikuc2Nyb2xsYmFyKCkuc2Nyb2xsTG9jaygpOyB2YXIgbCA9IFt7IG5hbWU6IFwibm9kZTFcIiwgY2hpbGRyZW46IFt7IG5hbWU6IFwibm9kZTFfMVwiLCBjaGlsZHJlbjogW3sgbmFtZTogXCJub2RlMV8xXzFcIiB9LCB7IG5hbWU6IFwibm9kZTFfMV8yXCIgfSwgeyBuYW1lOiBcIm5vZGUxXzFfM1wiIH1dIH0sIHsgbmFtZTogXCJub2RlMV8yXCIgfSwgeyBuYW1lOiBcIm5vZGUxXzNcIiB9XSB9LCB7IG5hbWU6IFwibm9kZTJcIiwgY2hpbGRyZW46IFt7IG5hbWU6IFwibm9kZTJfMVwiIH0sIHsgbmFtZTogXCJub2RlMl8yXCIgfSwgeyBuYW1lOiBcIm5vZGUyXzNcIiB9XSB9LCB7IG5hbWU6IFwibm9kZTNcIiwgY2hpbGRyZW46IFt7IG5hbWU6IFwibm9kZTNfMVwiIH0sIHsgbmFtZTogXCJub2RlM18yXCIgfSwgeyBuYW1lOiBcIm5vZGUzXzNcIiB9XSB9XSwgbSA9IFt7IG5hbWU6IFwibm9kZTFcIiwgY2hpbGRyZW46IFt7IG5hbWU6IFwibm9kZTFfMVwiIH0sIHsgbmFtZTogXCJub2RlMV8yXCIgfSwgeyBuYW1lOiBcIm5vZGUxXzNcIiB9XSB9LCB7IG5hbWU6IFwibm9kZTJcIiwgY2hpbGRyZW46IFt7IG5hbWU6IFwibm9kZTJfMVwiIH0sIHsgbmFtZTogXCJub2RlMl8yXCIgfSwgeyBuYW1lOiBcIm5vZGUyXzNcIiB9XSB9XSwgbiA9IFt7IGxhYmVsOiBcIm5vZGUxXCIsIGNoaWxkcmVuOiBbeyBuYW1lOiAnPGEgaHJlZj1cImV4YW1wbGUxLmh0bWxcIj5ub2RlMV8xPC9hPicgfSwgeyBuYW1lOiAnPGEgaHJlZj1cImV4YW1wbGUyLmh0bWxcIj5ub2RlMV8yPC9hPicgfSwgJzxhIGhyZWY9XCJleGFtcGxlMy5odG1sXCI+RXhhbXBsZSA8L2E+J10gfV07ICQoXCIudHJlZXZpZXdcIilbMF0gJiYgJChcIi50cmVldmlld1wiKS50cmVlKHsgZGF0YTogbCwgY2xvc2VkSWNvbjogJCgnPGkgY2xhc3M9XCJ6bWRpIHptZGktcGx1c1wiPjwvaT4nKSwgb3BlbmVkSWNvbjogJCgnPGkgY2xhc3M9XCJ6bWRpIHptZGktbWludXNcIj48L2k+JykgfSksICQoXCIudHJlZXZpZXctZXhwYW5kZWRcIilbMF0gJiYgJChcIi50cmVldmlldy1leHBhbmRlZFwiKS50cmVlKHsgZGF0YTogbSwgYXV0b09wZW46ICEwLCBjbG9zZWRJY29uOiAkKCc8aSBjbGFzcz1cInptZGkgem1kaS1wbHVzXCI+PC9pPicpLCBvcGVuZWRJY29uOiAkKCc8aSBjbGFzcz1cInptZGkgem1kaS1taW51c1wiPjwvaT4nKSB9KSwgJChcIi50cmVldmlldy1kcmFnXCIpWzBdICYmICQoXCIudHJlZXZpZXctZHJhZ1wiKS50cmVlKHsgZGF0YTogbSwgZHJhZ0FuZERyb3A6ICEwLCBhdXRvT3BlbjogITAsIGNsb3NlZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLXBsdXNcIj48L2k+JyksIG9wZW5lZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLW1pbnVzXCI+PC9pPicpIH0pLCAkKFwiLnRyZWV2aWV3LWRyYWdcIilbMF0gJiYgJChcIi50cmVldmlldy1kcmFnXCIpLnRyZWUoeyBkYXRhOiBtLCBkcmFnQW5kRHJvcDogITAsIGF1dG9PcGVuOiAhMCwgY2xvc2VkSWNvbjogJCgnPGkgY2xhc3M9XCJ6bWRpIHptZGktcGx1c1wiPjwvaT4nKSwgb3BlbmVkSWNvbjogJCgnPGkgY2xhc3M9XCJ6bWRpIHptZGktbWludXNcIj48L2k+JykgfSksICQoXCIudHJlZXZpZXctZXNjYXBlXCIpWzBdICYmICQoXCIudHJlZXZpZXctZXNjYXBlXCIpLnRyZWUoeyBkYXRhOiBuLCBhdXRvRXNjYXBlOiAhMSwgYXV0b09wZW46ICEwLCBjbG9zZWRJY29uOiAkKCc8aSBjbGFzcz1cInptZGkgem1kaS1wbHVzXCI+PC9pPicpLCBvcGVuZWRJY29uOiAkKCc8aSBjbGFzcz1cInptZGkgem1kaS1taW51c1wiPjwvaT4nKSB9KSwgJChcIi5yYXRpbmdcIilbMF0gJiYgJChcIi5yYXRpbmdcIikuZWFjaChmdW5jdGlvbiAoKSB7IHZhciBhID0gJCh0aGlzKS5kYXRhKFwicmF0aW5nXCIpOyAkKHRoaXMpLnJhdGVZbyh7IHJhdGluZzogYSwgbm9ybWFsRmlsbDogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMylcIiwgcmF0ZWRGaWxsOiBcIiNmZmMxMDdcIiB9KSB9KSwgJChcIi50ZXh0LWNvdW50ZXJcIilbMF0gJiYgJChcIi50ZXh0LWNvdW50ZXJcIikuZWFjaChmdW5jdGlvbiAoKSB7IHZhciBhID0gJCh0aGlzKS5kYXRhKFwibWluLWxlbmd0aFwiKSB8fCAwLCBiID0gJCh0aGlzKS5kYXRhKFwibWF4LWxlbmd0aFwiKTsgJCh0aGlzKS50ZXh0Y291bnRlcih7IG1pbjogYSwgbWF4OiBiLCBjb3VudERvd246ICEwLCBpbnB1dEVycm9yQ2xhc3M6IFwiaXMtaW52YWxpZFwiLCBjb3VudGVyRXJyb3JDbGFzczogXCJ0ZXh0LW9yYW5nZVwiIH0pIH0pIH0pLCAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGEoYSkgeyBhLnJlcXVlc3RGdWxsc2NyZWVuID8gYS5yZXF1ZXN0RnVsbHNjcmVlbigpIDogYS5tb3pSZXF1ZXN0RnVsbFNjcmVlbiA/IGEubW96UmVxdWVzdEZ1bGxTY3JlZW4oKSA6IGEud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4gPyBhLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCkgOiBhLm1zUmVxdWVzdEZ1bGxzY3JlZW4gJiYgYS5tc1JlcXVlc3RGdWxsc2NyZWVuKCkgfSAkKFwiYm9keVwiKS5vbihcImNsaWNrXCIsIFwiW2RhdGEtc2EtYWN0aW9uXVwiLCBmdW5jdGlvbiAoYikgeyBiLnByZXZlbnREZWZhdWx0KCk7IHZhciBjID0gJCh0aGlzKSwgZCA9IGMuZGF0YShcInNhLWFjdGlvblwiKSwgZSA9IFwiXCI7IHN3aXRjaCAoZCkgeyBjYXNlIFwic2VhcmNoLW9wZW5cIjogJChcIi5zZWFyY2hcIikuYWRkQ2xhc3MoXCJzZWFyY2gtLXRvZ2dsZWRcIik7IGJyZWFrOyBjYXNlIFwic2VhcmNoLWNsb3NlXCI6ICQoXCIuc2VhcmNoXCIpLnJlbW92ZUNsYXNzKFwic2VhcmNoLS10b2dnbGVkXCIpOyBicmVhazsgY2FzZSBcImFzaWRlLW9wZW5cIjogZSA9IGMuZGF0YShcInNhLXRhcmdldFwiKSwgYy5hZGRDbGFzcyhcInRvZ2dsZWRcIiksICQoXCJib2R5XCIpLmFkZENsYXNzKFwiYXNpZGUtdG9nZ2xlZFwiKSwgJChlKS5hZGRDbGFzcyhcInRvZ2dsZWRcIiksICQoXCIuY29udGVudCwgLmhlYWRlclwiKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJzYS1iYWNrZHJvcFwiIGRhdGEtc2EtYWN0aW9uPVwiYXNpZGUtY2xvc2VcIiBkYXRhLXNhLXRhcmdldD0nICsgZSArIFwiIC8+XCIpOyBicmVhazsgY2FzZSBcImFzaWRlLWNsb3NlXCI6IGUgPSBjLmRhdGEoXCJzYS10YXJnZXRcIiksICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiYXNpZGUtdG9nZ2xlZFwiKSwgJCgnW2RhdGEtc2EtYWN0aW9uPVwiYXNpZGUtb3BlblwiXSwgJyArIGUpLnJlbW92ZUNsYXNzKFwidG9nZ2xlZFwiKSwgJChcIi5jb250ZW50LCAuaGVhZGVyXCIpLmZpbmQoXCIuc2EtYmFja2Ryb3BcIikucmVtb3ZlKCk7IGJyZWFrOyBjYXNlIFwiZnVsbHNjcmVlblwiOiBhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7IGJyZWFrOyBjYXNlIFwicHJpbnRcIjogd2luZG93LnByaW50KCk7IGJyZWFrOyBjYXNlIFwibG9naW4tc3dpdGNoXCI6IGUgPSBjLmRhdGEoXCJzYS10YXJnZXRcIiksICQoXCIubG9naW5fX2Jsb2NrXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLCAkKGUpLmFkZENsYXNzKFwiYWN0aXZlXCIpOyBicmVhazsgY2FzZSBcIm5vdGlmaWNhdGlvbnMtY2xlYXJcIjogYi5zdG9wUHJvcGFnYXRpb24oKTsgdmFyIGYgPSAkKFwiLnRvcC1uYXZfX25vdGlmaWNhdGlvbnMgLmxpc3R2aWV3X19pdGVtXCIpLCBnID0gZi5sZW5ndGgsIGggPSAwOyBjLmZhZGVPdXQoKSwgZi5lYWNoKGZ1bmN0aW9uICgpIHsgdmFyIGEgPSAkKHRoaXMpOyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgYS5hZGRDbGFzcyhcImFuaW1hdGVkIGZhZGVPdXRSaWdodFwiKSB9LCBoICs9IDE1MCkgfSksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBmLnJlbW92ZSgpLCAkKFwiLnRvcC1uYXZfX25vdGlmaWNhdGlvbnNcIikuYWRkQ2xhc3MoXCJ0b3AtbmF2X19ub3RpZmljYXRpb25zLS1jbGVhcmVkXCIpIH0sIDE4MCAqIGcpOyBicmVhazsgY2FzZSBcInRvb2xiYXItc2VhcmNoLW9wZW5cIjogJCh0aGlzKS5jbG9zZXN0KFwiLnRvb2xiYXJcIikuZmluZChcIi50b29sYmFyX19zZWFyY2hcIikuZmFkZUluKDIwMCksICQodGhpcykuY2xvc2VzdChcIi50b29sYmFyXCIpLmZpbmQoXCIudG9vbGJhcl9fc2VhcmNoIGlucHV0XCIpLmZvY3VzKCk7IGJyZWFrOyBjYXNlIFwidG9vbGJhci1zZWFyY2gtY2xvc2VcIjogJCh0aGlzKS5jbG9zZXN0KFwiLnRvb2xiYXJcIikuZmluZChcIi50b29sYmFyX19zZWFyY2ggaW5wdXRcIikudmFsKFwiXCIpLCAkKHRoaXMpLmNsb3Nlc3QoXCIudG9vbGJhclwiKS5maW5kKFwiLnRvb2xiYXJfX3NlYXJjaFwiKS5mYWRlT3V0KDIwMCkgfSB9KSB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgUGFnZSBMb2FkZXJcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoJy5wYWdlLWxvYWRlcicpLmZhZGVPdXQoKTtcclxuICAgIH0sIDUwMCk7XHJcbn0pO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBTZWFyY2hcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIEFjdGl2ZSBTdGF0XHJcbiAgICAkKCdib2R5Jykub24oJ2ZvY3VzJywgJy5zZWFyY2hfX3RleHQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuc2VhcmNoJykuYWRkQ2xhc3MoJ3NlYXJjaC0tZm9jdXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENsZWFyXHJcbiAgICAkKCdib2R5Jykub24oJ2JsdXInLCAnLnNlYXJjaF9fdGV4dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKHRoaXMpLnZhbCgnJyk7XHJcbiAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuc2VhcmNoJykucmVtb3ZlQ2xhc3MoJ3NlYXJjaC0tZm9jdXMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEF1dG9jb21wbGV0ZVxyXG4gICAgJChcIiNuYXZfc2VhcmNoXCIpLmF1dG9jb21wbGV0ZSh7XHJcbiAgICAgICAgc291cmNlOiAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHVybDogYC9zZWFyY2g/cT0ke3JlcXVlc3QudGVybX1gLFxyXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW5MZW5ndGg6IDMsXHJcbiAgICAgICAgZGVsYXk6IDUwMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgU2lkZWJhciB0b2dnbGUgbWVudVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5uYXZpZ2F0aW9uX19zdWIgPiBhJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICQodGhpcykucGFyZW50KCkudG9nZ2xlQ2xhc3MoJ25hdmlnYXRpb25fX3N1Yi0tdG9nZ2xlZCcpO1xyXG4gICAgICAgICQodGhpcykubmV4dCgndWwnKS5zbGlkZVRvZ2dsZSgyNTApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgIEN1c3RvbSBTaWRlIEJhcnNcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgLy8gQ2xvc2Ugc2lkZWJhciBpZiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSBvZiBpdC5cclxuICAgICQoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKCQoXCIuc2lkZWJhci1zcGVjaWFsLmFjdGl2ZVwiKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmICghZS50YXJnZXQuY2xvc2VzdChcIi5zaWRlYmFyLXNwZWNpYWxcIikpIHtcclxuICAgICAgICAgICAgICAgICQoJy5zaWRlYmFyLXNwZWNpYWwnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBGb3JtIGdyb3VwIGJhclxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZigkKCcuZm9ybS1ncm91cC0tZmxvYXQnKVswXSkge1xyXG4gICAgICAgICQoJy5mb3JtLWdyb3VwLS1mbG9hdCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcCA9ICQodGhpcykuZmluZCgnLmZvcm0tY29udHJvbCcpLnZhbCgpXHJcblxyXG4gICAgICAgICAgICBpZighcC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcuZm9ybS1jb250cm9sJykuYWRkQ2xhc3MoJ2Zvcm0tY29udHJvbC0tYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnYm9keScpLm9uKCdibHVyJywgJy5mb3JtLWdyb3VwLS1mbG9hdCAuZm9ybS1jb250cm9sJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdmFyIGkgPSAkKHRoaXMpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGkubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Zvcm0tY29udHJvbC0tYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdmb3JtLWNvbnRyb2wtLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgU3RheSBhY3RpdmUgRHJvcGRvd24gbWVudVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5kcm9wZG93bi1tZW51LS1hY3RpdmUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICBBdXRvIGNvbXBsZXRlIGZvciByZWFjdCB0ZXh0IGlucHV0c1xyXG4gICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgICQoXCIjbG9va3VwX2FjY291bnRcIikuYXV0b2NvbXBsZXRlKHtcclxuICAgICAgICBzb3VyY2U6IChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBgL3NlYXJjaD9xPSR7cmVxdWVzdC50ZXJtfSZmaWx0ZXI9YWNjb3VudGAsXHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1pbkxlbmd0aDogMyxcclxuICAgICAgICBkZWxheTogNTAwXHJcbiAgICB9KVxyXG5cclxuICAgIC8vJChcIi5waWxvdC1sb29rdXBcIikuYXV0b2NvbXBsZXRlKHtcclxuICAgIC8vICAgIHNvdXJjZTogKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XHJcbiAgICAvLyAgICAgICAgJC5hamF4KHtcclxuICAgIC8vICAgICAgICAgICAgdXJsOiBgL3NlYXJjaD9xPSR7cmVxdWVzdC50ZXJtfSZmaWx0ZXI9cGlsb3RgLFxyXG4gICAgLy8gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAvLyAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICByZXNwb25zZShkYXRhKTtcclxuICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgIH0pO1xyXG4gICAgLy8gICAgfSxcclxuICAgIC8vICAgIG1pbkxlbmd0aDogMyxcclxuICAgIC8vICAgIGRlbGF5OiA1MDBcclxuICAgIC8vfSk7XHJcblxyXG4gICAgLy8kKFwiLmxvb2t1cFwiKS5hdXRvY29tcGxldGUoe1xyXG4gICAgLy8gICAgc291cmNlOiAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcclxuICAgIC8vICAgICAgICAkLmFqYXgoe1xyXG4gICAgLy8gICAgICAgICAgICB1cmw6IGAvc2VhcmNoP3E9JHtyZXF1ZXN0LnRlcm19YCxcclxuICAgIC8vICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgLy8gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgcmVzcG9uc2UoZGF0YSk7XHJcbiAgICAvLyAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICB9KTtcclxuICAgIC8vICAgIH0sXHJcbiAgICAvLyAgICBtaW5MZW5ndGg6IDMsXHJcbiAgICAvLyAgICBkZWxheTogNTAwXHJcbiAgICAvL30pO1xyXG5cclxuXHJcbiAgICAvLyBBZG1pbiBzZXR0aW5ncyBzaGlwIHNlYXJjaFxyXG4gICAgJChcIiNzaGlwX3NlYXJjaFwiKS5hdXRvY29tcGxldGUoe1xyXG4gICAgICAgIHNvdXJjZTogKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IGAvYWRtaW4vc2V0dGluZ3Mvc2hpcHMvc2VhcmNoP3E9JHtyZXF1ZXN0LnRlcm19YCxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWluTGVuZ3RoOiAzLFxyXG4gICAgICAgIGRlbGF5OiA1MDBcclxuICAgIH0pO1xyXG59KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4vLyBEaXNhYmxlIERyb3B6b25lIGF1dG8gZGlzY292ZXJcclxuaWYoJCgnI2Ryb3B6b25lLXVwbG9hZCcpWzBdKSB7XHJcbiAgICBEcm9wem9uZS5hdXRvRGlzY292ZXIgPSBmYWxzZTtcclxufVxyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBEYXRhIFRhYmxlIChEYXRhVGFibGVzKVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIGlmKCQoJyNkYXRhLXRhYmxlJylbMF0pIHtcclxuXHJcbiAgICAgICAgLy8gQWRkIGN1c3RvbSBidXR0b25zXHJcbiAgICAgICAgdmFyIGRhdGFUYWJsZUJ1dHRvbnMgPSAgJzxkaXYgY2xhc3M9XCJkYXRhVGFibGVzX2J1dHRvbnMgaGlkZGVuLXNtLWRvd24gYWN0aW9uc1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJhY3Rpb25zX19pdGVtIHptZGkgem1kaS1wcmludFwiIGRhdGEtdGFibGUtYWN0aW9uPVwicHJpbnRcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJhY3Rpb25zX19pdGVtIHptZGkgem1kaS1mdWxsc2NyZWVuXCIgZGF0YS10YWJsZS1hY3Rpb249XCJmdWxsc2NyZWVuXCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJkcm9wZG93biBhY3Rpb25zX19pdGVtXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGkgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGNsYXNzPVwiem1kaSB6bWRpLWRvd25sb2FkXCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIlwiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGRhdGEtdGFibGUtYWN0aW9uPVwiZXhjZWxcIj5FeGNlbCAoLnhsc3gpPC9hPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YSBocmVmPVwiXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgZGF0YS10YWJsZS1hY3Rpb249XCJjc3ZcIj5DU1YgKC5jc3YpPC9hPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvdWw+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhdGUgZGF0YS10YWJsZVxyXG4gICAgICAgICQoJyNkYXRhLXRhYmxlJykuRGF0YVRhYmxlKHtcclxuICAgICAgICAgICAgYXV0b1dpZHRoOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgbGVuZ3RoTWVudTogW1sxNSwgMzAsIDQ1LCAtMV0sIFsnMTUgUm93cycsICczMCBSb3dzJywgJzQ1IFJvd3MnLCAnRXZlcnl0aGluZyddXSwgLy9MZW5ndGggc2VsZWN0XHJcbiAgICAgICAgICAgIGxhbmd1YWdlOiB7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hQbGFjZWhvbGRlcjogXCJTZWFyY2ggZm9yIHJlY29yZHMuLi5cIiAvLyBTZWFyY2ggcGxhY2Vob2xkZXJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZG9tOiAnQmxmcnRpcCcsXHJcbiAgICAgICAgICAgIGJ1dHRvbnM6IFsgLy8gRGF0YSB0YWJsZSBidXR0b25zIGZvciBleHBvcnQgYW5kIHByaW50XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kOiAnZXhjZWxIdG1sNScsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdFeHBvcnQgRGF0YSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kOiAnY3N2SHRtbDUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRXhwb3J0IERhdGEnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZDogJ3ByaW50JyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01hdGVyaWFsIEFkbWluJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBcImluaXRDb21wbGV0ZVwiOiBmdW5jdGlvbihzZXR0aW5ncywganNvbikge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZGF0YVRhYmxlc193cmFwcGVyJykucHJlcGVuZChkYXRhVGFibGVCdXR0b25zKTsgLy8gQWRkIGN1c3RvbSBidXR0b24gKGZ1bGxzY3JlZW4sIHByaW50IGFuZCBleHBvcnQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gRGF0YSB0YWJsZSBidXR0b24gYWN0aW9uc1xyXG4gICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnW2RhdGEtdGFibGUtYWN0aW9uXScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBleHBvcnRGb3JtYXQgPSAkKHRoaXMpLmRhdGEoJ3RhYmxlLWFjdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgaWYoZXhwb3J0Rm9ybWF0ID09PSAnZXhjZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kYXRhVGFibGVzX3dyYXBwZXInKS5maW5kKCcuYnV0dG9ucy1leGNlbCcpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoZXhwb3J0Rm9ybWF0ID09PSAnY3N2Jykge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZGF0YVRhYmxlc193cmFwcGVyJykuZmluZCgnLmJ1dHRvbnMtY3N2JykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihleHBvcnRGb3JtYXQgPT09ICdwcmludCcpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpLmZpbmQoJy5idXR0b25zLXByaW50JykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihleHBvcnRGb3JtYXQgPT09ICdmdWxsc2NyZWVuJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudENhcmQgPSAkKHRoaXMpLmNsb3Nlc3QoJy5jYXJkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYocGFyZW50Q2FyZC5oYXNDbGFzcygnY2FyZC0tZnVsbHNjcmVlbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q2FyZC5yZW1vdmVDbGFzcygnY2FyZC0tZnVsbHNjcmVlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnZGF0YS10YWJsZS10b2dnbGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDYXJkLmFkZENsYXNzKCdjYXJkLS1mdWxsc2NyZWVuJylcclxuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2RhdGEtdGFibGUtdG9nZ2xlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgQXV0b3NpemUgVGV4dGFyZWEgKEF1dG9zaXplKVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIGlmKCQoJy50ZXh0YXJlYS1hdXRvc2l6ZScpWzBdKSB7XHJcbiAgICAgICAgYXV0b3NpemUoJCgnLnRleHRhcmVhLWF1dG9zaXplJykpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIElucHV0IE1hc2sgKGpRdWVyeSBNYXNrIFBsdWdpbilcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZiAoJCgnaW5wdXQtbWFzaycpWzBdKSB7XHJcbiAgICAgICAgJCgnLmlucHV0LW1hc2snKS5tYXNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBTZWxlY3QgMlxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIGlmKCQoJ3NlbGVjdC5zZWxlY3QyJylbMF0pIHtcclxuICAgICAgICB2YXIgc2VsZWN0MnBhcmVudCA9ICQoJy5zZWxlY3QyLXBhcmVudCcpWzBdID8gJCgnLnNlbGVjdDItcGFyZW50JykgOiAkKCdib2R5Jyk7XHJcblxyXG4gICAgICAgICQoJ3NlbGVjdC5zZWxlY3QyJykuc2VsZWN0Mih7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duQXV0b1dpZHRoOiB0cnVlLFxyXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgICBkcm9wZG93blBhcmVudDogc2VsZWN0MnBhcmVudFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIERyYWcgbiBEcm9wIGZpbGUgdXBsb2FkIChEcm9wem9uZUpzKVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIGlmKCQoJyNkcm9wem9uZS11cGxvYWQnKVswXSkge1xyXG4gICAgICAgICQoJyNkcm9wem9uZS11cGxvYWQnKS5kcm9wem9uZSh7XHJcbiAgICAgICAgICAgIHVybDogXCIvZmlsZS9wb3N0XCIsXHJcbiAgICAgICAgICAgIGFkZFJlbW92ZUxpbmtzOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgRGF0ZXRpbWUgcGlja2VyIChGbGF0cGlja3IpXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgLy8gRGF0ZSBhbmQgdGltZVxyXG4gICAgaWYoJCgnLmRhdGV0aW1lLXBpY2tlcicpWzBdKSB7XHJcbiAgICAgICAgJCgnLmRhdGV0aW1lLXBpY2tlcicpLmZsYXRwaWNrcih7XHJcbiAgICAgICAgICAgIGVuYWJsZVRpbWU6IHRydWUsXHJcbiAgICAgICAgICAgIG5leHRBcnJvdzogJzxpIGNsYXNzPVwiem1kaSB6bWRpLWxvbmctYXJyb3ctcmlnaHRcIiAvPicsXHJcbiAgICAgICAgICAgIHByZXZBcnJvdzogJzxpIGNsYXNzPVwiem1kaSB6bWRpLWxvbmctYXJyb3ctbGVmdFwiIC8+J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERhdGUgb25seVxyXG4gICAgaWYoJCgnLmRhdGUtcGlja2VyJylbMF0pIHtcclxuICAgICAgICAkKCcuZGF0ZS1waWNrZXInKS5mbGF0cGlja3Ioe1xyXG4gICAgICAgICAgICBlbmFibGVUaW1lOiBmYWxzZSxcclxuICAgICAgICAgICAgbmV4dEFycm93OiAnPGkgY2xhc3M9XCJ6bWRpIHptZGktbG9uZy1hcnJvdy1yaWdodFwiIC8+JyxcclxuICAgICAgICAgICAgcHJldkFycm93OiAnPGkgY2xhc3M9XCJ6bWRpIHptZGktbG9uZy1hcnJvdy1sZWZ0XCIgLz4nXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGltZSBvbmx5XHJcbiAgICBpZigkKCcudGltZS1waWNrZXInKVswXSkge1xyXG4gICAgICAgICQoJy50aW1lLXBpY2tlcicpLmZsYXRwaWNrcih7XHJcbiAgICAgICAgICAgIG5vQ2FsZW5kYXI6IHRydWUsXHJcbiAgICAgICAgICAgIGVuYWJsZVRpbWU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBJbnB1dCBzbGlkZXIgKG5vVWlTbGlkZXIpXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgLy8gU2luZ2xlXHJcbiAgICBpZigkKCcjaW5wdXQtc2xpZGVyJylbMF0pIHtcclxuICAgICAgICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgKCdpbnB1dC1zbGlkZXInKTtcclxuXHJcbiAgICAgICAgbm9VaVNsaWRlci5jcmVhdGUgKHNsaWRlciwge1xyXG4gICAgICAgICAgICBzdGFydDogWzIwXSxcclxuICAgICAgICAgICAgY29ubmVjdDogJ2xvd2VyJyxcclxuICAgICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgICAgICdtaW4nOiAwLFxyXG4gICAgICAgICAgICAgICAgJ21heCc6IDEwMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNsaWRlci5ub1VpU2xpZGVyLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiggdmFsdWVzLCBoYW5kbGUgKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC1zbGlkZXItdmFsdWUnKS52YWx1ZSA9IHZhbHVlc1toYW5kbGVdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJhbmdlXHJcbiAgICBpZigkKCcjaW5wdXQtc2xpZGVyLXJhbmdlJylbMF0pIHtcclxuICAgICAgICB2YXIgc2xpZGVyUmFuZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAoJ2lucHV0LXNsaWRlci1yYW5nZScpO1xyXG4gICAgICAgIHZhciBzbGlkZXJSYW5nZVVwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LXNsaWRlci1yYW5nZS12YWx1ZS0xJyk7XHJcbiAgICAgICAgdmFyIHNsaWRlclJhbmdlTG93ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtc2xpZGVyLXJhbmdlLXZhbHVlLTInKTtcclxuICAgICAgICB2YXIgc2xpZGVyUmFuZ2VJbnB1dHMgPSBbc2xpZGVyUmFuZ2VVcHBlciwgc2xpZGVyUmFuZ2VMb3dlcl1cclxuXHJcbiAgICAgICAgbm9VaVNsaWRlci5jcmVhdGUoc2xpZGVyUmFuZ2UsIHtcclxuICAgICAgICAgICAgc3RhcnQ6IFsyMCwgODBdLFxyXG4gICAgICAgICAgICBjb25uZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgJ21pbic6IDAsXHJcbiAgICAgICAgICAgICAgICAnbWF4JzogMTAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2xpZGVyUmFuZ2Uubm9VaVNsaWRlci5vbigndXBkYXRlJywgZnVuY3Rpb24oIHZhbHVlcywgaGFuZGxlICkge1xyXG4gICAgICAgICAgICBzbGlkZXJSYW5nZUlucHV0c1toYW5kbGVdLnZhbHVlID0gdmFsdWVzW2hhbmRsZV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhlbWUgZXhhbXBsZXNcclxuICAgIGlmKCQoJy5pbnB1dC1zbGlkZXInKVswXSkge1xyXG4gICAgICAgIHZhciBzbGlkZXJUaGVtZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpbnB1dC1zbGlkZXInKTtcclxuXHJcbiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2xpZGVyVGhlbWVzLmxlbmd0aDsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgbm9VaVNsaWRlci5jcmVhdGUoc2xpZGVyVGhlbWVzW2ldLCB7XHJcbiAgICAgICAgICAgICAgICBzdGFydDogWzIwXSxcclxuICAgICAgICAgICAgICAgIGNvbm5lY3Q6ICdsb3dlcicsXHJcbiAgICAgICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgICAgICAgICdtaW4nOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICdtYXgnOiAxMDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIENvbG9yIHBpY2tlciAoQm9vdHN0cmFwIGNvbG9yIHBpY2tlcilcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgaWYgKCQoJy5jb2xvci1waWNrZXInKVswXSkge1xyXG4gICAgICAgICQoJy5jb2xvci1waWNrZXJfX3ZhbHVlJykuY29sb3JwaWNrZXIoKTtcclxuXHJcbiAgICAgICAgJCgnYm9keScpLm9uKCdjaGFuZ2UnLCAnLmNvbG9yLXBpY2tlcl9fdmFsdWUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmNvbG9yLXBpY2tlcicpLmZpbmQoJy5jb2xvci1waWNrZXJfX3ByZXZpZXcnKS5jc3MoJ2JhY2tncm91bmRDb2xvcicsICQodGhpcykudmFsKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIFdZU0lXWUcgZWRpdG9yIChUcnVtYm93eWcpXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIGlmKCQoJy53eXNpd3lnLWVkaXRvcicpWzBdKSB7XHJcbiAgICAgICAgJCgnLnd5c2l3eWctZWRpdG9yJykudHJ1bWJvd3lnKHtcclxuICAgICAgICAgICAgYXV0b2dyb3c6IHRydWUgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgTGlnaHRib3ggKExpZ2h0R2FsbGVyeSlcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgaWYgKCQoJy5saWdodGJveCcpWzBdKSB7XHJcbiAgICAgICAgJCgnLmxpZ2h0Ym94JykubGlnaHRHYWxsZXJ5KHtcclxuICAgICAgICAgICAgZW5hYmxlVG91Y2g6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBQb3BvdmVycyAoQm9vdHN0cmFwKVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZigkKCdbZGF0YS10b2dnbGU9XCJwb3BvdmVyXCJdJylbMF0pIHtcclxuICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJwb3BvdmVyXCJdJykucG9wb3ZlcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIFRvb2x0aXAgKEJvb3RzdHJhcClcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4gICAgaWYoJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpWzBdKSB7XHJcbiAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBDYWxlbmRhciBXaWRnZXRcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZigkKCcud2lkZ2V0LWNhbGVuZGFyX19ib2R5JylbMF0pIHtcclxuICAgICAgICAkKCcud2lkZ2V0LWNhbGVuZGFyX19ib2R5JykuZnVsbENhbGVuZGFyKHtcclxuICAgICAgICAgICAgY29udGVudEhlaWdodDogJ2F1dG8nLFxyXG4gICAgICAgICAgICB0aGVtZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGJ1dHRvbkljb25zOiB7XHJcbiAgICAgICAgICAgICAgICBwcmV2OiAnIHptZGkgem1kaS1sb25nLWFycm93LWxlZnQnLFxyXG4gICAgICAgICAgICAgICAgbmV4dDogJyB6bWRpIHptZGktbG9uZy1hcnJvdy1yaWdodCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgICAgICAgICByaWdodDogJ25leHQnLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyOiAndGl0bGUsICcsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAncHJldidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmYXVsdERhdGU6ICcyMDE2LTA4LTEyJyxcclxuICAgICAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGV2ZW50czogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRG9sb3IgUGVsbGVudGVzcXVlJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogJzIwMTYtMDgtMDEnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUHVydXMgTmliaCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6ICcyMDE2LTA4LTA3J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0FtZXQgQ29uZGltZW50dW0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAnMjAxNi0wOC0wOSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdUZWxsdXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAnMjAxNi0wOC0xMidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdWZXN0aWJ1bHVtJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogJzIwMTYtMDgtMTgnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnSXBzdW0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAnMjAxNi0wOC0yNCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdGcmluZ2lsbGEgU2l0JyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogJzIwMTYtMDgtMjcnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQW1ldCBQaGFyZXRyYScsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2dvb2dsZS5jb20vJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogJzIwMTYtMDgtMzAnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9EaXNwbGF5IEN1cnJlbnQgRGF0ZSBhcyBDYWxlbmRhciB3aWRnZXQgaGVhZGVyXHJcbiAgICAgICAgdmFyIG1ZZWFyID0gbW9tZW50KCkuZm9ybWF0KCdZWVlZJyk7XHJcbiAgICAgICAgdmFyIG1EYXkgPSBtb21lbnQoKS5mb3JtYXQoJ2RkZGQsIE1NTSBEJyk7XHJcbiAgICAgICAgJCgnLndpZGdldC1jYWxlbmRhcl9feWVhcicpLmh0bWwobVllYXIpO1xyXG4gICAgICAgICQoJy53aWRnZXQtY2FsZW5kYXJfX2RheScpLmh0bWwobURheSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBOb3RlcyBsaW5lIGNsYW1wIChTdWNjaW5jdClcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZigkKCcubm90ZXNfX2JvZHknKVswXSkge1xyXG4gICAgICAgIHZhciBjbGFtcDtcclxuXHJcbiAgICAgICAgJCgnLm5vdGVzX19ib2R5JykuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZigkKHRoaXMpLnByZXYoKS5pcygnLm5vdGVzX190aXRsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFtcCA9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGFtcCA9IDY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRjbGFtcChlbGVtZW50LCB7IGNsYW1wOiBjbGFtcCB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgQ3VzdG9tIFNjcm9sbGJhcnMgKGpRdWVyeS5zY3JvbGxiYXIgYW5kIFNjcm9sbExvY2spXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZigkKCcuc2Nyb2xsYmFyLWlubmVyJylbMF0pIHtcclxuICAgICAgICAkKCcuc2Nyb2xsYmFyLWlubmVyJykuc2Nyb2xsYmFyKCkuc2Nyb2xsTG9jaygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIFRyZWUgdmlldyAtIGpxVHJlZVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIHZhciB0cmVldmlld0RhdGEgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnbm9kZTEnLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdub2RlMV8xJyxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdub2RlMV8xXzEnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ25vZGUxXzFfMicgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnbm9kZTFfMV8zJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ25vZGUxXzInIH0sXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdub2RlMV8zJyB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ25vZGUyJyxcclxuICAgICAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ25vZGUyXzEnIH0sXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdub2RlMl8yJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnbm9kZTJfMycgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdub2RlMycsXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdub2RlM18xJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnbm9kZTNfMicgfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ25vZGUzXzMnIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgdmFyIHRyZWV2aWV3U2ltcGxlRGF0YSA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdub2RlMScsXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdub2RlMV8xJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnbm9kZTFfMicgfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ25vZGUxXzMnIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnbm9kZTInLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnbm9kZTJfMScgfSxcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ25vZGUyXzInIH0sXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdub2RlMl8zJyB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIHZhciB0cmVldmlld0VzY2FwZURhdGEgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbDogJ25vZGUxJyxcclxuICAgICAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJzxhIGhyZWY9XCJleGFtcGxlMS5odG1sXCI+bm9kZTFfMTwvYT4nIH0sXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICc8YSBocmVmPVwiZXhhbXBsZTIuaHRtbFwiPm5vZGUxXzI8L2E+JyB9LFxyXG4gICAgICAgICAgICAgICAgJzxhIGhyZWY9XCJleGFtcGxlMy5odG1sXCI+RXhhbXBsZSA8L2E+J1xyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBpZigkKCcudHJlZXZpZXcnKVswXSkge1xyXG4gICAgICAgICQoJy50cmVldmlldycpLnRyZWUoe1xyXG4gICAgICAgICAgICBkYXRhOiB0cmVldmlld0RhdGEsXHJcbiAgICAgICAgICAgIGNsb3NlZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLXBsdXNcIj48L2k+JyksXHJcbiAgICAgICAgICAgIG9wZW5lZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLW1pbnVzXCI+PC9pPicpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoJCgnLnRyZWV2aWV3LWV4cGFuZGVkJylbMF0pIHtcclxuICAgICAgICAkKCcudHJlZXZpZXctZXhwYW5kZWQnKS50cmVlKHtcclxuICAgICAgICAgICAgZGF0YTogdHJlZXZpZXdTaW1wbGVEYXRhLFxyXG4gICAgICAgICAgICBhdXRvT3BlbjogdHJ1ZSxcclxuICAgICAgICAgICAgY2xvc2VkSWNvbjogJCgnPGkgY2xhc3M9XCJ6bWRpIHptZGktcGx1c1wiPjwvaT4nKSxcclxuICAgICAgICAgICAgb3BlbmVkSWNvbjogJCgnPGkgY2xhc3M9XCJ6bWRpIHptZGktbWludXNcIj48L2k+JylcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZigkKCcudHJlZXZpZXctZHJhZycpWzBdKSB7XHJcbiAgICAgICAgJCgnLnRyZWV2aWV3LWRyYWcnKS50cmVlKHtcclxuICAgICAgICAgICAgZGF0YTogdHJlZXZpZXdTaW1wbGVEYXRhLFxyXG4gICAgICAgICAgICBkcmFnQW5kRHJvcDogdHJ1ZSxcclxuICAgICAgICAgICAgYXV0b09wZW46IHRydWUsXHJcbiAgICAgICAgICAgIGNsb3NlZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLXBsdXNcIj48L2k+JyksXHJcbiAgICAgICAgICAgIG9wZW5lZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLW1pbnVzXCI+PC9pPicpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoJCgnLnRyZWV2aWV3LWRyYWcnKVswXSkge1xyXG4gICAgICAgICQoJy50cmVldmlldy1kcmFnJykudHJlZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IHRyZWV2aWV3U2ltcGxlRGF0YSxcclxuICAgICAgICAgICAgZHJhZ0FuZERyb3A6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9PcGVuOiB0cnVlLFxyXG4gICAgICAgICAgICBjbG9zZWRJY29uOiAkKCc8aSBjbGFzcz1cInptZGkgem1kaS1wbHVzXCI+PC9pPicpLFxyXG4gICAgICAgICAgICBvcGVuZWRJY29uOiAkKCc8aSBjbGFzcz1cInptZGkgem1kaS1taW51c1wiPjwvaT4nKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKCQoJy50cmVldmlldy1lc2NhcGUnKVswXSkge1xyXG4gICAgICAgICQoJy50cmVldmlldy1lc2NhcGUnKS50cmVlKHtcclxuICAgICAgICAgICAgZGF0YTogdHJlZXZpZXdFc2NhcGVEYXRhLFxyXG4gICAgICAgICAgICBhdXRvRXNjYXBlOiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b09wZW46IHRydWUsXHJcbiAgICAgICAgICAgIGNsb3NlZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLXBsdXNcIj48L2k+JyksXHJcbiAgICAgICAgICAgIG9wZW5lZEljb246ICQoJzxpIGNsYXNzPVwiem1kaSB6bWRpLW1pbnVzXCI+PC9pPicpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgUmF0aW5ncyAtIFJhdGVZbyFcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICBpZigkKCcucmF0aW5nJylbMF0pIHtcclxuICAgICAgICAkKCcucmF0aW5nJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByYXRpbmcgPSAkKHRoaXMpLmRhdGEoJ3JhdGluZycpO1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5yYXRlWW8oe1xyXG4gICAgICAgICAgICAgICAgcmF0aW5nOiByYXRpbmcsXHJcbiAgICAgICAgICAgICAgICBub3JtYWxGaWxsOiAncmdiYSgyNTUsMjU1LDI1NSwwLjMpJyxcclxuICAgICAgICAgICAgICAgIHJhdGVkRmlsbDogJyNmZmMxMDcnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIEZvcm0gdGV4dCBjb3VudGVyIC0galF1ZXJ5IFRleHQgQ291bnRlclxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuICAgIGlmKCQoJy50ZXh0LWNvdW50ZXInKVswXSkge1xyXG4gICAgICAgICQoJy50ZXh0LWNvdW50ZXInKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1pbkxlbmd0aCA9ICQodGhpcykuZGF0YSgnbWluLWxlbmd0aCcpIHx8IDA7XHJcbiAgICAgICAgICAgIHZhciBtYXhMZW5ndGggPSAkKHRoaXMpLmRhdGEoJ21heC1sZW5ndGgnKTtcclxuXHJcbiAgICAgICAgICAgICQodGhpcykudGV4dGNvdW50ZXIoe1xyXG4gICAgICAgICAgICAgICAgbWluOiBtaW5MZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBtYXg6IG1heExlbmd0aCxcclxuICAgICAgICAgICAgICAgIGNvdW50RG93bjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGlucHV0RXJyb3JDbGFzczogJ2lzLWludmFsaWQnLFxyXG4gICAgICAgICAgICAgICAgY291bnRlckVycm9yQ2xhc3M6ICd0ZXh0LW9yYW5nZSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0zIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaW5kZXguc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2luZGV4LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxlcnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGdldENsYXNzKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImFsZXJ0LWRhbmdlclwiO1xyXG4gICAgICAgICAgICBjYXNlIFwic3VjY2Vzc1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYWxlcnQtc3VjY2Vzc1wiO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYWxlcnQtcHJpbWFyeVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGRpc21pc3M7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzbWlzcykge1xyXG4gICAgICAgICAgICBkaXNtaXNzID0gKFxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJhbGVydFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPsOXPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCIgY2xhc3NOYW1lPXtgYWxlcnQgJHt0aGlzLmdldENsYXNzKCl9YH0+XHJcbiAgICAgICAgICAgICAgICB7ZGlzbWlzc31cclxuXHJcbiAgICAgICAgICAgICAgICA8c3Bhbj57dGhpcy5wcm9wcy5jaGlsZHJlbn08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICkgICAgICAgIFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBYbXBwTGluayBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgY3JlYXRlWG1wcFVybChhdXRoTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBgeG1wcDoke2F1dGhOYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCBcIl9cIil9YDtcclxuICAgIH1cclxuXHJcbiAgICBBdXRoTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5BdXRoTmFtZSB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKCA8YSBjbGFzcz1cInhtcHBcIiBocmVmPXt0aGlzLmNyZWF0ZVhtcHBVcmwodGhpcy5BdXRoTmFtZSgpKX0+e3RoaXMuQXV0aE5hbWUoKX08L2E+ICkgICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTXVtYmxlTGluayBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgbXVtYmxlTGluaygpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jb21tQ2hhbm5lbClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY29tbUNoYW5uZWwubGlua1RleHQgfHwgXCJDbGljayB0byBKb2luIENvbW1zXCI7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVNdW1ibGVVcmwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29tbUNoYW5uZWwpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvbW1DaGFubmVsLnVybDtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1oZWFkc2V0XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwieG1wcFwiIGhyZWY9e3RoaXMuY3JlYXRlTXVtYmxlVXJsKCl9Pnt0aGlzLm11bWJsZUxpbmsoKX08L2E+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vQWxlcnQnO1xyXG5pbXBvcnQgeyBYbXBwTGluayB9IGZyb20gJy4uL0NvbW1MaW5rcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFubmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGdldFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYmFubmVyID8gdGhpcy5wcm9wcy5iYW5uZXIudHlwZSA6IFwicHJpbWFyeVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEljb25DbGFzcygpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuZ2V0VHlwZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdmYS1jaGVjay1jaXJjbGUnO1xyXG4gICAgICAgICAgICBjYXNlICdkYW5nZXInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdmYS1lbmdpbmUtd2FybmluZyc7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ZhLWluZm8tY2lyY2xlJ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEFsZXJ0IHR5cGUgPSB7IHRoaXMuZ2V0VHlwZSgpIH0gPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJhbGVydFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiIG9uQ2xpY2s9e3RoaXMucHJvcHMuaGlkZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+w5c8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17YGZhcyAke3RoaXMuZ2V0SWNvbkNsYXNzKCl9IGZhLTN4YH0+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZGVyXCI+e3RoaXMucHJvcHMuYmFubmVyLm1lc3NhZ2V9PC9oND5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXdoaXRlXCI+4oCUIDxYbXBwTGluayBBdXRoTmFtZT17dGhpcy5wcm9wcy5iYW5uZXIuY3JlYXRlZEJ5fSAvPiB7dGhpcy5wcm9wcy5iYW5uZXIucG9zdGVkfSBhZ28uPC9ibG9ja3F1b3RlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvQWxlcnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pZCB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRpdGxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpdGxlIHx8IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2l6ZSgpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuc2l6ZSkge1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcImxnXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYG1vZGFsLSR7dGhpcy5wcm9wcy5zaXplfWBcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwieGxcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgbW9kYWwtJHt0aGlzLnByb3BzLnNpemV9YFxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgZGlzbWlzcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXNtaXNzKSB7XHJcbiAgICAgICAgICAgIGRpc21pc3MgPSAoXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+w5c8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbCBmYWRlXCIgaWQ9e3RoaXMuZ2V0SWQoKX0gcm9sZT1cImRpYWxvZ1wiIHRhYmluZGV4PVwiLTFcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbW9kYWwtZGlhbG9nICR7dGhpcy5nZXRTaXplKCl9YH0gcm9sZT1cImRvY3VtZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jb250ZW50XCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cIm1vZGFsLXRpdGxlXCI+e3RoaXMuZ2V0VGl0bGUoKX08L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2Rpc21pc3N9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBUZXh0QXJlYSBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBldmVudC50YXJnZXQudmFsdWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXV0b2NvbXBsZXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmF1dG9jb21wbGV0ZSAmJiAhIXRoaXMucHJvcHMuYXV0b2NvbXBsZXRlKVxyXG4gICAgICAgICAgICByZXR1cm4gXCJvZmZcIjtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmlkIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5uYW1lIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGxhY2Vob2xkZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy52YWx1ZSB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbkVsZW1lbnRDbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jbGFzc092ZXJyaWRlIHx8IFwiZm9ybS1jb250cm9sXCI7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEaXNhYmxlZCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucHJvcHMuZGlzYWJsZWQgPT0gXCJ0cnVlXCIpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUmVhZE9ubHkoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnByb3BzLnJlYWRvbmx5ID09IFwidHJ1ZVwiKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpc1JlcXVpcmVkKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5wcm9wcy5yZXF1aXJlZCA9PSBcInRydWVcIikgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoPHRleHRhcmVhIGlkPXt0aGlzLmdldElkKCl9IGNsYXNzTmFtZT17dGhpcy5nZW5FbGVtZW50Q2xhc3MoKX0gbmFtZT17dGhpcy5nZXROYW1lKCl9IHBsYWNlaG9sZGVyPXt0aGlzLmdldFBsYWNlaG9sZGVyKCl9IGF1dG9jb21wbGV0ZT17dGhpcy5hdXRvY29tcGxldGUoKX0gZGlzYWJsZWQ9e3RoaXMuaXNEaXNhYmxlZCgpfSByZWFkb25seT17dGhpcy5pc1JlYWRPbmx5KCl9IHJlcXVpcmVkPXt0aGlzLmlzUmVxdWlyZWQoKX0gdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfT48L3RleHRhcmVhPilcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdldFZhbHVlKClcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBldmVudC50YXJnZXQudmFsdWUgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhbmRsZUNoYW5nZSlcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBhdXRvY29tcGxldGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b2NvbXBsZXRlICYmICEhdGhpcy5wcm9wcy5hdXRvY29tcGxldGUpXHJcbiAgICAgICAgICAgIHJldHVybiBcIm9mZlwiO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaWQgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXROYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm5hbWUgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGFjZWhvbGRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5wbGFjZWhvbGRlciB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudHlwZSB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnZhbHVlIHx8IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuRWxlbWVudENsYXNzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsYXNzT3ZlcnJpZGUgfHwgXCJmb3JtLWNvbnRyb2xcIjtcclxuICAgIH1cclxuXHJcbiAgICBpc0Rpc2FibGVkKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5wcm9wcy5kaXNhYmxlZCA9PSBcInRydWVcIikgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaXNSZWFkT25seSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucHJvcHMucmVhZG9ubHkgPT0gXCJ0cnVlXCIpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUmVxdWlyZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnByb3BzLnJlcXVpcmVkID09IFwidHJ1ZVwiKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuICg8aW5wdXQgdHlwZT17dGhpcy5nZXRUeXBlKCl9IGlkPXt0aGlzLmdldElkKCl9IGNsYXNzTmFtZT17dGhpcy5nZW5FbGVtZW50Q2xhc3MoKX0gbmFtZT17dGhpcy5nZXROYW1lKCl9IHBsYWNlaG9sZGVyPXt0aGlzLmdldFBsYWNlaG9sZGVyKCl9IHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfSBhdXRvY29tcGxldGU9e3RoaXMuYXV0b2NvbXBsZXRlKCl9IGRpc2FibGVkPXt0aGlzLmlzRGlzYWJsZWQoKX0gcmVhZG9ubHk9e3RoaXMuaXNSZWFkT25seSgpfSByZXF1aXJlZD17dGhpcy5pc1JlcXVpcmVkKCl9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfS8+KVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XHJcbmltcG9ydCB7IFRleHRBcmVhIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xzJztcclxuaW1wb3J0IHsgWG1wcExpbmsgfSBmcm9tICcuLi9Db21tTGlua3MnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhbm5lck1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGdldFR5cGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmJhbm5lcilcclxuICAgICAgICAgICAgcmV0dXJuIHsgY2xhc3NOYW1lOiBcIlwiLCB0eXBlOiBcIlwiIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5iYW5uZXIudHlwZSxcclxuICAgICAgICAgICAgdHlwZTogdGhpcy5wcm9wcy5iYW5uZXIudHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXMucHJvcHMuYmFubmVyLnR5cGUuc2xpY2UoMSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXNzdWVyKCkgeyB0aGlzLnByb3BzLmJhbm5lciA/IHRoaXMucHJvcHMuYmFubmVyLmNyZWF0ZWRCeSA6IG51bGw7IH1cclxuXHJcbiAgICB0aW1lRGlmZigpIHsgcmV0dXJuIHRoaXMucHJvcHMuYmFubmVyID8gdGhpcy5wcm9wcy5iYW5uZXIucG9zdGVkIDogbnVsbDsgfVxyXG5cclxuICAgIGdldE1lc3NhZ2UoKSB7IHJldHVybiB0aGlzLnByb3BzLmJhbm5lciA/IHRoaXMucHJvcHMuYmFubmVyLm1lc3NhZ2UgOiBudWxsOyB9XHJcblxyXG4gICAgZGVsZXRlQW5ub3VuY2VtZW50KCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vJHt0aGlzLnByb3BzLmJhbm5lci5pZH1gXHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICQoXCIubW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy51KCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9Nb2RhbCAoQW5ub3VuY2VtZW50KV0gQGRlbGV0ZUFubm91bmNlbWVudCAtIEVycm9yIGRlbGV0aW5nIGFubm91bmNtZW50YCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVBbm5vdW5jZW1lbnQoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX1gLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBlLnRhcmdldFswXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGUudGFyZ2V0WzFdLnZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgJChcIi5tb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L01vZGFsIChBbm5vdW5jZW1lbnQpXSBAY3JlYXRlQW5ub3VuY2VtZW50IC0gRXJyb3IgY3JlYXRpbmcgYSBuZXcgYW5ub3VuY21lbnRgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBtb2RhbGNvbnRlbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYmFubmVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW9kYWxjb250ZW50ID0gKFxyXG4gICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuY3JlYXRlQW5ub3VuY2VtZW50LmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIkFubm91bmNtZW50VHlwZVwiPkFubm91bmNlbWVudCBUeXBlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgbmFtZT1cInR5cGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwcmltYXJ5XCI+SW5mb3JtYXRpb24gKEJsdWUpPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGFuZ2VyXCI+SW1wb3J0YW50IChSZWQpPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic3VjY2Vzc1wiPkdyZWVuPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRBcmVhIG5hbWU9XCJtZXNzYWdlXCIgcmVxdWlyZWQ9XCJ0cnVlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3NcIiB0eXBlPVwic3VibWl0XCI+RGlzcGxheSBBbm5vdW5jZW1lbnQgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWNoZWNrLWNpcmNsZVwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1vZGFsY29udGVudCA9IChcclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT17YGZvbnQtd2VpZ2h0LWJvbGRlciB0ZXh0LSR7dGhpcy5nZXRUeXBlKCkuY2xhc3NOYW1lfWB9ID5Bbm5vdW5jbWVudCBUeXBlOiB7dGhpcy5nZXRUeXBlKCkudHlwZX08L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9XCJmb250LXdlaWdodCdib2xkIHBiLTNcIj5Jc3N1ZWQgYnkgPFhtcHBMaW5rIEF1dGhOYW1lPXt0aGlzLmdldElzc3VlcigpfSAvPiB7dGhpcy50aW1lRGlmZigpfSBhZ28uPC9oNT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicGItNFwiPnt0aGlzLmdldE1lc3NhZ2UoKX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhbmdlclwiIG9uQ2xpY2s9e3RoaXMuZGVsZXRlQW5ub3VuY2VtZW50LmJpbmQodGhpcyl9PlJlbW92ZSBBbm5vdW5jZW1lbnQgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRpbWVzLWNpcmNsZVwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPE1vZGFsIGlkPVwiYW5ub3VuY21lbnRCYW5uZXJzTW9kYWxcIiB0aXRsZT1cIkFubm91bmNlbWVudHNcIiBkaXNtaXNzPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAge21vZGFsY29udGVudH1cclxuICAgICAgICAgICAgPC9Nb2RhbD5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuaW1wb3J0IEJhbm5lciBmcm9tICcuL0NvbXBvbmVudHMvQW5ub3VuY21lbnQvQmFubmVyJztcclxuaW1wb3J0IE1vZGFsIGZyb20gJy4vQ29tcG9uZW50cy9Bbm5vdW5jbWVudC9Nb2RhbCc7XHJcblxyXG5jb25zdCBiYXNlVXJpID0gXCIvYXBpL3YxL2Fubm91bmNlbWVudHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFubm91bmNlbWVudEJhbm5lciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0geyBiYW5uZXI6IG51bGwsIGRpc3BsYXk6IGZhbHNlIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmdldEFubm91bmNlbWVudCgpO1xyXG5cclxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmdldEFubm91bmNlbWVudCgpLCAxMDAwICogMzApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFubm91bmNlbWVudCgpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBiYXNlVXJpXHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSwgdGV4dFN0YXR1cywgeGhyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgYmFubmVyOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogeGhyLnN0YXR1cyA9PSAyMDAgPyB0cnVlIDogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5OiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0Fubm91bmNlbWVudF0gQGdldEFubm91bmNlbWVudCAtIEVycm9yIHJldHJpZXZpbmcgdGhlIGxhdGVzdCBhbm5vdW5jbWVudGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9LyR7dGhpcy5zdGF0ZS5iYW5uZXIuaWR9L2hpZGVgXHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9Bbm5vdW5jZW1lbnRdIEBoaWRlIC0gRXJyb3IgaGlkaW5nIHRoZSBhbm5vdW5jbWVudGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBiYW5uZXI7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmFubmVyICYmIHRoaXMuc3RhdGUuZGlzcGxheSkge1xyXG4gICAgICAgICAgICBiYW5uZXIgPSAoXHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxCYW5uZXIgYmFubmVyPXt0aGlzLnN0YXRlLmJhbm5lcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVyaT17YmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZT17dGhpcy5oaWRlLmJpbmQodGhpcyl9IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKSAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICB7YmFubmVyfVxyXG5cclxuICAgICAgICAgICAgICAgIDxNb2RhbCBiYW5uZXI9e3RoaXMuc3RhdGUuYmFubmVyfVxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e2Jhc2VVcml9XHJcbiAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5nZXRBbm5vdW5jZW1lbnQuYmluZCh0aGlzKX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbm5vdW5jZW1lbnRCYW5uZXInKSlcclxuICAgIHJlbmRlcig8QW5ub3VuY2VtZW50QmFubmVyIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW5ub3VuY2VtZW50QmFubmVyJykpOyIsImV4cG9ydCBmdW5jdGlvbiBEYXRlRm9ybWF0KHN0cmluZykge1xyXG5cclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoc3RyaW5nKVxyXG4gICAgbGV0IGRheXMgPSBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVyXCIsIFwiRnJpXCIsIFwiU3VuXCJdO1xyXG4gICAgbGV0IG1vbnRocyA9IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdXHJcblxyXG4gICAgcmV0dXJuIGAke2RheXNbZGF0ZS5nZXREYXkoKV19ICR7ZGF0ZS5nZXREYXRlKCl9ICR7bW9udGhzW2RhdGUuZ2V0TW9udGgoKV19LCAke2RhdGUuZ2V0RnVsbFllYXIoKX1gO1xyXG59XHJcblxyXG4vLyBUYWtlcyBpbiBhbiBhdXRoIG5hbWUgYW5kIGFuIGFycmF5IG9mIHBpbG90cywgcmV0dXJucyB0aGUgcGlsb3QgdGhhdCBtYXRjaGVzIHRoZSBhdXRoIG5hbWUgfHwgdGhlIGZpcnN0IHBpbG90XHJcbmV4cG9ydCBmdW5jdGlvbiBBY2NvdW50UGlsb3QoYXV0aF9uYW1lLCBwaWxvdHNBcnJheSkge1xyXG5cclxuICAgIC8vIFBpbG90cyBBcnJheSB3YXMgbm90IGFuIGFycmF5LCBwYXNzIGEgZGVmYXVsdCBvYmplY3QgYmFja1xyXG4gICAgaWYgKCFwaWxvdHNBcnJheSBpbnN0YW5jZW9mIEFycmF5IHx8IHBpbG90c0FycmF5IGluc3RhbmNlb2YgQXJyYXkgJiYgcGlsb3RzQXJyYXkubGVuZ3RoID09IDApXHJcbiAgICAgICAgcmV0dXJuIHsgaWQ6IDAsIG5hbWU6IFwiXCIsIGNvcnBvcmF0aW9uOiB7IGlkOiAwLCBuYW1lOiBcIlwiIH0sIGFsbGlhbmNlOiB7IGlkOiAwLCBuYW1lOiBcIlwifX1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpbG90c0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHBpbG90c0FycmF5W2ldLm5hbWUudG9Mb3dlckNhc2UoKSA9PSBhdXRoX25hbWUudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHBpbG90c0FycmF5W2ldO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vIG1hdGNoIGZvdW5kXHJcbiAgICByZXR1cm4gcGlsb3RzQXJyYXlbMF07XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBY2NvdW50UGlsb3QgfSBmcm9tICcuLi8uLi9IZWxwZXJzJztcclxuaW1wb3J0IHsgWG1wcExpbmsgfSBmcm9tICcuLi9Db21tTGlua3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aXZlQmFucyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZXZva2UoYmFuSWQpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZGVsZXRlJyxcclxuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9LyR7YmFuSWR9YFxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0FjdGl2ZUJhbnNdIEByZXZva2UgLSBFcnJvciByZXZva2luZyBiYW4gKGJhbiBJZDogJHtiYW5JZH0pYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBiYW5zO1xyXG4gICAgICAgIGlmICghIXRoaXMucHJvcHMuYmFucykge1xyXG4gICAgICAgICAgICBiYW5zID0gdGhpcy5wcm9wcy5iYW5zLm1hcCgoYmFuLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxCYW5Sb3cgYmFuPXtiYW59IHJldm9rZUJhbj17dGhpcy5yZXZva2UuYmluZCh0aGlzLCBiYW4uaWQpfSBzZXRJbmRleD17dGhpcy5wcm9wcy5zZXRJbmRleC5iaW5kKHRoaXMsIGluZGV4KX0gYWRtaW49e3RoaXMucHJvcHMuYWRtaW59IC8+XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmxlIHRhYmxlLXJlc3BvbnNpdmVcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiZm9udC1hbHBoYVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWRtaW48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIHtiYW5zfVxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCYW5Sb3cgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLy9QZXJtYW5hbnQgb3IgdGVtcG9yYXJ5XHJcbiAgICBnZXRCYW5UeXBlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5iYW4uZXhwaXJlc0F0KVxyXG4gICAgICAgICAgICByZXR1cm4gPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1kYW5nZXJcIj5QZXJtYW5hbnQgQmFuPC9zcGFuPjtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtd2hpdGVcIj5UZW1wb3JhcnkgQmFuPC9zcGFuPlxyXG4gICAgfVxyXG5cclxuICAgIGdldEJhbklkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmJhbi5pZCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTmFtZSBvZiB0aGUgYmFubmVkIGFjY291bnRcclxuICAgIGdldEJhbmVlTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5iYW4uYmFubmVkQWNjb3VudC5uYW1lIHx8IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy9OYW1lIG9mIHRoZSBsYXN0IGFkbWluIHdobyBpc3N1ZWQgYSBiYW5cclxuICAgIGdldEFkbWluTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5iYW4uYmFuQWRtaW4ubmFtZSB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBpbG90VXJsKCkge1xyXG4gICAgICAgIGxldCBwaWxvdF9pZCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYmFuICYmIHRoaXMucHJvcHMuYmFuLmJhbm5lZEFjY291bnQucGlsb3RzKVxyXG4gICAgICAgICAgICBwaWxvdF9pZCA9IEFjY291bnRQaWxvdCh0aGlzLnByb3BzLmJhbi5iYW5uZWRBY2NvdW50Lm5hbWUsIHRoaXMucHJvcHMuYmFuLmJhbm5lZEFjY291bnQucGlsb3RzKS5pZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGBodHRwczovL2ltYWdlc2VydmVyLmV2ZW9ubGluZS5jb20vQ2hhcmFjdGVyLyR7cGlsb3RfaWR9XzMyLmpwZ2A7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBidG5fcmV2b2tlO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFkbWluKSB7XHJcbiAgICAgICAgICAgIGJ0bl9yZXZva2UgPSA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4td2wgYnRuLXN1Y2Nlc3MgYnRuLXNtXCIgb25DbGljaz17dGhpcy5wcm9wcy5yZXZva2VCYW59PlJldm9rZSBCYW4gPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWdhdmVsXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRkPjxpbWcgY2xhc3NOYW1lPVwiaW1nIGQtYmxvY2sgbXgtYXV0b1wiIHNyYz17dGhpcy5nZXRQaWxvdFVybCgpfSBhbHQ9XCJQaWxvdCdzIEF2YXRhclwiIC8+PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD48WG1wcExpbmsgQXV0aE5hbWU9e3RoaXMuZ2V0QmFuZWVOYW1lKCl9IC8+PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD48WG1wcExpbmsgQXV0aE5hbWU9e3RoaXMuZ2V0QWRtaW5OYW1lKCl9IC8+PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5nZXRCYW5UeXBlKCl9PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD57YnRuX3Jldm9rZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi13bCBidG4tZGFyayBidG4tc21cIiBvbkNsaWNrPXt0aGlzLnByb3BzLnNldEluZGV4fT48aSBjbGFzc05hbWU9XCJmYXMgZmEtY2hldnJvbi1kb3VibGUtcmlnaHRcIj48L2k+PC9idXR0b24+PC90ZD5cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVGV4dEFyZWEsIElucHV0IH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xzJ1xyXG5pbXBvcnQgeyBEYXRlRm9ybWF0LCBBY2NvdW50UGlsb3QgfSBmcm9tICcuLi8uLi9IZWxwZXJzJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYW5JbmZvIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8vIFRoZSBuZXh0IHRocmVlIG1ldGhvZHMgYXJlIG5lZWRlZCB0byBtYWtlIGF1dG9jb21wbGV0ZSB3b3JrIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjb250cm9sbGVkIGJ5IGEga2V5XHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7IHRoaXMuY29uZmlndXJlQXV0b2NvbXBsZXRlKCkgfVxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7IHRoaXMuY29uZmlndXJlQXV0b2NvbXBsZXRlKCkgfVxyXG5cclxuICAgIGNvbmZpZ3VyZUF1dG9jb21wbGV0ZSgpIHtcclxuICAgICAgICAkKFwiI2xvb2t1cF9hY2NvdW50XCIpLmF1dG9jb21wbGV0ZSh7XHJcbiAgICAgICAgICAgIHNvdXJjZTogKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogYC9zZWFyY2g/cT0ke3JlcXVlc3QudGVybX0mZmlsdGVyPWFjY291bnRgLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWluTGVuZ3RoOiAzLFxyXG4gICAgICAgICAgICBkZWxheTogNTAwXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpbnB1dE5ld0JhbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zZWxlY3RlZEJhbiA9PSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBpbG90VXJsKCkge1xyXG4gICAgICAgIGxldCBwaWxvdF9pZCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0ZWRCYW4gJiYgdGhpcy5wcm9wcy5zZWxlY3RlZEJhbi5iYW5uZWRBY2NvdW50LnBpbG90c1swXSlcclxuICAgICAgICAgICAgcGlsb3RfaWQgPSBBY2NvdW50UGlsb3QodGhpcy5wcm9wcy5zZWxlY3RlZEJhbi5iYW5uZWRBY2NvdW50Lm5hbWUsIHRoaXMucHJvcHMuc2VsZWN0ZWRCYW4uYmFubmVkQWNjb3VudC5waWxvdHMpLmlkO1xyXG5cclxuICAgICAgICByZXR1cm4gYGh0dHBzOi8vaW1hZ2VzZXJ2ZXIuZXZlb25saW5lLmNvbS9DaGFyYWN0ZXIvJHtwaWxvdF9pZH1fMTI4LmpwZ2A7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3QmFuKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxyXG4gICAgICAgICAgICB1cmw6IHRoaXMucHJvcHMuYmFzZVVyaSxcclxuICAgICAgICAgICAgZGF0YTogJChcIiNiYW5Gb3JtXCIpLnNlcmlhbGl6ZSgpXHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0JhbkluZm9dIEBuZXdCYW4gLSBFcnJvciBjcmVhdGluZyBhIGJhbmAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUJhbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vJHt0aGlzLnByb3BzLnNlbGVjdGVkQmFuLmlkfWAsXHJcbiAgICAgICAgICAgIGRhdGE6ICQoXCIjYmFuRm9ybVwiKS5zZXJpYWxpemUoKVxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy51KCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9CYW5JbmZvXSBAdXBkYXRlQmFuIC0gRXJyb3IgdXBkYXRpbmcgYmFuIChiYW4gSWQ6ICR7dGhpcy5wcm9wcy5zZWxlY3RlZEJhbi5pZH0pYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICBcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgYmFuSXNzdWVkQXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlucHV0TmV3QmFuKCkpIHtcclxuICAgICAgICAgICAgYmFuSXNzdWVkQXQgPSAoXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNyZWF0ZWRBdFwiPkJhbiBpc3N1ZWQ6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJjcmVhdGVkQXRcIiB0eXBlPVwidGV4dFwiIHZhbHVlPXtEYXRlRm9ybWF0KHRoaXMucHJvcHMuc2VsZWN0ZWRCYW4uY3JlYXRlZEF0KX0gZGlzYWJsZWQ9XCJ0cnVlXCIga2V5PXt0aGlzLnByb3BzLnNlbGVjdGVkQmFuLmlkfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlc2V0IGJ1dHRvbnNcclxuICAgICAgICBsZXQgcmVzZXRfYnRuID0ge307XHJcbiAgICAgICAgaWYgKCF0aGlzLmlucHV0TmV3QmFuKCkpIHtcclxuICAgICAgICAgICAgcmVzZXRfYnRuLmxhcmdlID0gPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhcmsgZmxvYXQtbGVmdFwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXt0aGlzLnByb3BzLnNldEluZGV4LmJpbmQodGhpcywgbnVsbCl9PkJhY2sgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXVuZG8tYWx0XCI+PC9pPjwvYnV0dG9uPjtcclxuICAgICAgICAgICAgcmVzZXRfYnRuLnNtYWxsID0gPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRpbWVzLWNpcmNsZSBmbG9hdC1yaWdodCBtci0zIGktYnRuXCIgb25DbGljaz17dGhpcy5wcm9wcy5zZXRJbmRleC5iaW5kKHRoaXMsIG51bGwpfT48L2k+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYnV0dG9uO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFkbWluICYmIHRoaXMuaW5wdXROZXdCYW4oKSkge1xyXG4gICAgICAgICAgICBidXR0b24gPSA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyIGZsb2F0LXJpZ2h0XCIgdHlwZT1cInN1Ym1pdFwiPkJhbiBVc2VyIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1nYXZlbFwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICB9IGVsc2UgaWYodGhpcy5wcm9wcy5hZG1pbikge1xyXG4gICAgICAgICAgICBidXR0b24gPSA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyIGZsb2F0LXJpZ2h0XCIgdHlwZT1cInN1Ym1pdFwiPlVwZGF0ZSBCYW4gPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWdhdmVsXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1ib2R5IHB5LTRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7cmVzZXRfYnRuLnNtYWxsfVxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwicm91bmRlZC1jaXJjbGUgZC1ibG9jayBteC1hdXRvXCIgc3JjPXt0aGlzLmdldFBpbG90VXJsKCl9IGFsdD1cIlBpbG90J3MgQXZhdGFyXCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9XCJiYW5Gb3JtXCIgb25TdWJtaXQ9e3RoaXMuaW5wdXROZXdCYW4oKSA/IHRoaXMubmV3QmFuLmJpbmQodGhpcykgOiB0aGlzLnVwZGF0ZUJhbi5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIiNsb29rdXBfYWNjb3VudFwiPkdTRiBBdXRoIE5hbWU6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cImxvb2t1cF9hY2NvdW50XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NPdmVycmlkZT1cImZvcm0tY29udHJvbCBhY2NvdW50X2xvb2t1cFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImFjY291bnROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5zZWxlY3RlZEJhbiA/IHRoaXMucHJvcHMuc2VsZWN0ZWRCYW4uYmFubmVkQWNjb3VudC5uYW1lIDogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5zZWxlY3RlZEJhbiA/IFwidHJ1ZVwiIDogXCJmYWxzZVwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5zZWxlY3RlZEJhbiA/IHRoaXMucHJvcHMuc2VsZWN0ZWRCYW4uaWQgOiAwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7YmFuSXNzdWVkQXR9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiYmFuRXhwaXJlc1wiPkJhbiBFeHBpcmVzOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImJhbkV4cGlyZXNcIiBkaXNhYmxlZD1cInRydWVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5CYW5zIGV4cGlyZSBhdCBkb3dudGltZSwgbGVhdmUgYmxhbmsgZm9yIHBlcm1hbmFudDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImJhblJlYXNvblwiPlJlYXNvbjo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRBcmVhIGlkPVwiYmFuUmVhc29uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYmFuUmVhc29uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5zZWxlY3RlZEJhbiA/IHRoaXMucHJvcHMuc2VsZWN0ZWRCYW4ucmVhc29uIDogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RoaXMucHJvcHMuc2VsZWN0ZWRCYW4gPyB0aGlzLnByb3BzLnNlbGVjdGVkQmFuLmlkIDogMH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZD1cInRydWVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5Pbmx5IHZpc2libGUgdG8gdGhlIEZDIHRlYW08L3NtYWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNldF9idG4ubGFyZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtidXR0b259XHJcbiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBBY3RpdmVCYW5zIGZyb20gJy4vQ29tcG9uZW50cy9CYW5NYW5hZ2VtZW50L0FjdGl2ZUJhbnMnO1xyXG5pbXBvcnQgQmFuSW5mbyBmcm9tICcuL0NvbXBvbmVudHMvQmFuTWFuYWdlbWVudC9CYW5JbmZvJztcclxuXHJcbmNvbnN0IGJhc2VVcmkgPSBcIi9hZG1pbi9iYW5zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYW5NYW5hZ2VtZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBiYW5zOiBudWxsLFxyXG4gICAgICAgICAgICBhZG1pbjogZmFsc2UsXHJcbiAgICAgICAgICAgIGJhbkluZGV4OiBudWxsLFxyXG4gICAgICAgICAgICBrZXk6IDBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHtiYXNlVXJpfS9hY3RpdmVgLFxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBiYW5zOiBkYXRhLmJhbnMsXHJcbiAgICAgICAgICAgICAgICBhZG1pbjogZGF0YS5hZG1pbixcclxuICAgICAgICAgICAgICAgIGJhbkluZGV4OiBudWxsLFxyXG4gICAgICAgICAgICAgICAga2V5OiB0aGlzLnN0YXRlLmtleSArIDFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9CYW5zXSBAZ2V0RGF0YSAtIEVycm9yIHJldHJpZXZpbmcgYWN0aXZlIGJhbnNgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdGVkQmFuKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJhbnMgJiYgdGhpcy5zdGF0ZS5iYW5zW3RoaXMuc3RhdGUuYmFuSW5kZXhdKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5iYW5zW3RoaXMuc3RhdGUuYmFuSW5kZXhdO1xyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc2V0QmFuSW5kZXgoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgYmFuSW5kZXg6IGluZGV4fSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTggY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBY3RpdmVCYW5zIGJhbnM9e3RoaXMuc3RhdGUuYmFuc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW5kZXg9e3RoaXMuc2V0QmFuSW5kZXguYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluPXt0aGlzLnN0YXRlLmFkbWlufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVyaT17YmFzZVVyaX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJhbkluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRCYW49e3RoaXMuc2VsZWN0ZWRCYW4oKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEluZGV4PXt0aGlzLnNldEJhbkluZGV4LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZG1pbj17dGhpcy5zdGF0ZS5hZG1pbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e2Jhc2VVcml9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RoaXMuc3RhdGUua2V5fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFucycpKVxyXG4gICAgcmVuZGVyKDxCYW5NYW5hZ2VtZW50IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFucycpKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuY29uc3QgYmFzZVVyaSA9IFwiL2FwaS92MS91aS9cIlxyXG5cclxuZXhwb3J0IGNsYXNzIFBpbG90IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBhcGlDYWxsKGlkKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAvYXBpL2VzaS11aS9zaG93LWluZm9gLFxyXG4gICAgICAgICAgICBkYXRhOiB7IHRhcmdldF9pZDogaWQgfVxyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9Fc2lVaSB7UGlsb3RAYXBpQ2FsbH0gLSBFcnJvciByZXF1ZXN0aW5nIEVTSSBVSSBTaG93aW5mb2AsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pICBcclxuICAgIH1cclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5waWxvdClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucGlsb3QuY2hhcmFjdGVySUQgfHwgdGhpcy5wcm9wcy5waWxvdC5pZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5waWxvdClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucGlsb3QuY2hhcmFjdGVyTmFtZSB8fCB0aGlzLnByb3BzLnBpbG90Lm5hbWU7XHJcblxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgdGFyZ2V0X2lkXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoPGEgb25DbGljaz17dGhpcy5hcGlDYWxsLmJpbmQodGhpcywgdGhpcy5nZXRJZCgpKX0+e3RoaXMuZ2V0TmFtZSgpfTwvYT4pXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb3Jwb3JhdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgYXBpQ2FsbChpZCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgL2FwaS9lc2ktdWkvc2hvdy1pbmZvYCxcclxuICAgICAgICAgICAgZGF0YTogeyB0YXJnZXRfaWQ6IGlkIH1cclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgUmVhY3QvRXNpVWkge0NvcnBvcmF0aW9uQGFwaUNhbGx9IC0gRXJyb3IgcmVxdWVzdGluZyBFU0kgVUkgU2hvd2luZm9gLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KSAgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29ycG9yYXRpb24pXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvcnBvcmF0aW9uLmlkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROYW1lKCkge1xyXG4gICAgICAgIGlmKHRoaXMucHJvcHMuY29ycG9yYXRpb24pXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvcnBvcmF0aW9uLm5hbWU7XHJcblxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKDxhIG9uQ2xpY2s9e3RoaXMuYXBpQ2FsbC5iaW5kKHRoaXMsIHRoaXMuZ2V0SWQoKSl9Pnt0aGlzLmdldE5hbWUoKX08L2E+KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWxsaWFuY2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGFwaUNhbGwoaWQpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogYC9hcGkvZXNpLXVpL3Nob3ctaW5mb2AsXHJcbiAgICAgICAgICAgIGRhdGE6IHsgdGFyZ2V0X2lkOiBpZCB9XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0VzaVVpIHtBbGxpYW5jZUBhcGlDYWxsfSAtIEVycm9yIHJlcXVlc3RpbmcgRVNJIFVJIFNob3dpbmZvYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSkgIFxyXG4gICAgfVxyXG5cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFsbGlhbmNlKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hbGxpYW5jZS5pZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5hbWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYWxsaWFuY2UpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmFsbGlhbmNlLm5hbWU7XHJcblxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKDxhIG9uQ2xpY2s9e3RoaXMuYXBpQ2FsbC5iaW5kKHRoaXMsIHRoaXMuZ2V0SWQoKSl9Pnt0aGlzLmdldE5hbWUoKX08L2E+KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGVzdGluYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGFwaUNhbGwoaWQpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogYC9hcGkvZXNpLXVpL2Rlc3RpbmF0aW9uYCxcclxuICAgICAgICAgICAgZGF0YTogeyB0YXJnZXRfaWQ6IGlkIH1cclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgUmVhY3QvRXNpVWkge0Rlc3RpbmF0aW9uQGFwaUNhbGx9IC0gRXJyb3IgcmVxdWVzdGluZyBFU0kgVUkgU2V0IERlc3RpbmF0aW9uYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSkgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnByb3BzLnN5c3RlbSkgPyB0aGlzLnByb3BzLnN5c3RlbS5pZCA6IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucHJvcHMuc3lzdGVtKSA/IHRoaXMucHJvcHMuc3lzdGVtLm5hbWUgOiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKDxhIG9uQ2xpY2s9e3RoaXMuYXBpQ2FsbC5iaW5kKHRoaXMsIHRoaXMuZ2V0SWQoKSl9Pnt0aGlzLmdldE5hbWUoKX08L2E+KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWFya2V0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBhcGlDYWxsKGlkKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgKDUwMSkgT3BlbiBtYXJrZXQgaXRlbTogJHtpZH1gKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pdGVtLmlkIHx8IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXRlbS5uYW1lIHx8IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoPGEgb25DbGljaz17dGhpcy5hcGlDYWxsLmJpbmQodGhpcywgdGhpcy5nZXRJZCgpKX0+e3RoaXMuZ2V0TmFtZSgpfTwvYT4pXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBY2NvdW50UGlsb3QgfSBmcm9tICcuLi8uLi9IZWxwZXJzJztcclxuaW1wb3J0IHsgWG1wcExpbmsgfSBmcm9tICcuLi9Db21tTGlua3MnO1xyXG5pbXBvcnQgeyBDb3Jwb3JhdGlvbiwgQWxsaWFuY2UgfSBmcm9tICcuLi9Fc2lVaSc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BlY2lhbFVzZXJzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgdXNlcnM7XHJcbiAgICAgICAgaWYgKCEhdGhpcy5wcm9wcy51c2Vycykge1xyXG4gICAgICAgICAgICB1c2VycyA9IHRoaXMucHJvcHMudXNlcnMubWFwKCh1c2VyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxVc2VyUm93IHVzZXI9e3VzZXJ9IHNldEluZGV4PXt0aGlzLnByb3BzLnNldEluZGV4LmJpbmQodGhpcywgaW5kZXgpfSAvPlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJsZSB0YWJsZS1yZXNwb25zaXZlXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImZvbnQtYWxwaGFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkNvcnBvcmF0aW9uPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFsbGlhbmNlPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJvbGVzPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAge3VzZXJzfVxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VyUm93IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGdldENvcnBvcmF0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnVzZXIgJiYgdGhpcy5wcm9wcy51c2VyLnBpbG90cylcclxuICAgICAgICAgICAgcmV0dXJuIEFjY291bnRQaWxvdCh0aGlzLnByb3BzLnVzZXIubmFtZSwgdGhpcy5wcm9wcy51c2VyLnBpbG90cykuY29ycG9yYXRpb247XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBbGxpYW5jZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy51c2VyICYmIHRoaXMucHJvcHMudXNlci5waWxvdHMpXHJcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50UGlsb3QodGhpcy5wcm9wcy51c2VyLm5hbWUsIHRoaXMucHJvcHMudXNlci5waWxvdHMpLmFsbGlhbmNlO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTmFtZSBvZiB0aGUgRkNzIEdJQ0UgYWNjb3VudFxyXG4gICAgZ2V0QWNjb3VudE5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudXNlci5uYW1lIHx8IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUGlsb3QgaW1hZ2UgdXJsXHJcbiAgICBnZXRQaWxvdFVybCgpIHtcclxuICAgICAgICBsZXQgcGlsb3RfaWQgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnVzZXIpXHJcbiAgICAgICAgICAgIHBpbG90X2lkID0gQWNjb3VudFBpbG90KHRoaXMucHJvcHMudXNlci5uYW1lLCB0aGlzLnByb3BzLnVzZXIucGlsb3RzKS5pZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGBodHRwczovL2ltYWdlc2VydmVyLmV2ZW9ubGluZS5jb20vQ2hhcmFjdGVyLyR7cGlsb3RfaWR9XzMyLmpwZ2A7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCByb2xlcztcclxuICAgICAgICBpZiAoISF0aGlzLnByb3BzLnVzZXIucm9sZXMpIHtcclxuICAgICAgICAgICAgcm9sZXMgPSB0aGlzLnByb3BzLnVzZXIucm9sZXMubWFwKChyb2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPHAgY2xhc3NOYW1lPVwibS0wXCI+e3JvbGUubmFtZX08L3A+O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgIDx0ZD48aW1nIGNsYXNzTmFtZT1cImltZyBkLWJsb2NrIG14LWF1dG9cIiBzcmM9e3RoaXMuZ2V0UGlsb3RVcmwoKX0gYWx0PVwiUGlsb3QncyBBdmF0YXJcIiAvPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+PFhtcHBMaW5rIEF1dGhOYW1lPXt0aGlzLmdldEFjY291bnROYW1lKCl9IC8+PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD48Q29ycG9yYXRpb24gY29ycG9yYXRpb249e3RoaXMuZ2V0Q29ycG9yYXRpb24oKX0gLz48L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPjxBbGxpYW5jZSBhbGxpYW5jZT17dGhpcy5nZXRBbGxpYW5jZSgpfSAvPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+e3JvbGVzfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+PGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXdsIGJ0bi1kYXJrIGJ0bi1zbVwiIG9uQ2xpY2s9e3RoaXMucHJvcHMuc2V0SW5kZXguYmluZCh0aGlzLCB0aGlzLnByb3BzLmluZGV4KX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWNoZXZyb24tZG91YmxlLXJpZ2h0XCI+PC9pPjwvYnV0dG9uPjwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IFBpbG90IH0gZnJvbSAnLi4vRXNpVWknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudFBpbG90cyBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBwaWxvdHM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGlsb3RzKSB7XHJcbiAgICAgICAgICAgIHBpbG90cyA9IHRoaXMucHJvcHMucGlsb3RzLm1hcCgocGlsb3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNiBjb2wtc20tMTIgcGItM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImZsb2F0LWxlZnQgcHItM1wiIHNyYz17YGh0dHBzOi8vaW1hZ2VzZXJ2ZXIuZXZlb25saW5lLmNvbS9DaGFyYWN0ZXIvJHtwaWxvdC5pZH1fMzIuanBnYH0gYWx0PVwiUGlsb3QgQXZhdGFyXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFBpbG90IHBpbG90PXtwaWxvdH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGg0PlBpbG90czwvaDQ+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHtwaWxvdHN9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvbGVzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbW92ZVJvbGUoaSkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vcmV2b2tlYCxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgcm9sZUlkOiBpLFxyXG4gICAgICAgICAgICAgICAgYWNjb3VudElkOiB0aGlzLnByb3BzLnVzZXIuaWQgfHwgbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZG9uZSgocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMucHJvcHMudXNlckluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXRJbmRleChpbmRleCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9Sb2xlc10gQHJlbW92ZVJvbGUgLSBFcnJvciByZXZva2luZyByb2xlOmAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgaW5fcm9sZXM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudXNlcikge1xyXG4gICAgICAgICAgICBpbl9yb2xlcyA9IHRoaXMucHJvcHMudXNlci5yb2xlcy5tYXAoKHJvbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9XCJiYWRnZSByb2xlXCI+e3JvbGUubmFtZX3CoDxpIGNsYXNzTmFtZT1cImZhcyBmYS10aW1lcyBtbC0yXCIgb25DbGljaz17dGhpcy5yZW1vdmVSb2xlLmJpbmQodGhpcywgcm9sZS5pZCl9PjwvaT48L3NwYW4+XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJkLWlubGluZS1ibG9jayBwYi0yXCI+Um9sZXM8L2g0PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkLWJsb2NrXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2luX3JvbGVzfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xzJztcclxuaW1wb3J0IEFjY291bnRQaWxvdHMgZnJvbSAnLi9BY2NvdW50UGlsb3RzJztcclxuaW1wb3J0IFJvbGVzIGZyb20gJy4vUm9sZXMnO1xyXG5pbXBvcnQgeyBEYXRlRm9ybWF0LCBBY2NvdW50UGlsb3QgfSBmcm9tICcuLi8uLi9IZWxwZXJzJztcclxuaW1wb3J0IHsgQ29ycG9yYXRpb24sIEFsbGlhbmNlIH0gZnJvbSAnLi4vRXNpVWknO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8vIFRoZSBuZXh0IHRocmVlIG1ldGhvZHMgYXJlIG5lZWRlZCB0byBtYWtlIGF1dG9jb21wbGV0ZSB3b3JrIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjb250cm9sbGVkIGJ5IGEga2V5XHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7IHRoaXMuY29uZmlndXJlQXV0b2NvbXBsZXRlKCkgfVxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7IHRoaXMuY29uZmlndXJlQXV0b2NvbXBsZXRlKCkgfVxyXG5cclxuICAgIGNvbmZpZ3VyZUF1dG9jb21wbGV0ZSgpIHtcclxuICAgICAgICAkKFwiI2xvb2t1cF9hY2NvdW50XCIpLmF1dG9jb21wbGV0ZSh7XHJcbiAgICAgICAgICAgIHNvdXJjZTogKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogYC9zZWFyY2g/cT0ke3JlcXVlc3QudGVybX0mZmlsdGVyPWFjY291bnRgLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWluTGVuZ3RoOiAzLFxyXG4gICAgICAgICAgICBkZWxheTogNTAwXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpbnB1dE5ld0ZjKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnNlbGVjdGVkVXNlciA9PSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBpbG90VXJsKCkge1xyXG4gICAgICAgIGxldCBwaWxvdF9pZCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyKVxyXG4gICAgICAgICAgICBwaWxvdF9pZCA9IEFjY291bnRQaWxvdCh0aGlzLnByb3BzLnNlbGVjdGVkVXNlci5uYW1lLCB0aGlzLnByb3BzLnNlbGVjdGVkVXNlci5waWxvdHMpLmlkO1xyXG5cclxuICAgICAgICByZXR1cm4gYGh0dHBzOi8vaW1hZ2VzZXJ2ZXIuZXZlb25saW5lLmNvbS9DaGFyYWN0ZXIvJHtwaWxvdF9pZH1fMTI4LmpwZ2A7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29ycG9yYXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyICYmIHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyLnBpbG90cylcclxuICAgICAgICAgICAgcmV0dXJuIEFjY291bnRQaWxvdCh0aGlzLnByb3BzLnNlbGVjdGVkVXNlci5uYW1lLCB0aGlzLnByb3BzLnNlbGVjdGVkVXNlci5waWxvdHMpLmNvcnBvcmF0aW9uO1xyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBbGxpYW5jZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZFVzZXIgJiYgdGhpcy5wcm9wcy5zZWxlY3RlZFVzZXIucGlsb3RzKVxyXG4gICAgICAgICAgICByZXR1cm4gQWNjb3VudFBpbG90KHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyLm5hbWUsIHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyLnBpbG90cykuYWxsaWFuY2U7XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFJvbGUocm9sZUlkKSB7XHJcbiAgICAgICAgaWYgKHJvbGVJZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9Vc2VySW5mb10gQGFkZFJvbGUgLSBZb3UgbXVzdCBzdXBwbHkgYSByb2xlIElEYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9YCxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudF9pZDogdGhpcy5wcm9wcy5zZWxlY3RlZFVzZXIgPyB0aGlzLnByb3BzLnNlbGVjdGVkVXNlci5pZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICByb2xlX2lkOiByb2xlSWQsXHJcbiAgICAgICAgICAgICAgICBhY2NvdW50X25hbWU6ICQoXCIjbG9va3VwX2FjY291bnRcIikudmFsKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5wcm9wcy51c2VySW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNldEluZGV4KGluZGV4KTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L1VzZXJJbmZvXSBAYWRkUm9sZSAtIEVycm9yIGFkZGluZyByb2xlYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8gQnV0dG9uOiBSZXNldCBCdXR0b25cclxuICAgICAgICBsZXQgcmVzZXRfYnRuID0ge307XHJcbiAgICAgICAgaWYgKCF0aGlzLmlucHV0TmV3RmMoKSkge1xyXG4gICAgICAgICAgICByZXNldF9idG4ubGFyZ2UgPSA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFyayBmbG9hdC1sZWZ0IG10LTNcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5wcm9wcy5zZXRJbmRleC5iaW5kKHRoaXMsIG51bGwpfT5CYWNrIDxpIGNsYXNzTmFtZT1cImZhcyBmYS11bmRvLWFsdFwiPjwvaT48L2J1dHRvbj47XHJcbiAgICAgICAgICAgIHJlc2V0X2J0bi5zbWFsbCA9IDxpIGNsYXNzTmFtZT1cImZhcyBmYS10aW1lcy1jaXJjbGUgZmxvYXQtcmlnaHQgbXItMyBpLWJ0blwiIG9uQ2xpY2s9e3RoaXMucHJvcHMuc2V0SW5kZXguYmluZCh0aGlzLCBudWxsKX0+PC9pPlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT25seSBzaG93biB3aGVuIHZpZXdpbmcvZWRpdGluZyBhbiBGQ1xyXG4gICAgICAgIGxldCBjb3Jwb3JhdGlvbjtcclxuICAgICAgICBpZiAoIXRoaXMuaW5wdXROZXdGYygpKSB7XHJcbiAgICAgICAgICAgIGNvcnBvcmF0aW9uID0gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3Jwb3JhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoND5Db3Jwb3JhdGlvbjwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2BodHRwczovL2ltYWdlc2VydmVyLmV2ZW9ubGluZS5jb20vQ29ycG9yYXRpb24vJHsodGhpcy5nZXRDb3Jwb3JhdGlvbigpKSA/IHRoaXMuZ2V0Q29ycG9yYXRpb24oKS5pZCA6IDB9XzMyLnBuZ2B9IGFsdD1cIkNvcnBvcmF0aW9uIExvZ29cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb3Jwb3JhdGlvbiBjb3Jwb3JhdGlvbj17dGhpcy5nZXRDb3Jwb3JhdGlvbigpfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhbGxpYW5jZTtcclxuICAgICAgICBpZiAoIXRoaXMuaW5wdXROZXdGYygpKSB7XHJcbiAgICAgICAgICAgIGFsbGlhbmNlID0gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGxpYW5jZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoND5BbGxpYW5jZTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2BodHRwczovL2ltYWdlc2VydmVyLmV2ZW9ubGluZS5jb20vQWxsaWFuY2UvJHsodGhpcy5nZXRBbGxpYW5jZSgpKSA/IHRoaXMuZ2V0QWxsaWFuY2UoKS5pZCA6IDB9XzMyLnBuZ2B9IGFsdD1cIkFsbGlhbmNlIExvZ29cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxBbGxpYW5jZSBhbGxpYW5jZT17dGhpcy5nZXRBbGxpYW5jZSgpfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhdmFsaWFibGVfcm9sZXM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYXZhaWxhYmxlUm9sZXMpIHtcclxuICAgICAgICAgICAgYXZhbGlhYmxlX3JvbGVzID0gdGhpcy5wcm9wcy5hdmFpbGFibGVSb2xlcy5tYXAoKHJvbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8YSBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIG9uQ2xpY2s9e3RoaXMuYWRkUm9sZS5iaW5kKHRoaXMsIHJvbGUuaWQpfT57cm9sZS5uYW1lfTwvYT47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGFkZFJvbGVzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmF2YWlsYWJsZVJvbGVzKSB7XHJcbiAgICAgICAgICAgIGFkZFJvbGVzID0gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1hcHBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kYXJrIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiB0eXBlPVwiYnV0dG9uXCI+QWRkIHRvIFJvbGUuLi4gPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWVudVwiIHJvbGU9XCJtZW51XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YXZhbGlhYmxlX3JvbGVzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcm9sZXM7XHJcbiAgICAgICAgbGV0IHBpbG90cztcclxuICAgICAgICBpZiAoIXRoaXMuaW5wdXROZXdGYygpKSB7XHJcbiAgICAgICAgICAgIHJvbGVzID0gKFxyXG4gICAgICAgICAgICAgICAgPFJvbGVzIHVzZXI9e3RoaXMucHJvcHMuc2VsZWN0ZWRVc2VyID8gdGhpcy5wcm9wcy5zZWxlY3RlZFVzZXIgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e3RoaXMucHJvcHMuYmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLnByb3BzLnUuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICB1c2VySW5kZXg9e3RoaXMucHJvcHMudXNlckluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgIHNldEluZGV4PXt0aGlzLnByb3BzLnNldEluZGV4LmJpbmQodGhpcyl9IC8+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgcGlsb3RzID0gPEFjY291bnRQaWxvdHMgcGlsb3RzPXt0aGlzLnByb3BzLnNlbGVjdGVkVXNlciA/IHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyLnBpbG90cyA6IG51bGx9IC8+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWJvZHkgcHktNFwiPlxyXG4gICAgICAgICAgICAgICAge3Jlc2V0X2J0bi5zbWFsbH1cclxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwicm91bmRlZC1jaXJjbGUgZC1ibG9jayBteC1hdXRvXCIgc3JjPXt0aGlzLmdldFBpbG90VXJsKCl9IGFsdD1cIlBpbG90J3MgQXZhdGFyXCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCIjbG9va3VwX2FjY291bnRcIj5HU0YgQXV0aCBOYW1lOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cImxvb2t1cF9hY2NvdW50XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuc2VsZWN0ZWRVc2VyID8gdGhpcy5wcm9wcy5zZWxlY3RlZFVzZXIubmFtZSA6IFwiXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWRVc2VyID8gXCJ0cnVlXCIgOiBcImZhbHNlXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXt0aGlzLnByb3BzLnNlbGVjdGVkVXNlciA/IHRoaXMucHJvcHMuc2VsZWN0ZWRVc2VyLmlkIDogbnVsbH0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YWRkUm9sZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkIG10LTFcIj5MYXN0IGxvZ2dlZCBpbjoge3RoaXMucHJvcHMuc2VsZWN0ZWRVc2VyID8gRGF0ZUZvcm1hdCh0aGlzLnByb3BzLnNlbGVjdGVkVXNlci5sYXN0TG9naW4pIDogXCJcIn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNiBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb3Jwb3JhdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YWxsaWFuY2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7cGlsb3RzfVxyXG4gICAgICAgICAgICAgICAgICAgIHtyb2xlc31cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge3Jlc2V0X2J0bi5sYXJnZX1cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IFNwZWNpYWxVc2VycyBmcm9tICcuL0NvbXBvbmVudHMvVXNlck1hbmFnZW1lbnQvRWxldmF0ZWRVc2Vycyc7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tICcuL0NvbXBvbmVudHMvVXNlck1hbmFnZW1lbnQvVXNlckluZm8nO1xyXG5cclxuY29uc3QgYmFzZVVyaSA9IFwiL2FkbWluL2NvbW1hbmRlcnNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJNYW5hZ2VtZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB1c2VyczogbnVsbCxcclxuICAgICAgICAgICAgcm9sZXM6IG51bGwsXHJcbiAgICAgICAgICAgIHVzZXJJbmRleDogbnVsbCxcclxuICAgICAgICAgICAga2V5OiAwXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgeyB0aGlzLmdldERhdGEoKTsgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2dldCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vZGF0YWAsXHJcbiAgICAgICAgfSkuZG9uZSgocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdXNlcnM6IHJlc3VsdC5mY3MsXHJcbiAgICAgICAgICAgICAgICByb2xlczogcmVzdWx0LnJvbGVzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9Db21tYW5kZXJzIHtDb21tYW5kZXJzQGdldERhdGF9IC0gRXJyb3IgZ2V0dGluZyBhY3RpdmUgdXNlcnNgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRVc2VySW5kZXgobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0ZWRVc2VyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnVzZXJzICYmIHRoaXMuc3RhdGUudXNlcnNbdGhpcy5zdGF0ZS51c2VySW5kZXhdKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS51c2Vyc1t0aGlzLnN0YXRlLnVzZXJJbmRleF07XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEdyb3VwKHJvbGVfaWQpIHtcclxuICAgICAgICBsZXQgYWNjb3VudF9pZCA9ICh0aGlzLnN0YXRlLnVzZXJzW3RoaXMuc3RhdGUudXNlckluZGV4XSkgPyB0aGlzLnN0YXRlLnVzZXJzW3RoaXMuc3RhdGUudXNlckluZGV4XS5pZCA6IG51bGw7XHJcbiAgICAgICAgbGV0IGFjY291bnRfbmFtZSA9IHRoaXMuc3RhdGUudXNlcklucHV0OyAgICAgICAgICAgIFxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHtiYXNlVXJpfWAsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIFwicm9sZV9pZFwiOiByb2xlX2lkLFxyXG4gICAgICAgICAgICAgICAgXCJhY2NvdW50X2lkXCI6IGFjY291bnRfaWQsXHJcbiAgICAgICAgICAgICAgICBcImFjY291bnRfbmFtZVwiOiBhY2NvdW50X25hbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMuc3RhdGUudXNlckluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRVc2VySW5kZXgoeCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0NvbW1hbmRlcnMge0NvbW1hbmRlcnNAYWRkR3JvdXB9IC0gRXJyb3IgYWRkaW5nIGdyb3VwYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXNlckluZGV4KGkpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdXNlckluZGV4OiBpIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJzKCkge1xyXG4gICAgICAgIHJldHVybiAoISF0aGlzLnN0YXRlLnVzZXJzKSA/IHRoaXMuc3RhdGUudXNlcnMgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN0YXRlRnJvbUlucHV0KHgpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdXNlcklucHV0OiB4IH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctOCBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNwZWNpYWxVc2VycyB1c2Vycz17dGhpcy5zdGF0ZS51c2Vyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW5kZXg9e3RoaXMuc2V0VXNlckluZGV4LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXtiYXNlVXJpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFVzZXJJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldERhdGEuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVXNlcj17dGhpcy5zZWxlY3RlZFVzZXIoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEluZGV4PXt0aGlzLnNldFVzZXJJbmRleC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckluZGV4PXt0aGlzLnN0YXRlLnVzZXJJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZVJvbGVzPXt0aGlzLnN0YXRlLnJvbGVzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVyaT17YmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17dGhpcy5zdGF0ZS5rZXl9ICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VyX21hbmFnZW1lbnQnKSlcclxuICAgIHJlbmRlcig8VXNlck1hbmFnZW1lbnQgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VyX21hbmFnZW1lbnQnKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pZCB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRpdGxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpdGxlIHx8IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2l6ZSgpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuc2l6ZSkge1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcImxnXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYG1vZGFsLSR7dGhpcy5wcm9wcy5zaXplfWBcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwieGxcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgbW9kYWwtJHt0aGlzLnByb3BzLnNpemV9YFxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgZGlzbWlzcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXNtaXNzKSB7XHJcbiAgICAgICAgICAgIGRpc21pc3MgPSAoXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+w5c8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbCBmYWRlXCIgaWQ9e3RoaXMuZ2V0SWQoKX0gcm9sZT1cImRpYWxvZ1wiIHRhYmluZGV4PVwiLTFcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbW9kYWwtZGlhbG9nICR7dGhpcy5nZXRTaXplKCl9YH0gcm9sZT1cImRvY3VtZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jb250ZW50XCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cIm1vZGFsLXRpdGxlXCI+e3RoaXMuZ2V0VGl0bGUoKX08L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2Rpc21pc3N9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IE1vZGFsIGZyb20gJy4uL21vZGFsJztcclxuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICcuLi9Gb3JtQ29udHJvbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5ld0ZsZWV0TGluayBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtNFwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhcmsgZC1ibG9jayBteC1hdXRvXCIgZGF0YS10b2dnbGU9XCJtb2RhbFwiIGRhdGEtdGFyZ2V0PVwiI25ld0ZsZWV0TW9kYWxcIj5SZWdpc3RlciBhIE5ldyBGbGVldDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOZXdGbGVldE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlZ2lzdGVyRmxlZXQoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAvZmxlZXRzYCxcclxuICAgICAgICAgICAgZGF0YTogJChcIiNuZXdGbGVldEZvcm1cIikuc2VyaWFsaXplKClcclxuICAgICAgICB9KS5kb25lKChmbGVldElkKSA9PiB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9mbGVldHMvJHtmbGVldElkfWBcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgUmVhY3QvTmV3RmxlZXRNb2RhbCB7TmV3RmxlZXRNb2RhbEByZWdpc3RlckZsZWV0fSAtIEVycm9yIHJlZ2lzdGVyaW5nIHRoZSBmbGVldGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgYm9zcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGJvc3MgPSB0aGlzLnByb3BzLm9wdGlvbnMucGlsb3RzLm1hcCgocGlsb3QpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnByZWZQaWxvdCAmJiB0aGlzLnByb3BzLnByZWZQaWxvdC5pZCA9PSBwaWxvdC5pZClcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxvcHRpb24gdmFsdWU9e3BpbG90LmlkfSBzZWxlY3RlZD17c2VsZWN0ZWR9PntwaWxvdC5uYW1lfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0eXBlcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHR5cGVzID0gdGhpcy5wcm9wcy5vcHRpb25zLmZsZWV0VHlwZXMubWFwKCh0eXBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPG9wdGlvbiB2YWx1ZT17dHlwZX0+e3R5cGV9PC9vcHRpb24+XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvbW1zO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29tbXMgPSB0aGlzLnByb3BzLm9wdGlvbnMuY29tbXMubWFwKChjaGFubmVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPG9wdGlvbiB2YWx1ZT17Y2hhbm5lbC5pZH0+e2NoYW5uZWwubGlua1RleHR9PC9vcHRpb24+XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPE1vZGFsIGlkPVwibmV3RmxlZXRNb2RhbFwiIHRpdGxlPVwiU3RhcnQgYSBmbGVldCFcIiBkaXNtaXNzPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAgPGZvcm0gaWQ9XCJuZXdGbGVldEZvcm1cIiBvblN1Ym1pdD17dGhpcy5yZWdpc3RlckZsZWV0LmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwicmVxdWlyZWRcIiBodG1sRm9yPVwiRXNpRmxlZXRcIj5FU0kgRmxlZXQgVVJMOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cIkVzaUZsZWV0XCIgbmFtZT1cIkVzaUZsZWV0VXJsXCIgcGxhY2Vob2xkZXI9XCJodHRwczovL2VzaS5ldmV0ZWNoLm5ldC92MS9mbGVldHMvLi4uLz9kYXRhc291cmNlPXRyYW5xdWlsaXR5XCIgYXV0b2NvbXBsZXRlPVwiZmFsc2VcIiByZXF1aXJlZD1cInRydWVcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwicmVxdWlyZWRcIiBodG1sRm9yPVwiRmxlZXRCb3NzXCI+RmxlZXQgQm9zczo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVwiRmxlZXRCb3NzXCIgbmFtZT1cIkZsZWV0Qm9zc1wiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2Jvc3N9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkIGZvbnQtaXRhbGljXCI+TXVzdCBiZSB0aGUgcGlsb3Qgd2l0aCB0aGUgc3RhciBpbiBnYW1lLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJyZXF1aXJlZFwiIGh0bWxGb3I9XCJGbGVldFR5cGVcIj5GbGVldCBUeXBlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJGbGVldFR5cGVcIiBuYW1lPVwiRmxlZXRUeXBlXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHlwZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkIGZvbnQtaXRhbGljXCI+VGhpcyB3aWxsIGRpc3BsYXkgeW91ciBmbGVldCBjYXAgdG8gcGlsb3RzLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJyZXF1aXJlZFwiIGh0bWxGb3I9XCJGbGVldENvbW1zXCI+RmxlZXQgQ29tbXM6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cIkZsZWV0Q29tbXNcIiBuYW1lPVwiRmxlZXRDb21tc1wiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbW1zfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3MgcHVsbC1yaWdodFwiPlJlZ2lzdGVyIEZsZWV0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIDwvTW9kYWw+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsZXJ0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBnZXRDbGFzcygpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2VyXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhbGVydC1kYW5nZXJcIjtcclxuICAgICAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImFsZXJ0LXN1Y2Nlc3NcIjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImFsZXJ0LXByaW1hcnlcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBkaXNtaXNzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRpc21pc3MpIHtcclxuICAgICAgICAgICAgZGlzbWlzcyA9IChcclxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwiYWxlcnRcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj7Dlzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiIGNsYXNzTmFtZT17YGFsZXJ0ICR7dGhpcy5nZXRDbGFzcygpfWB9PlxyXG4gICAgICAgICAgICAgICAge2Rpc21pc3N9XHJcblxyXG4gICAgICAgICAgICAgICAgPHNwYW4+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApICAgICAgICBcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFBpbG90LCBEZXN0aW5hdGlvbiB9IGZyb20gJy4uL0VzaVVpJztcclxuaW1wb3J0IHsgTXVtYmxlTGluayB9IGZyb20gJy4uL0NvbW1MaW5rcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbGVldEluZm8gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGpvaW5GbGVldChpZCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgL2ZsZWV0cy8ke3RoaXMucHJvcHMuZmxlZXQuaWR9L2ludml0ZS8ke2lkfWAsXHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0NvbXBvbmVudHMvRmxlZXRJbmZvIHtGbGVldEluZm9Aam9pbkZsZWV0fSAtIEVycm9yIGpvaW5pbmcgdGhlIHdhaXRsaXN0YCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSkgXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBteVBpbG90cztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5teVBpbG90cykge1xyXG4gICAgICAgICAgICBteVBpbG90cyA9IHRoaXMucHJvcHMubXlQaWxvdHMubWFwKChwaWxvdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxhIHJvbGU9XCJwcmVzZW50YXRpb25cIiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17dGhpcy5qb2luRmxlZXQuYmluZCh0aGlzLCBwaWxvdC5pZCl9PntwaWxvdC5uYW1lfTwvYT47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGZjQnV0dG9ucztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93RmNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGZjQnV0dG9ucyA9IChcclxuICAgICAgICAgICAgICAgIDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3NOYW1lPVwiYnRuLWdyb3VwIHNwZWNpYWxcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLWRhcmtcIiB0eXBlPVwiYnV0dG9uXCIgaHJlZj17YC9mbGVldHMvJHt0aGlzLnByb3BzLmZsZWV0LmlkfWB9Pk1hbmFnZSBGbGVldDwvYT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93biBidG4tZ3JvdXBcIiByb2xlPVwiZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3MgZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIHR5cGU9XCJidXR0b25cIj5Kb2luIEZsZWV0IFdpdGguLi4uPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgcm9sZT1cIm1lbnVcIiBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bXlQaWxvdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTQgY29sLW1kLTYgY29sLXNtLTEyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZWV0LWluZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZsZWV0RkMgZmM9e3RoaXMucHJvcHMuZmxlZXQuZmN9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNiBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGbGVldExvY2F0aW9uIHN5c3RlbT17dGhpcy5wcm9wcy5mbGVldC5zeXN0ZW19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZsZWV0Q291bnQgbWVtYmVycz17dGhpcy5wcm9wcy5mbGVldC5tZW1iZXJzfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TXVtYmxlTGluayBjb21tQ2hhbm5lbD17dGhpcy5wcm9wcy5mbGVldC5jb21tc30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtmY0J1dHRvbnN9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBGbGVldEZDIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgIEZDOiA8UGlsb3QgcGlsb3Q9e3RoaXMucHJvcHMuZmN9IC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEZsZWV0TG9jYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLW1hcC1tYXJrZXItYWx0XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPERlc3RpbmF0aW9uIHN5c3RlbT17dGhpcy5wcm9wcy5zeXN0ZW19IC8+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEZsZWV0Q291bnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXVzZXJzXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAge2Ake3RoaXMucHJvcHMubWVtYmVycy5vbkdyaWR9IC8gJHt0aGlzLnByb3BzLm1lbWJlcnMubWF4fWB9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0UGlsb3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxQaWxvdFNldDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmluaXRpYWxQaWxvdFNldCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnByb3BzLnNlbGVjdGVkUGlsb3QodGhpcy5wcm9wcy5wcmVmUGlsb3QuaWQpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbml0aWFsUGlsb3RTZXQ6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlU2VsZWN0ZWRQaWxvdChlKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZFBpbG90KGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IHBpbG90T3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5waWxvdHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwaWxvdE9wdGlvbnMgPSB0aGlzLnByb3BzLnBpbG90cy5tYXAoKHBpbG90KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnByZWZQaWxvdCAmJiBwaWxvdC5pZCA9PSB0aGlzLnByb3BzLnByZWZQaWxvdC5pZCkgc2VsZWN0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiA8b3B0aW9uIHZhbHVlPXtwaWxvdC5pZH0gc2VsZWN0ZWQ9e3NlbGVjdGVkfT57cGlsb3QubmFtZX08L29wdGlvbj5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzZWxlY3RQaWxvdFwiPldhaXRsaXN0IFdpdGg6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJzZWxlY3RQaWxvdFwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVNlbGVjdGVkUGlsb3QuYmluZCh0aGlzKX0gPlxyXG4gICAgICAgICAgICAgICAgICAgIHtwaWxvdE9wdGlvbnN9XHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdFNoaXBzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHVwZGF0ZUZpdHMoZSkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWRGaXQoZS50YXJnZXQuY2hlY2tlZCwgTnVtYmVyKGUudGFyZ2V0Lm5hbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGZpdHM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZml0cyAmJiB0aGlzLnByb3BzLmZpdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmaXRzID0gdGhpcy5wcm9wcy5maXRzLm1hcCgoZml0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIHBiLTNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzTmFtZT1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgb25DaGFuZ2U9e3RoaXMudXBkYXRlRml0cy5iaW5kKHRoaXMpfSBuYW1lPXtmaXQuaWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjdXN0b20tY29udHJvbC1pbmRpY2F0b3JcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjdXN0b20tY29udHJvbC1kZXNjcmlwdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtgaHR0cHM6Ly9pbWFnZS5ldmVvbmxpbmUuY29tL1JlbmRlci8ke2ZpdC50eXBlSWR9XzMyLnBuZ2B9IC8+IHtmaXQuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpdHMgPSAoXHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInhtcHBcIiBocmVmPVwiL2FjY291bnQtc2V0dGluZ3NcIj5BZGQgYSBGaXQgSGVyZTwvYT5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgIHBiLTRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cInBiLTNcIj5XaGF0IHNoaXBzIGRvIHlvdSB3aXNoIHRvIGZseT88L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIHtmaXRzfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0Um9sZXMgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgdXBkYXRlUm9sZXMoZSkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWRSb2xlKGUudGFyZ2V0LmNoZWNrZWQsIE51bWJlcihlLnRhcmdldC5uYW1lKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCByb2xlcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb2xlcykge1xyXG4gICAgICAgICAgICByb2xlcyA9IHRoaXMucHJvcHMucm9sZXMubWFwKChyb2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJwYi0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJjdXN0b20tY29udHJvbCBjdXN0b20tY2hlY2tib3hcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzc05hbWU9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVJvbGVzLmJpbmQodGhpcyl9IG5hbWU9e3JvbGUuaWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjdXN0b20tY29udHJvbC1pbmRpY2F0b3JcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjdXN0b20tY29udHJvbC1kZXNjcmlwdGlvblwiPntyb2xlLm5hbWV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWw+V2hhdCByb2xlcyBjYW4geW91IGhlbHAgdXMgd2l0aD88L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtdW5zdHlsZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7cm9sZXN9XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGVhdmVXYWl0bGlzdEJ0biBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBsZWF2ZVdhaXRsaXN0KCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICB1cmk6IHRoaXMucHJvcHMuYmFzZVVyaSxcclxuICAgICAgICAgICAgZGF0YTogeyBwaWxvdF9pZDogXCJcIiB9XHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0xlYXZlV2xCdG5AbGVhdmVXYWl0bGlzdF0gRXJyb3IgbGVhdmluZyB0aGUgd2FpdGxpc3Q6ICR7ZXJyLnJlc3BvbnNlVGV4dH1gKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kYW5nZXIgZmxvYXQtcmlnaHRcIiBvbkNsaWNrPXt0aGlzLmxlYXZlV2FpdGxpc3QuYmluZCh0aGlzKX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuaXNPbldsfT5cclxuICAgICAgICAgICAgICAgIExlYXZlIHRoZSBXYWl0bGlzdCA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdXNlci10aW1lc1wiPjwvaT5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBTZWxlY3RQaWxvdCBmcm9tICcuL0pvaW5XYWl0bGlzdC9TZWxlY3RQaWxvdCc7XHJcbmltcG9ydCBTZWxlY3RTaGlwcyBmcm9tICcuL0pvaW5XYWl0bGlzdC9TZWxlY3RTaGlwcyc7XHJcbmltcG9ydCBTZWxlY3RSb2xlcyBmcm9tICcuL0pvaW5XYWl0bGlzdC9TZWxlY3RSb2xlcyc7XHJcbmltcG9ydCBMZWF2ZVdsQnRuIGZyb20gJy4vSm9pbldhaXRsaXN0L0xlYXZlV2xCdG4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2FpdGxpc3RVcCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRQaWxvdDogbnVsbCxcclxuICAgICAgICAgICAgc2VsZWN0ZWRSb2xlczogW10sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkRml0czogW10sXHJcbiAgICAgICAgICAgIGtleTogMFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRSb2xlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vcHRpb25zID8gdGhpcy5wcm9wcy5vcHRpb25zLnJvbGVzIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTaGlwcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5vcHRpb25zID8gdGhpcy5wcm9wcy5vcHRpb25zLmZpdHRpbmdzIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTZWxlY3RlZFBpbG90KHBpbG90X2lkKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkUGlsb3Q6IHBpbG90X2lkIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNlbGVjdGVkRml0cyhpc1NlbGVjdGVkLCBmaXRfaWQpIHtcclxuICAgICAgICBsZXQgZml0cyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRGaXRzO1xyXG5cclxuICAgICAgICBpZiAoaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICBmaXRzLnB1c2goZml0X2lkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZml0c1tpXSA9PT0gZml0X2lkKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpdHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRGaXRzOiBmaXRzIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNlbGVjdGVkUm9sZXMoaXNTZWxlY3RlZCwgcm9sZV9pZCkge1xyXG4gICAgICAgIGxldCByb2xlcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRSb2xlcztcclxuXHJcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgcm9sZXMucHVzaChyb2xlX2lkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm9sZXNbaV0gPT09IHJvbGVfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSb2xlczogcm9sZXMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgQWRkUGlsb3RUb1dhaXRsaXN0KCkgeyAgIFxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkRml0cyA9PSBudWxsIHx8IHRoaXMuc3RhdGUuc2VsZWN0ZWRGaXRzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgbXVzdCBzZWxlY3QgYXQgbGVhc3Qgb25lIGZpdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX1gLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBwaWxvdF9pZDogdGhpcy5zdGF0ZS5zZWxlY3RlZFBpbG90LFxyXG4gICAgICAgICAgICAgICAgcm9sZV9pZHM6IHRoaXMuc3RhdGUuc2VsZWN0ZWRSb2xlcy5qb2luKCksXHJcbiAgICAgICAgICAgICAgICBmaXRfaWRzOiB0aGlzLnN0YXRlLnNlbGVjdGVkRml0cy5qb2luKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGtleTogdGhpcy5zdGF0ZS5rZXkgKyAxLCBzZWxlY3RlZEZpdHM6IFtdLCBzZWxlY3RlZFJvbGVzOiBbXSB9KTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L1dhaXRsaXN0VXBdIEBhZGRQaWxvdFRvV2FpdGxpc3QgLSBFcnJvciBqb2luaW5nIHRoZSB3YWl0bGlzdGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pICBcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGRpc2FibGVkID0gdGhpcy5zdGF0ZS5zZWxlY3RlZEZpdHMubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9XCJwYi00XCI+Sm9pbiB0aGUgV2FpdGxpc3Q8L2g1PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgcGItNFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTEwIGNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0UGlsb3QgcGlsb3RzPXt0aGlzLnByb3BzLnBpbG90cyB8fCBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZlBpbG90PXt0aGlzLnByb3BzLnByZWZQaWxvdCB8fCBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRQaWxvdD17dGhpcy51cGRhdGVTZWxlY3RlZFBpbG90LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RoaXMuc3RhdGUua2V5fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2hpcHMgZml0cz17dGhpcy5nZXRTaGlwcygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRGaXQ9e3RoaXMudXBkYXRlU2VsZWN0ZWRGaXRzLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RoaXMuc3RhdGUua2V5fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RSb2xlcyByb2xlcz17dGhpcy5nZXRSb2xlcygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb2xlPXt0aGlzLnVwZGF0ZVNlbGVjdGVkUm9sZXMuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17dGhpcy5zdGF0ZS5rZXl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tc3VjY2Vzc1wiIG9uQ2xpY2s9e3RoaXMuQWRkUGlsb3RUb1dhaXRsaXN0LmJpbmQodGhpcyl9IGRpc2FibGVkPXtkaXNhYmxlZH0+Sm9pbiB0aGUgV2FpdGxpc3QgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXVzZXItcGx1c1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxMZWF2ZVdsQnRuIGlzT25XbD17IXRoaXMucHJvcHMuaXNPbldsfSB1PXt0aGlzLnByb3BzLnV9Lz5cclxuICAgICAgICAgICAgPC9kaXY+ICAgIFxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFBpbG90IH0gZnJvbSAnLi4vRXNpVWknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2FpdGluZ1BpbG90IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICByZW1vdmVQaWxvdChwaWxvdF9pZCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX1gLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBwaWxvdF9pZDogcGlsb3RfaWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L1dhaXRpbmdQaWxvdF0gQHJlbW92ZVBpbG90IC0gRXJyb3IgcmVtb3ZpbmcgcGlsb3QgZnJvbSB0aGUgd2FpdGxpc3RgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KSAgXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBwaWxvdHM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGlsb3RzKSB7XHJcbiAgICAgICAgICAgIHBpbG90cyA9IHRoaXMucHJvcHMucGlsb3RzLm1hcCgod2FpdGluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48aW1nIHdpZHRoPVwiMzJweFwiIHNyYz17YGh0dHBzOi8vaW1hZ2UuZXZlb25saW5lLmNvbS9DaGFyYWN0ZXIvJHt3YWl0aW5nLmlkfV8zMi5qcGdgfSAvPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48UGlsb3QgcGlsb3Q9e3dhaXRpbmd9IC8+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyXCIgb25DbGljaz17dGhpcy5yZW1vdmVQaWxvdC5iaW5kKHRoaXMsIHdhaXRpbmcuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXVzZXItdGltZXNcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvbnRlbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGlsb3RzICYmIHRoaXMucHJvcHMucGlsb3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29udGVudCA9IChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFibGUtcmVzcG9uc2l2ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBpbG90PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwaWxvdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGVudCA9IFwiWW91IGhhdmUgbm8gcGlsb3RzIG9uIHRoZSB3YWl0bGlzdC5cIlxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT1cInBiLTRcIj5Zb3VyIHBpbG90cyBvbiB0aGUgV2FpdGxpc3Q8L2g1PlxyXG4gICAgICAgICAgICAgICAge2NvbnRlbnR9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdFRvb2x0aXAgZnJvbSAncmVhY3QtdG9vbHRpcCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhaXRsaXN0UXVldWUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBwb3NpdGlvbjtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5wYXlsb2FkICYmIHRoaXMucHJvcHMucGF5bG9hZC55b3VyUG9zKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gYFlvdXIgUG9zaXRpb246ICR7dGhpcy5wcm9wcy5wYXlsb2FkLnlvdXJQb3MgfHwgXCJcIn0gLyAke3RoaXMucHJvcHMucGF5bG9hZC50b3RhbFdhaXRpbmcgfHwgMH1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gYFBlb3BsZSB3YWl0aW5nOiAke3RoaXMucHJvcHMucGF5bG9hZC50b3RhbFdhaXRpbmcgfHwgMH1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHF1ZXVlcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5wYXlsb2FkLnF1ZXVlcykge1xyXG5cclxuICAgICAgICAgICAgcXVldWVzID0gT2JqZWN0LmtleXModGhpcy5wcm9wcy5wYXlsb2FkLnF1ZXVlcykubWFwKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IFwiTmFtZVwiOiBrZXksIFwiQ291bnRcIjogdGhpcy5wcm9wcy5wYXlsb2FkLnF1ZXVlc1trZXldfTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBxdWV1ZXMgPSBxdWV1ZXMubWFwKChxdWV1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtgJHtxdWV1ZS5OYW1lfTogJHtxdWV1ZS5Db3VudH1gfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cIndhaXRsaXN0UXVldWVIZWFkXCIgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgcGItNFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwicHItNSBkLWlubGluZVwiPldhaXRsaXN0IFF1ZXVlPC9oNT5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNiBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWluZm8tY2lyY2xlXCIgZGF0YS10aXA9XCJZb3VyIFBvc2l0aW9uIG9ubHkgdGFrZXMgaW50byBhY2NvdW50IHVuaXF1ZSB1c2Vyczxici8+YW5kIGRvZXMgbm90IGRpc3BsYXkgdGhlaXIgYWx0cy5cIiBkYXRhLW11bHRpbGluZT1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwb3NpdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0VG9vbHRpcCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtaG91cmdsYXNzLWhhbGZcIj48L2k+IFlvdXIgV2FpdCBUaW1lOiB7dGhpcy5wcm9wcy5wYXlsb2FkLnlvdXJXYWl0VGltZX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgcHktNVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3F1ZXVlc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgTmV3RmxlZXRNb2RhbCwgTmV3RmxlZXRMaW5rIH0gZnJvbSAnLi9Db21wb25lbnRzL0luZGV4L05ld0ZsZWV0cyc7XHJcbmltcG9ydCBBbGVydCBmcm9tICcuL0NvbXBvbmVudHMvYWxlcnQnO1xyXG5pbXBvcnQgRmxlZXRJbmZvIGZyb20gJy4vQ29tcG9uZW50cy9JbmRleC9GbGVldEluZm8nO1xyXG5pbXBvcnQgeyBzZXRJbnRlcnZhbCB9IGZyb20gJ3RpbWVycyc7XHJcbmltcG9ydCBXYWl0bGlzdFVwIGZyb20gJy4vQ29tcG9uZW50cy9JbmRleC9XYWl0bGlzdFVwJztcclxuaW1wb3J0IFdhaXRpbmdQaWxvdCBmcm9tICcuL0NvbXBvbmVudHMvSW5kZXgvV2FpdGluZ1BpbG90cyc7XHJcbmltcG9ydCBXYWl0bGlzdFF1ZXVlIGZyb20gJy4vQ29tcG9uZW50cy9JbmRleC9XYWl0bGlzdFF1ZXVlJztcclxuXHJcblxyXG5jb25zdCBiYXNlVXJpID0gXCIvXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmRleCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgZmNPcHRpb25zOiBudWxsLFxyXG4gICAgICAgICAgICBmbGVldHM6IG51bGwsXHJcbiAgICAgICAgICAgIHBpbG90czogbnVsbCxcclxuICAgICAgICAgICAgcHJlZlBpbG90OiBudWxsLFxyXG4gICAgICAgICAgICB3YWl0bGlzdDogbnVsbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmdldEZsZWV0cygpO1xyXG5cclxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmdldEZsZWV0cygpLCAxMDAwICogMTApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2dldCcsXHJcbiAgICAgICAgICAgIHVybDogYC9hcGkvdjEvb3B0aW9uc2AsXHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHByZWZQaWxvdDogZGF0YS5wcmVmUGlsb3QsXHJcbiAgICAgICAgICAgICAgICBmY09wdGlvbnM6IGRhdGEuZmNPcHRpb25zID8gZGF0YS5mY09wdGlvbnMgOiBudWxsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUmVhY3QvSW5kZXhAZ2V0RGF0YV0gRXJyb3IgZ2V0dGluZyB1c2VyIG9wdGlvbnM6ICR7ZXJyLnJlc3BvbnNlVGV4dH1gKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmxlZXRzKCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdnZXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9d2FpdGxpc3QvZGF0YWAsXHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGZsZWV0czogZGF0YS5mbGVldHMsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBkYXRhLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBwaWxvdHM6IGRhdGEucGlsb3RzLFxyXG4gICAgICAgICAgICAgICAgd2FpdGxpc3Q6IGRhdGEud2FpdGxpc3RcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0luZGV4QGdldEZsZWV0c10gRXJyb3IgZ2V0dGluZyBmbGVldHM6ICR7ZXJyLnJlc3BvbnNlVGV4dH1gKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYXZhaWxhYmxlRmxlZXRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmZsZWV0cyAmJiB0aGlzLnN0YXRlLmZsZWV0cy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGF2YWlsYWJsZVBpbG90cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5waWxvdHMgPyB0aGlzLnN0YXRlLnBpbG90cy5hdmFsaWFibGUgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHdhaXRpbmdQaWxvdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucGlsb3RzID8gdGhpcy5zdGF0ZS5waWxvdHMud2FpdGluZyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBmbGVldHM7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZmxlZXRzKSB7XHJcbiAgICAgICAgICAgIGZsZWV0cyA9IHRoaXMuc3RhdGUuZmxlZXRzLm1hcCgoZmxlZXQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPEZsZWV0SW5mbyBmbGVldD17ZmxlZXR9IGtleT17aW5kZXh9IHNob3dGY09wdGlvbnM9e3RoaXMuc3RhdGUuZmNPcHRpb25zICYmIHRoaXMuc3RhdGUuZmNPcHRpb25zLmZsZWV0VHlwZXMgPyB0cnVlIDogZmFsc2UgfSBteVBpbG90cz17KHRoaXMuc3RhdGUuZmNPcHRpb25zKSA/IHRoaXMuc3RhdGUuZmNPcHRpb25zLnBpbG90cyA6IG51bGx9IC8+XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbmV3RmxlZXQgPSB7IGJ0bjogbnVsbCwgbW9kYWw6IG51bGwgfTtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5mY09wdGlvbnMgJiYgdGhpcy5zdGF0ZS5mY09wdGlvbnMuZmxlZXRUeXBlcykge1xyXG4gICAgICAgICAgICBuZXdGbGVldC5idG4gPSA8TmV3RmxlZXRMaW5rIC8+O1xyXG4gICAgICAgICAgICBuZXdGbGVldC5tb2RhbCA9IDxOZXdGbGVldE1vZGFsIG9wdGlvbnM9e3RoaXMuc3RhdGUuZmNPcHRpb25zfSBwcmVmUGlsb3Q9e3RoaXMuc3RhdGUucHJlZlBpbG90fSAvPjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub0ZsZWV0cztcclxuICAgICAgICBpZiAoIXRoaXMuYXZhaWxhYmxlRmxlZXRzKCkpIHtcclxuICAgICAgICAgICAgbm9GbGVldHMgPSA8QWxlcnQgdHlwZT1cImRhbmdlclwiPjxzcGFuIGNsYXNzTmFtZT1cImZvbnQtd2VpZ2h0LWJvbGRcIj5XYWl0bGlzdCBJbmFjdGl2ZTo8L3NwYW4+IFRoZXJlIGlzIGVpdGhlciBubyBmbGVldCwgb3IgdGhlIHdhaXRsaXN0IGlzIGluYWN0aXZlLiBDaGVjayBvdXIgaW4gZ2FtZSBjaGFubmVsIGZvciBtb3JlIGluZm9ybWF0aW9uLjwvQWxlcnQ+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgd2FpdGxpc3RVaTtcclxuICAgICAgICBpZiAodGhpcy5hdmFpbGFibGVGbGVldHMoKSkge1xyXG4gICAgICAgICAgICB3YWl0bGlzdFVpID0gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy00IGNvbC1tZC02IGNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8V2FpdGxpc3RVcCBvcHRpb25zPXt0aGlzLnN0YXRlLm9wdGlvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWxvdHM9e3RoaXMuYXZhaWxhYmxlUGlsb3RzKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc09uV2w9e3RoaXMuc3RhdGUucGlsb3RzICYmIHRoaXMuc3RhdGUucGlsb3RzLndhaXRpbmcubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZQaWxvdD17dGhpcy5zdGF0ZS5wcmVmUGlsb3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXtiYXNlVXJpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5nZXRGbGVldHMuYmluZCh0aGlzKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtNiBjb2wtc20tMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFdhaXRpbmdQaWxvdCBwaWxvdHM9e3RoaXMud2FpdGluZ1BpbG90cygpfSBiYXNlVXJpPXtiYXNlVXJpfSB1PXt0aGlzLmdldEZsZWV0cy5iaW5kKHRoaXMpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy00IGNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8V2FpdGxpc3RRdWV1ZSBwYXlsb2FkPXt0aGlzLnN0YXRlLndhaXRsaXN0fSBiYXNlVXJpPXtiYXNlVXJpfSB1PXt0aGlzLmdldEZsZWV0cy5iaW5kKHRoaXMpfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkZsZWV0IEluZm88L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bm9GbGVldHN9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHtmbGVldHN9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtuZXdGbGVldC5idG59XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICB7d2FpdGxpc3RVaX1cclxuXHJcbiAgICAgICAgICAgICAgICB7bmV3RmxlZXQubW9kYWx9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZGV4JykpXHJcbiAgICByZW5kZXIoPEluZGV4IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5kZXgnKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgWG1wcExpbmsgfSBmcm9tICcuL0NvbW1MaW5rcyc7XHJcbmltcG9ydCB7IFBpbG90LCBEZXN0aW5hdGlvbiB9IGZyb20gJy4vRXNpVWknO1xyXG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnXHJcbmltcG9ydCB7IHNldFRpbWVvdXQgfSBmcm9tICd0aW1lcnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2FpdGxpc3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IEZsaWdodFN0cmlwcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy53YWl0bGlzdCkge1xyXG5cclxuICAgICAgICAgICAgRmxpZ2h0U3RyaXBzID0gdGhpcy5wcm9wcy53YWl0bGlzdC5tYXAoKHBpbG90KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPEZsaWdodFN0cmlwIHBpbG90PXtwaWxvdH0gd2luZ3M9e3RoaXMucHJvcHMud2luZ3N9IGZsZWV0SWQ9e3RoaXMucHJvcHMuZmxlZXRJZH0gLz47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZS1yZXNwb25zaXZlXCI+XHJcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFibGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT17eyBcIndpZHRoXCI6IFwiMzBweFwiIH19PjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGlsb3Q8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPXt7IFwid2lkdGhcIjogXCIyMjBweFwiIH19PjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3sgXCJ3aWR0aFwiOiBcIjE4MHB4XCIgfX0+U2hpcHM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlJvbGVzPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TeXN0ZW08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPldhaXQgVGltZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge0ZsaWdodFN0cmlwc31cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRmxpZ2h0U3RyaXAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgYWxhcm1BY2NvdW50KHdsX2lkLCBhY2NvdW50X2lkKSB7XHJcbiAgICAgICAgJChgIyR7d2xfaWR9YCkuYWRkQ2xhc3MoJ3RyLXBlbmRpbmcnKTtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAvZmxlZXRzLyR7dGhpcy5wcm9wcy5mbGVldElkfS9hbGFybS8ke2FjY291bnRfaWR9YFxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgLy8gWUFZXHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICQoYCMke3dsX2lkfWApLnJlbW92ZUNsYXNzKCd0ci1wZW5kaW5nJykuYWRkQ2xhc3MoJ3RyLWRhbmdlcicpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9Db21wb25lbnRzL1dhaXRsaXN0IHtGbGlnaHRTdHJpcEBhbGFybUFjY291bnR9IC0gRXJyb3Igc2VuZGluZyB0aGUgcGlsb3QgYW4gYWxhcm1gLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGludml0ZVBpbG90KHdsX2lkLCBwaWxvdF9pZCwgc3F1YWRfaWQsIHdpbmdfaWQpIHtcclxuICAgICAgICAkKGAjJHt3bF9pZH1gKS5hZGRDbGFzcyhcInRyLXBlbmRpbmdcIik7XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgL2ZsZWV0cy8ke3RoaXMucHJvcHMuZmxlZXRJZH0vaW52aXRlLyR7cGlsb3RfaWR9YCxcclxuICAgICAgICAgICAgZGF0YTogeyBzcXVhZElkOiBzcXVhZF9pZCwgd2luZ0lkOiB3aW5nX2lkIH1cclxuICAgICAgICB9KS5kb25lKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICQoYCMke3dsX2lkfWApLmFkZENsYXNzKFwidHItc3VjY2Vzc1wiKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgJChgIyR7d2xfaWR9YCkucmVtb3ZlQ2xhc3MoJ3RyLXBlbmRpbmcnKS5hZGRDbGFzcygndHItZGFuZ2VyJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0NvbXBvbmVudHMvV2FpdGxpc3Qge0ZsaWdodFN0cmlwQGludml0ZVBpbG90fSAtIEVycm9yIGludml0aW5nIHRoZSBwaWxvdCAke3BpbG90X2lkfWAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVBpbG90KHdsX2lkKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXHJcbiAgICAgICAgICAgIHVybDogYC93YWl0bGlzdC9yZW1vdmUvJHt3bF9pZH1gXHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAkKGAjJHt3bF9pZH1gKS5hZGRDbGFzcygndHItZGFuZ2VyJyk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0NvbXBvbmVudHMvV2FpdGxpc3Qge0ZsaWdodFN0cmlwQHJlbW92ZVBpbG90fSAtIEVycm9yIHJlbW92aW5nIHRoZSBwaWxvdCBmcm9tIHRoZSB3YWl0bGlzdGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgbmV3UGlsb3Q7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGlsb3QubmV3UGlsb3QpIHtcclxuICAgICAgICAgICAgbmV3UGlsb3QgPSA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlciBmYS1zdGF0dXNcIj48aSBjbGFzcz1cImZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZVwiPjwvaT4gTmV3IFBpbG90PC9zcGFuPlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG9mZmxpbmU7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGlsb3QuaXNPZmZsaW5lKSB7XHJcbiAgICAgICAgICAgIG9mZmxpbmUgPSA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXdhcm5pbmcgZmEtc3RhdHVzXCI+PGkgY2xhc3M9XCJmYXMgZmEtdXNlci1zbGFzaFwiPjwvaT4gT2ZmbGluZTwvc3Bhbj5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaXRzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBpbG90LnNoaXBzKSB7XHJcbiAgICAgICAgICAgIGZpdHMgPSB0aGlzLnByb3BzLnBpbG90LnNoaXBzLm1hcCgoc2hpcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxpbWcgY2xhc3NOYW1lPVwibS0xXCIgZGF0YS10aXA9e3NoaXAuZGVzY3JpcHRpb259IHNyYz17YGh0dHBzOi8vaW1hZ2UuZXZlb25saW5lLmNvbS9SZW5kZXIvJHtzaGlwLnNoaXBUeXBlSWR9XzMyLnBuZ2B9IC8+O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByb2xlcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5waWxvdC5yb2xlcykge1xyXG4gICAgICAgICAgICByb2xlcyA9IHRoaXMucHJvcHMucGlsb3Qucm9sZXMubWFwKChyb2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc3VjY2VzcyBidG4tc20gbS0xXCIgZGF0YS10aXA9e3JvbGUubmFtZX0+e3JvbGUuYWNyb255bS5jaGFyQXQoMCl9PC9idXR0b24+O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzcXVhZHM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMud2luZ3MpIHtcclxuICAgICAgICAgICAgc3F1YWRzID0gdGhpcy5wcm9wcy53aW5ncy5tYXAoKHdpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5nLnNxdWFkcy5tYXAoKHNxdWFkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxhIHJvbGU9XCJwcmVzZW50YXRpb25cIiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17dGhpcy5pbnZpdGVQaWxvdC5iaW5kKHRoaXMsIHRoaXMucHJvcHMucGlsb3QuYWNjb3VudC5pZCwgdGhpcy5wcm9wcy5waWxvdC5waWxvdC5jaGFyYWN0ZXJJRCwgc3F1YWQuaWQsIHdpbmcuaWQpfT57YCR7d2luZy5uYW1lfTogJHtzcXVhZC5uYW1lfWB9PC9hPlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHRyIGlkPXt0aGlzLnByb3BzLnBpbG90LmlkfT5cclxuICAgICAgICAgICAgICAgIDx0ZD4gPGltZyBzcmM9e2BodHRwczovL2ltYWdlLmV2ZW9ubGluZS5jb20vQ2hhcmFjdGVyLyR7dGhpcy5wcm9wcy5waWxvdC5waWxvdC5jaGFyYWN0ZXJJRH1fNjQuanBnYH0gaGVpZ2h0PVwiNTBcIiAvPiA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQaWxvdCBwaWxvdD17dGhpcy5wcm9wcy5waWxvdC5waWxvdH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyZml4XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8WG1wcExpbmsgQXV0aE5hbWU9e3RoaXMucHJvcHMucGlsb3QuYWNjb3VudC5uYW1lfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJmaXhcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHtuZXdQaWxvdH0ge29mZmxpbmV9XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3NOYW1lPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC1zbSBwLTFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3MgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMuaW52aXRlUGlsb3QuYmluZCh0aGlzLCB0aGlzLnByb3BzLnBpbG90LmFjY291bnQuaWQsIHRoaXMucHJvcHMucGlsb3QucGlsb3QuY2hhcmFjdGVySUQsIG51bGwsIG51bGwpfT5JbnZpdGXCoDxpIGNsYXNzTmFtZT1cImZhcyBmYS1wbHVzXCI+PC9pPjwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93biBidG4tZ3JvdXAgZC1pbmxpbmVcIiByb2xlPVwiZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1zbSBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgdHlwZT1cImJ1dHRvblwiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiByb2xlPVwibWVudVwiIGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3F1YWRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhbmdlciBidG4tc20gcC0xXCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMucmVtb3ZlUGlsb3QuYmluZCh0aGlzLCB0aGlzLnByb3BzLnBpbG90LmlkKX0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLW1pbnVzXCI+PC9pPjwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duIGQtaW5saW5lIHAtMVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFyayBidG4tc20gZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIHR5cGU9XCJidXR0b25cIj5PcHRpb25zwqA8aSBjbGFzc05hbWU9XCJmYXMgZmEtY29nXCI+PC9pPiA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiByb2xlPVwibWVudVwiIGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHJvbGU9XCJwcmVzZW50YXRpb25cIiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIi9zZWFyY2g/cT1waWxvdF9uYW1lJmFjdGlvbj12aWV3UHJvZmlsZVwiPlBpbG90IFByb2ZpbGU8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSByb2xlPVwicHJlc2VudGF0aW9uXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj17YHhtcHA6JHt0aGlzLnByb3BzLnBpbG90LmFjY291bnQubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZywgXCJfXCIpfWB9Pk9wZW4gSmFiYmVyIFBNPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLXNtIHAtMSBkaXNhYmxlZFwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXt0aGlzLmFsYXJtQWNjb3VudC5iaW5kKHRoaXMsIHRoaXMucHJvcHMucGlsb3QuaWQsIHRoaXMucHJvcHMucGlsb3QuYWNjb3VudC5hY2NvdW50SWQpfT48aSBjbGFzc05hbWU9XCJmYXMgZmEtYmVsbFwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAge2ZpdHN9XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPiB7cm9sZXN9IDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+IDxEZXN0aW5hdGlvbiBzeXN0ZW09e3RoaXMucHJvcHMucGlsb3Quc3lzdGVtfSAvPiA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPiB7dGhpcy5wcm9wcy5waWxvdC53YWl0aW5nRm9yfSA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0VG9vbHRpcCAvPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbGVldEdsYW5jZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBzZWxlY3RlZFF1ZXVlOiAwXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb21wKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5tZW1iZXJzKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgbGV0IHBpbG90cyA9IHRoaXMucHJvcHMubWVtYmVycy5waWxvdHM7XHJcbiAgICAgICAgdmFyIGRpY3QgPSBuZXcgT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBhIGRpY3Rpb25hcnkgb2Ygc2hpcHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpbG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgc2hpcCA9IHBpbG90c1tpXS5zaGlwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpY3Rbc2hpcC5pZF0pIHtcclxuICAgICAgICAgICAgICAgIGRpY3Rbc2hpcC5pZF0ucGlsb3RzLnB1c2gocGlsb3RzW2ldLm5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGljdFtzaGlwLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogc2hpcC5pZCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBzaGlwLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWU6IHNoaXAucXVldWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGlsb3RzOiBbcGlsb3RzW2ldLm5hbWVdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFscGhhYmV0aWNhbCBzb3J0IG9mIHBpbG90cyBpbiBlYWNoIHNoaXBcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBkaWN0W2tleV0ucGlsb3RzLnNvcnQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8vPj4gVFVSTiBJVCBJTlRPIEFOIEFSUkFZXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGRpY3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkaWN0W2tleV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsdGVyZWRDb21wKCkge1xyXG4gICAgICAgIGxldCBmaWx0ZXJlZENvbXAgPSBbXTtcclxuICAgICAgICBsZXQgY29tcCA9IHRoaXMuZ2V0Q29tcCgpO1xyXG5cclxuICAgICAgICBpZiAoY29tcCA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkUXVldWUgPT0gMCB8fCBjb21wW2ldLnF1ZXVlLmlkID09IHRoaXMuc3RhdGUuc2VsZWN0ZWRRdWV1ZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWRDb21wLnB1c2goY29tcFtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZENvbXA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmlsdGVycygpIHtcclxuICAgICAgICBsZXQgZmxlZXRDb21wID0gdGhpcy5nZXRDb21wKCk7XHJcbiAgICAgICAgbGV0IHF1ZXVlcyA9IFtdXHJcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcclxuXHJcbiAgICAgICAgaWYgKGZsZWV0Q29tcCA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbGVldENvbXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gR2xvYmFsIGNvdW50ZXIgLSBJbmNsdWRlcyBhbGwgc2hpcHNcclxuICAgICAgICAgICAgdG90YWwgKz0gZmxlZXRDb21wW2ldLnBpbG90cy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBpZiAocXVldWVzW2ZsZWV0Q29tcFtpXS5xdWV1ZS5pZF0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBzaGlwVHlwZSA9IHF1ZXVlc1tmbGVldENvbXBbaV0ucXVldWUuaWRdO1xyXG4gICAgICAgICAgICAgICAgcXVldWVzW2ZsZWV0Q29tcFtpXS5xdWV1ZS5pZF0uY291bnQgPSBzaGlwVHlwZS5jb3VudCArPSBmbGVldENvbXBbaV0ucGlsb3RzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHF1ZXVlc1tmbGVldENvbXBbaV0ucXVldWUuaWRdID0gc2hpcFR5cGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZXNbZmxlZXRDb21wW2ldLnF1ZXVlLmlkXSA9IHsgaWQ6IGZsZWV0Q29tcFtpXS5xdWV1ZS5pZCwgbmFtZTogZmxlZXRDb21wW2ldLnF1ZXVlLm5hbWUsIGNvdW50OiBmbGVldENvbXBbaV0ucGlsb3RzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBxdWV1ZXNbMF0gPSB7IGlkOiAwLCBuYW1lOiBcIkZsZWV0XCIsIGNvdW50OiB0b3RhbCB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcXVldWVzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEZpbHRlcihmaWx0ZXJJZCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFF1ZXVlOiBmaWx0ZXJJZCB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7ICAgICAgIFxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8R2xhbmNlTWVudSBmaWx0ZXJzPXt0aGlzLmdldEZpbHRlcnMoKX0gYWN0aXZlRmlsdGVySWQ9e3RoaXMuc3RhdGUuc2VsZWN0ZWRRdWV1ZX0gdXBkYXRlRmlsdGVyPXt0aGlzLnNldEZpbHRlci5iaW5kKHRoaXMpfS8+XHJcblxyXG4gICAgICAgICAgICAgICAgPEdsYW5jZUNvbXAgY29tcD17dGhpcy5nZXRGaWx0ZXJlZENvbXAoKX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbi8vPj4gVE9ETzogQ0xlYW4gdGhlIFswXSBmcm9tIHRoZSBjb2RlXHJcbmV4cG9ydCBjbGFzcyBHbGFuY2VDb21wIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgc2hpcHM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29tcCkge1xyXG4gICAgICAgICAgICBzaGlwcyA9IHRoaXMucHJvcHMuY29tcC5tYXAoKHNoaXApID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwaWxvdHMgPSBzaGlwLnBpbG90cy5qb2luKFwiPGJyPlwiKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IHAtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwicm91bmRlZCBwci0zXCIgc3JjPXtgaHR0cHM6Ly9pbWFnZS5ldmVvbmxpbmUuY29tL1JlbmRlci8ke3NoaXAuaWR9XzMyLnBuZ2B9IGFsdD17c2hpcC5uYW1lfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJkLWlubGluZSBwci0zXCIgZGF0YS10aXA9e3BpbG90c30gZGF0YS1tdWx0aWxpbmU9XCJ0cnVlXCI+e3NoaXAubmFtZX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJhZGdlIGJhZGdlLXdhcm5pbmcgZmxvYXQtcmlnaHRcIj57c2hpcC5waWxvdHMubGVuZ3RofTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0VG9vbHRpcCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHtzaGlwc31cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2xhbmNlTWVudSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IHRhYnM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZmlsdGVycyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRhYnMgPSB0aGlzLnByb3BzLmZpbHRlcnMubWFwKChmaWx0ZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBhY3RpdmUgPSAoZmlsdGVyLmlkID09IHRoaXMucHJvcHMuYWN0aXZlRmlsdGVySWQpID8gJ2FjdGl2ZScgOiAnJztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSByb2xlPVwidGFiXCIgZGF0YS10b2dnbGU9XCJ0YWJcIiBjbGFzc05hbWU9e2BuYXYtbGluayAke2FjdGl2ZX1gfSBocmVmPVwiI3RhYi0xXCIgb25DbGljaz17dGhpcy5wcm9wcy51cGRhdGVGaWx0ZXIuYmluZCh0aGlzLCBmaWx0ZXIuaWQpfT57ZmlsdGVyLm5hbWV9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJiYWRnZSBiYWRnZS13YXJuaW5nIG10LTJcIj57ZmlsdGVyLmNvdW50fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTJcIj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFicyBuYXYtanVzdGlmaWVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3RhYnN9XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLy8gQSBTaWRlIFBhbmVsIHRoYXQgaGlkZXMgb2ZmIHRoZSBzaWRlIG9mIHRoZSBzY3JlZW5cclxuLy8gYW5kIGNvbWVzIG9udG8gdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlIHNjcmVlbiB3aGVuIGFjdGl2ZVxyXG5leHBvcnQgY2xhc3MgU2lkZVBhbmVsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pZCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRpdGxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRpdGxlIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQWN0aW9uczogQ2xvc2UgKi9cclxuICAgIGhpZGVOYXYoKSB7XHJcbiAgICAgICAgJCgnLnNpZGViYXItc3BlY2lhbCcpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBpZD17dGhpcy5nZXRJZCgpfSBjbGFzc05hbWU9XCJzaWRlYmFyLXNwZWNpYWxcIj5cclxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJwYi00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2V0VGl0bGUoKX1cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtY2hldnJvbi1kb3VibGUtcmlnaHQgZmxvYXQtcmlnaHRcIiBvbkNsaWNrPXt0aGlzLmhpZGVOYXYuYmluZCh0aGlzKX0+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9oMz5cclxuXHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBBIHNlY3Rpb24gZm9yIGEgc2lkZSBwYW5lbCB3aXRoIGEgaGVhZGluZ1xyXG5leHBvcnQgY2xhc3MgU2lkZVNlY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgZ2V0VGl0bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudGl0bGUgfHwgXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgcHQtMiBwYi00XCI+XHJcbiAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwicGItMlwiPnt0aGlzLmdldFRpdGxlKCl9PC9oND5cclxuXHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQSBidXR0b24gdGhhdCBvcGVucyBhIHNpZGUgcGFuZWxcclxuZXhwb3J0IGNsYXNzIFNpZGVQYW5lbEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBvcGVuTmF2KGlkKSB7XHJcbiAgICAgICAgJCgnLnNpZGViYXItc3BlY2lhbCcpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKGAjJHtpZH1gKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaWQgfHwgXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50aXRsZSB8fCBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFyayBteC0xXCIgb25DbGljaz17dGhpcy5vcGVuTmF2LmJpbmQodGhpcywgdGhpcy5nZXRJZCgpKX0+e3RoaXMuZ2V0VGl0bGUoKX08L2J1dHRvbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2lkZVNlY3Rpb24gfSBmcm9tICcuL1NpZGVQYW5lbCc7XHJcbmltcG9ydCB7IE11bWJsZUxpbmssIFhtcHBMaW5rIH0gZnJvbSAnLi9Db21tTGlua3MnO1xyXG5pbXBvcnQgeyBQaWxvdCwgRGVzdGluYXRpb24gfSBmcm9tICcuL0VzaVVpJztcclxuaW1wb3J0IHsgQWNjb3VudFBpbG90IH0gZnJvbSAnLi4vSGVscGVycyc7XHJcbmltcG9ydCB7IEFjY291bnQgfSBmcm9tICcuL0F1dG9jb21wbGV0ZUlucHV0cyc7XHJcblxyXG5jb25zdCBiYXNlVXJpID0gXCIvZmxlZXRzXCI7XHJcblxyXG5cclxuLyoqIEZsZWV0IFNldHRpbmdzIEJ1dHRvbnMgKiovXHJcblxyXG5leHBvcnQgY2xhc3MgQnRuQ2xvc2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGNsb3NlRmxlZXQoKSB7XHJcbiAgICAgICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xvc2UgdGhpcyBmbGVldD9cIikpIHtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBgJHtiYXNlVXJpfS8ke3RoaXMucHJvcHMuZmxlZXRJZH1gXHJcbiAgICAgICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgL2BcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTYgcHktMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhbmdlciBidG4tYmxvY2tcIiBvbkNsaWNrPXt0aGlzLmNsb3NlRmxlZXQuYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xvc2UgRmxlZXRcclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXIgZmEtdGltZXMtY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdG5DbGVhciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjbGVhcldhaXRsaXN0KCkge1xyXG4gICAgICAgIGlmIChjb25maXJtKFwiVGhpcyB3aWxsIGNsZWFyIHRoZSB3YWl0bGlzdCBmb3IgYWxsIGZsZWV0cywgYXJlIHlvdSBzdXJlIHlvdSB3aXNoIHRvIGNvbnRpbnVlP1wiKSkge1xyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBgL3dhaXRsaXN0L2NsZWFyYFxyXG4gICAgICAgICAgICB9KS5kb25lKChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUmVhY3QvLi4uL0ZsZWV0U2V0dGluZ3MgQnRuQ2xlYXJAY2xlYXJXYWl0bGlzdF0gRXJyb3IgY2xlYXJpbmcgdGhlIHdhaXRsaXN0OiAke2Vyci5yZXNwb25zZVRleHR9YClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTYgcHktMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhbmdlciBidG4tYmxvY2tcIiBvbkNsaWNrPXt0aGlzLmNsZWFyV2FpdGxpc3QuYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXIgV2FpdGxpc3RcclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXIgZmEtdGltZXMtY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdG5JbnZBbGwgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTYgcHktMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWJsb2NrIGRpc2FibGVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgSW52aXRlIEFsbFxyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1pbmZvLWNpcmNsZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQnRuSW52RmF4ZXMgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTYgcHktMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWJsb2NrIGRpc2FibGVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgSW52aXRlIGFsbCBGYXhlc1xyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1pbmZvLWNpcmNsZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogRmxlZXQgU2V0dGluZ3MgT3B0aW9ucyAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhY2tzZWF0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGdldEljb0lkKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5hY2NvdW50ICYmIHRoaXMucHJvcHMuYWNjb3VudC5uYW1lICYmIHRoaXMucHJvcHMucGlsb3RzKVxyXG4gICAgICAgICAgICByZXR1cm4gQWNjb3VudFBpbG90KHRoaXMucHJvcHMuYWNjb3VudC5uYW1lLCB0aGlzLnByb3BzLnBpbG90cykuaWRcclxuXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9LyR7dGhpcy5wcm9wcy5mbGVldElkfS9iYWNrc2VhdGAsXHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9GbGVldFNldHRpbmdzIHtCYWNrc2VhdEBzZXR9IC0gRXJyb3Igc2V0dGluZyB0aGUgZmxlZXQgYmFja3NlYXQgYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vJHt0aGlzLnByb3BzLmZsZWV0SWR9L2JhY2tzZWF0YCxcclxuICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy51KCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0ZsZWV0U2V0dGluZ3Mge0JhY2tzZWF0QGNsZWFyfSAtIEVycm9yIGNsZWFyaW5nIHRoZSBiYWNrc2VhdCBmb3IgdGhpcyBmbGVldGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8U2lkZVNlY3Rpb24gdGl0bGU9XCJCYWNrc2VhdFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgc2lkZXBhbmVsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwibWwtMyBwci0yXCIgc3JjPXtgaHR0cHM6Ly9pbWFnZS5ldmVvbmxpbmUuY29tL0NoYXJhY3Rlci8ke3RoaXMuZ2V0SWNvSWQoKX1fNjQuanBnYH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC05XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxYbXBwTGluayBBdXRoTmFtZT17ICh0aGlzLnByb3BzLmFjY291bnQpID8gdGhpcy5wcm9wcy5hY2NvdW50Lm5hbWUgOiBudWxsIH0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZC1ibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxnIGJ0bi1kYXJrIG1yLTJcIiBvbkNsaWNrPXt0aGlzLnNldC5iaW5kKHRoaXMpfT5JJ20gdGhlIGJhY2tzZWF0Li4uLjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRpbWVzLWNpcmNsZSBjbGVhclwiIG9uQ2xpY2s9e3RoaXMuY2xlYXIuYmluZCh0aGlzKX0+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L1NpZGVTZWN0aW9uPiAgICBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQm9zcyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBnZXRQaWxvdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5waWxvdCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNldChpZCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9LyR7dGhpcy5wcm9wcy5mbGVldElkfS9ib3NzYCxcclxuICAgICAgICAgICAgZGF0YTogeyBwaWxvdElkOiBpZCB9XHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9GbGVldFNldHRpbmdzIHtCb3NzQHNldH0gLSBFcnJvciBzZXR0aW5nIHRoZSBmbGVldCBib3NzIGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgcGlsb3RzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBpbG90cykge1xyXG4gICAgICAgICAgICBwaWxvdHMgPSB0aGlzLnByb3BzLnBpbG90cy5tYXAoKHBpbG90KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPGEgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIHJvbGU9XCJwcmVzZW50YXRpb25cIiBvbkNsaWNrPXt0aGlzLnNldC5iaW5kKHRoaXMsIHBpbG90LmlkKX0+e3BpbG90Lm5hbWV9PC9hPlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxTaWRlU2VjdGlvbiB0aXRsZT1cIkZsZWV0IENvbW1hbmRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgc2lkZXBhbmVsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwibWwtMyBwci0yXCIgc3JjPXtgaHR0cHM6Ly9pbWFnZS5ldmVvbmxpbmUuY29tL0NoYXJhY3Rlci8ke3RoaXMuZ2V0UGlsb3QoKSA/IHRoaXMuZ2V0UGlsb3QoKS5pZCA6IDB9XzY0LmpwZ2B9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtOVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UGlsb3QgcGlsb3Q9e3RoaXMuZ2V0UGlsb3QoKX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxnIGJ0bi1kYXJrIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiB0eXBlPVwiYnV0dG9uXCI+SSdtIHRoZSBCb3NzLi4uLjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwaWxvdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9TaWRlU2VjdGlvbj4gICAgXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEV4aXRDeW5vX0FkZCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICAvLyBPbmx5IHJldHVybnMgdHJ1ZSBpZiB0aGUgcGlsb3QgaXMgaW4gb3VyIGZsZWV0LCBhbmQgbm90IGFuIGV4aXQgY3lubyBhbHJlYWR5LlxyXG4gICAgaXNJbkZsZWV0KHBpbG90KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZmxlZXRQaWxvdHMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcm9wcy5mbGVldFBpbG90cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZmxlZXRQaWxvdHNbaV0uaWQgPT0gcGlsb3QuaWQgJiYgIXRoaXMucHJvcHMuZmxlZXRQaWxvdHNbaV0uaXNFeGl0Q3lubylcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q3lubyhmbGVldElkLCBwaWxvdElkKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3B1dCcsXHJcbiAgICAgICAgICAgIHVybDogYC9mbGVldHMvJHtmbGVldElkfS9jeW5vLyR7cGlsb3RJZH1gXHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUmVhY3QvRmxlZXRTZXR0aW5nc0BzZXRDeW5vXSBFcnJvciBzZXR0aW5nIHBpbG90SWQ6ICR7cGlsb3RJZH0gYXMgYSBmbGVldCBjeW5vOiAke2Vyci5yZXNwb25zZVRleHR9YClcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgcGlsb3RzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm15UGlsb3RzKSB7XHJcbiAgICAgICAgICAgIHBpbG90cyA9IHRoaXMucHJvcHMubXlQaWxvdHMubWFwKChwaWxvdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbkZsZWV0KHBpbG90KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8YSBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIG9uQ2xpY2s9e3RoaXMuc2V0Q3luby5iaW5kKHRoaXMsIHRoaXMucHJvcHMuZmxlZXRJZCwgcGlsb3QuaWQpfT57cGlsb3QubmFtZX08L2E+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi01IHBiLTRcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZGFuZ2VyIHRleHQtY2VudGVyXCIgPkluY3Vyc2lvbnMgU3F1YWQtTCB3b3VsZCBsaWtlIHRvIHJlbWluZCB5b3UgdGhhdCB5b3UgTVVTVCBoYXZlIGV4aXQgY3lub3MgYXQgYWxsIHRpbWVzLjwvcD5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duIGZsb2F0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGcgYnRuLWRhcmsgZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIHR5cGU9XCJidXR0b25cIj5BZGQgZmxlZXQgY3luby4uLjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgcm9sZT1cIm1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3BpbG90c31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFeGl0Q3lubyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICB1bnNldEN5bm8oZmxlZXRJZCwgcGlsb3RJZCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAvZmxlZXRzLyR7ZmxlZXRJZH0vY3luby8ke3BpbG90SWR9YFxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0ZsZWV0U2V0dGluZ3NAdW5zZXRDeW5vXSBFcnJvciByZW1vdmluZyBwaWxvdElkOiAke3BpbG90SWR9IGFzIGEgZmxlZXQgY3lubzogJHtlcnIucmVzcG9uc2VUZXh0fWApXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGN5bm9zO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmN5bm9zKSB7XHJcbiAgICAgICAgICAgIGN5bm9zID0gdGhpcy5wcm9wcy5jeW5vcy5tYXAoKHBpbG90KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IHNpZGVwYW5lbC1jb250ZW50IHBiLTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJtbC0zIHByLTJcIiBzcmM9e2BodHRwczovL2ltYWdlLmV2ZW9ubGluZS5jb20vQ2hhcmFjdGVyLyR7cGlsb3QuaWR9XzY0LmpwZ2B9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC05IHBsLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQaWxvdCBwaWxvdD17cGlsb3R9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdGltZXMtY2lyY2xlIGZsb2F0LXJpZ2h0IG1yLTMgaS1idG5cIiBvbkNsaWNrPXt0aGlzLnVuc2V0Q3luby5iaW5kKHRoaXMsIHRoaXMucHJvcHMuZmxlZXRJZCwgcGlsb3QuaWQpfT48L2k+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtbWFwLW1hcmtlci1hbHRcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVzdGluYXRpb24gc3lzdGVtPXtwaWxvdC5zeXN0ZW19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxTaWRlU2VjdGlvbj5cclxuICAgICAgICAgICAgICAgIHtjeW5vc31cclxuICAgICAgICAgICAgPC9TaWRlU2VjdGlvbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTXVtYmxlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hhbm5lbCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbW1PcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9wdGlvbnMgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoaSkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9LyR7dGhpcy5wcm9wcy5mbGVldElkfS9jb21tc2AsXHJcbiAgICAgICAgICAgIGRhdGE6IHsgY29tbXNJZDogaSB9XHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9GbGVldFNldHRpbmdzIHtNdW1ibGVAc2V0fSAtIEVycm9yIHNldHRpbmcgdGhlIGNvbW1zIGNoYW5uZWwgZm9yIHRoaXMgZmxlZXRgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY29tbU9wdGlvbnM7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0Q29tbU9wdGlvbnMoKSkge1xyXG4gICAgICAgICAgICBjb21tT3B0aW9ucyA9IHRoaXMuZ2V0Q29tbU9wdGlvbnMoKS5tYXAoKGNoYW5uZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8YSBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIG9uQ2xpY2s9e3RoaXMuc2V0LmJpbmQodGhpcywgY2hhbm5lbC5pZCl9PntjaGFubmVsLmxpbmtUZXh0fTwvYT47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFNpZGVTZWN0aW9uIHRpdGxlPVwiTXVtYmxlXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzaWRlcGFuZWwtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxNdW1ibGVMaW5rIGNvbW1DaGFubmVsPXt0aGlzLmdldCgpfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24gcHQtMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxnIGJ0bi1kYXJrIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiB0eXBlPVwiYnV0dG9uXCI+U2VsZWN0IENvbW1zLi4uLjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgcm9sZT1cIm1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2NvbW1PcHRpb25zfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvU2lkZVNlY3Rpb24+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdHVzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBoYW5kbGVDaGFuZ2UoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3B1dCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vJHt0aGlzLnByb3BzLmZsZWV0SWR9L3N0YXR1c2AsXHJcbiAgICAgICAgICAgIGRhdGE6IHsgc3RhdHVzOiAhdGhpcy5wcm9wcy5wdWJsaWMgfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgUmVhY3QvRmxlZXRTZXR0aW5ncyB7U3RhdHVzQGhhbmRsZUNoYW5nZX0gLSBFcnJvciB1cGRhdGluZyBmbGVldCBzdGF0dXNgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFNpZGVTZWN0aW9uIHRpdGxlPVwiRmxlZXQgU3RhdHVzXCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJzd2l0Y2hcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJ0b2dCdG5cIiBkZWZhdWx0Q2hlY2tlZD17dGhpcy5wcm9wcy5wdWJsaWN9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZXIgcm91bmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJvblwiPkxpc3RlZDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJvZmZcIj5Ob3QgTGlzdGVkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPC9TaWRlU2VjdGlvbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUeXBlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBzZXQoaSkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwdXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9LyR7dGhpcy5wcm9wcy5mbGVldElkfS90eXBlYCxcclxuICAgICAgICAgICAgZGF0YTogeyB0eXBlOiBpIH1cclxuICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy51KCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0ZsZWV0U2V0dGluZ3Mge1R5cGVAc2V0fSAtIEVycm9yIHNldHRpbmcgdGhlIGZsZWV0IHR5cGUgYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBmbGVldFR5cGVzO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgZmxlZXRUeXBlcyA9IHRoaXMucHJvcHMub3B0aW9ucy5tYXAoKHR5cGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8YSBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIG9uQ2xpY2s9e3RoaXMuc2V0LmJpbmQodGhpcywgdHlwZSl9Pnt0eXBlfTwvYT47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFNpZGVTZWN0aW9uIHRpdGxlPVwiRmxlZXQgVHlwZVwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2lkZXBhbmVsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXIgZmEtbG9jYXRpb25cIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudHlwZX1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duIHB0LTJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1sZyBidG4tZGFyayBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgdHlwZT1cImJ1dHRvblwiPlNlbGVjdCBUeXBlLi4uLjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgcm9sZT1cIm1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2ZsZWV0VHlwZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9TaWRlU2VjdGlvbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi9Db21wb25lbnRzL0FsZXJ0JztcclxuaW1wb3J0IFdhaXRsaXN0IGZyb20gJy4vQ29tcG9uZW50cy9XYWl0bGlzdCc7XHJcbmltcG9ydCBHbGFuY2UgZnJvbSAnLi9Db21wb25lbnRzL0ZsZWV0R2xhbmNlJztcclxuaW1wb3J0IHsgU2lkZVBhbmVsLCBTaWRlU2VjdGlvbiwgU2lkZVBhbmVsQnV0dG9uIH0gZnJvbSAnLi9Db21wb25lbnRzL1NpZGVQYW5lbCc7XHJcbmltcG9ydCB7IEJ0bkNsb3NlLCBCdG5DbGVhciwgQnRuSW52QWxsLCBCdG5JbnZGYXhlcywgQmFja3NlYXQsIEJvc3MsIEV4aXRDeW5vLCBFeGl0Q3lub19BZGQsIE11bWJsZSwgU3RhdHVzLCBUeXBlIH0gZnJvbSAnLi9Db21wb25lbnRzL0ZsZWV0U2V0dGluZ3MnO1xyXG5cclxuY29uc3QgYmFzZVVyaSA9IFwiL2ZsZWV0c1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXggZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGZjT3B0aW9uczogbnVsbCxcclxuICAgICAgICAgICAgZmxlZXRJZDogbnVsbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgZmxlZXRJZDogJChcIiNmbGVldE1hbmFnZW1lbnRcIikuZGF0YShcImZsZWV0aWRcIilcclxuICAgICAgICB9LCAoKSA9PiB0aGlzLmdldEZsZWV0RGF0YSgpKTtcclxuXHJcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5nZXRGbGVldERhdGEoKSwgMTAwMCAqIDEwKTtcclxuICAgIH1cclxuXHJcbiAgICBpc1B1YmxpYygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGUuZmxlZXQpID8gdGhpcy5zdGF0ZS5mbGVldC5pc1B1YmxpYyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmxlZXREYXRhKCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdnZXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9LyR7dGhpcy5zdGF0ZS5mbGVldElkfS9kYXRhYFxyXG4gICAgICAgIH0pLmRvbmUoKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZmxlZXQ6IHJlc3VsdCB9KTtcclxuICAgICAgICAgICAgdGhpcy5nZXRXYWl0bGlzdERhdGEoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDQpXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gJy8nO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9GbGVldE1hbmFnZW1lbnQge0ZsZWV0TWFuYWdlbWVudEBnZXRGbGVldERhdGF9IC0gRXJyb3IgZ2V0dGluZyBmbGVldCBpbmZvcm1hdGlvbmAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgcm93IGhpZ2hsaWdodHNcclxuICAgICAgICAkKFwidHJcIikucmVtb3ZlQ2xhc3MoXCJ0ci1kYW5nZXJcIilcclxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwidHItc3VjY2Vzc1wiKVxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJ0ci1wZW5kaW5nXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdhaXRsaXN0RGF0YSgpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBgL2FwaS92MS93YWl0bGlzdC9waWxvdHNgXHJcbiAgICAgICAgfSkuZG9uZSgocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3YWl0aW5nUGlsb3RzOiByZXN1bHQgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0RmNTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWFjdC9GbGVldE1hbmFnZW1lbnQge0ZsZWV0TWFuYWdlbWVudEBnZXRXYWl0bGlzdERhdGF9IC0gRXJyb3IgZ2V0dGluZyBmbGVldCBpbmZvcm1hdGlvbmAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZjU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2dldCcsXHJcbiAgICAgICAgICAgIHVybDogYC9hcGkvdjEvb3B0aW9uc2BcclxuICAgICAgICB9KS5kb25lKChzZXR0aW5ncykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZmNPcHRpb25zOiBzZXR0aW5ncy5mY09wdGlvbnMgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L0ZsZWV0TWFuYWdlbWVudCB7SW5kZXhAZ2V0RmNTZXR0aW5nc30gLSBFcnJvciBnZXR0aW5nIHRoZSBGQyBzZXR0aW5nc2AsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmxlZXRXaW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5mbGVldCAmJiB0aGlzLnN0YXRlLmZsZWV0LndpbmdzID8gdGhpcy5zdGF0ZS5mbGVldC53aW5ncyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmxlZXRTZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5mbGVldCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdhaXRsaXN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLndhaXRpbmdQaWxvdHMgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5mY09wdGlvbnMgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBoYXNGbGVldEJvc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZmxlZXQgJiYgdGhpcy5zdGF0ZS5mbGVldC5ib3NzUGlsb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWVtYmVycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5mbGVldCAmJiB0aGlzLnN0YXRlLmZsZWV0Lm1lbWJlcnMgPyB0aGlzLnN0YXRlLmZsZWV0Lm1lbWJlcnMgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZsZWV0Q3lub3MoKSB7XHJcbiAgICAgICAgbGV0IG1lbWJlcnMgPSB0aGlzLmdldE1lbWJlcnMoKTtcclxuICAgICAgICBpZiAobWVtYmVycyA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgbGV0IGN5bm9BcnIgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lbWJlcnMucGlsb3RzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBpZiAobWVtYmVycy5waWxvdHNbaV0uaXNFeGl0Q3lubylcclxuICAgICAgICAgICAgICAgIGN5bm9BcnIucHVzaChtZW1iZXJzLnBpbG90c1tpXSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjeW5vQXJyO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgZmxlZXRQcml2YXRlO1xyXG4gICAgICAgIGlmICghdGhpcy5pc1B1YmxpYygpKSB7XHJcbiAgICAgICAgICAgIGZsZWV0UHJpdmF0ZSA9IChcclxuICAgICAgICAgICAgICAgIDxBbGVydCB0eXBlPVwiZGFuZ2VyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZFwiPkZsZWV0IE5vdCBMaXN0ZWQ6IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICBJZiBubyBmbGVldHMgYXJlIGxpc3RlZCwgdGhlIHdhaXRsaXN0IHdpbGwgc2hvdyBhcyBvZmZsaW5lLlxyXG4gICAgICAgICAgICAgICAgPC9BbGVydD5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBub0ZsZWV0Qm9zcztcclxuICAgICAgICBpZiAoIXRoaXMuaGFzRmxlZXRCb3NzKCkpIHtcclxuICAgICAgICAgICAgbm9GbGVldEJvc3MgPSAoXHJcbiAgICAgICAgICAgICAgICA8QWxlcnQgdHlwZT1cImRhbmdlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZvbnQtd2VpZ2h0LWJvbGRcIj5ObyBGbGVldCBCb3NzOiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgVW50aWwgeW91IHNldCBhIG5ldyBmbGVldCBib3NzIGFsbCBFU0kgZnVuY3Rpb25zIHdpbGwgYmUgZGlzYWJsZWQgZm9yIHRoaXMgZmxlZXQuXHJcbiAgICAgICAgICAgICAgICA8L0FsZXJ0PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG5lZWRDeW5vcztcclxuICAgICAgICBpZiAoIXRoaXMuZmxlZXRDeW5vcygpIHx8IHRoaXMuZmxlZXRDeW5vcygpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIG5lZWRDeW5vcyA9IChcclxuICAgICAgICAgICAgICAgIDxBbGVydCB0eXBlPVwiZGFuZ2VyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBGbGVldCBDeW5vcyBOZWVkZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBZb3UgTVVTVCBoYXZlIGF0IGxlYXN0IG9uZSBleGl0IGN5bm8gaW4gdGhpcyBmbGVldCFcclxuICAgICAgICAgICAgICAgIDwvQWxlcnQ+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmbGVldFNpemU7XHJcbiAgICAgICAgbGV0IGZsZWV0U2l6ZUNsYXNzO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZsZWV0ICYmIHRoaXMuc3RhdGUuZmxlZXQubWVtYmVycykge1xyXG4gICAgICAgICAgICBsZXQgb25HcmlkID0gdGhpcy5zdGF0ZS5mbGVldC5tZW1iZXJzLm9uR3JpZDtcclxuICAgICAgICAgICAgbGV0IG1heCA9IHRoaXMuc3RhdGUuZmxlZXQubWVtYmVycy5tYXg7XHJcblxyXG4gICAgICAgICAgICBmbGVldFNpemUgPSBgJHt0aGlzLnN0YXRlLmZsZWV0Lm1lbWJlcnMub25HcmlkfSAvICR7dGhpcy5zdGF0ZS5mbGVldC5tZW1iZXJzLm1heH1gO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9uR3JpZCA+IG1heCkge1xyXG4gICAgICAgICAgICAgICAgZmxlZXRTaXplQ2xhc3MgPSBgZGFuZ2VyIGJsaW5rYDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvbkdyaWQgPCBtYXggLSA1KSB7XHJcbiAgICAgICAgICAgICAgICBmbGVldFNpemVDbGFzcyA9IGB3YXJuaW5nYDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZsZWV0U2l6ZUNsYXNzID0gYHdoaXRlYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIHtmbGVldFByaXZhdGV9XHJcbiAgICAgICAgICAgICAgICB7bm9GbGVldEJvc3N9XHJcbiAgICAgICAgICAgICAgICB7bmVlZEN5bm9zfVxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctOCBjb2wtc20tMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFdhaXRsaXN0IHdhaXRsaXN0PXt0aGlzLmdldFdhaXRsaXN0KCl9IHdpbmdzPXt0aGlzLmdldEZsZWV0V2luZ3MoKX0gZmxlZXRJZD17dGhpcy5zdGF0ZS5mbGVldElkIHx8IG51bGx9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTQgY29sLXNtLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTaWRlUGFuZWxCdXR0b24gaWQ9XCJmbGVldFNldHRpbmdzXCIgdGl0bGU9XCJGbGVldCBTZXR0aW5nc1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2lkZVBhbmVsQnV0dG9uIGlkPVwiZmxlZXRDeW5vc1wiIHRpdGxlPVwiRmxlZXQgQ3lub3NcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9e2BkLWJsb2NrIHRleHQtY2VudGVyIHRleHQtJHtmbGVldFNpemVDbGFzc30gcHktNGB9PkZsZWV0IFNpemU6IHtmbGVldFNpemV9PC9oND5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHbGFuY2UgbWVtYmVycz17dGhpcy5nZXRNZW1iZXJzKCl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPFNpZGVQYW5lbCBpZD1cImZsZWV0U2V0dGluZ3NcIiB0aXRsZT1cIkZsZWV0IFNldHRpbmdzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvc3MgcGlsb3Q9eyh0aGlzLnN0YXRlLmZsZWV0KSA/IHRoaXMuc3RhdGUuZmxlZXQuYm9zc1BpbG90IDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbG90cz17KHRoaXMuZ2V0U2V0dGluZ3MoKSkgPyB0aGlzLmdldFNldHRpbmdzKCkucGlsb3RzIDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RmxlZXREYXRhLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGVldElkPXt0aGlzLnN0YXRlLmZsZWV0SWR9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QmFja3NlYXQgYWNjb3VudD17KHRoaXMuc3RhdGUuZmxlZXQpID8gdGhpcy5zdGF0ZS5mbGVldC5iYWNrc2VhdEFjY291bnQgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5nZXRGbGVldERhdGEuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZWV0SWQ9e3RoaXMuc3RhdGUuZmxlZXRJZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbG90cz17dGhpcy5zdGF0ZS5mY09wdGlvbnMgPyB0aGlzLnN0YXRlLmZjT3B0aW9ucy5waWxvdHMgOiBudWxsfS8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TXVtYmxlIGNoYW5uZWw9eyh0aGlzLmdldEZsZWV0U2V0dGluZ3MoKSkgPyB0aGlzLmdldEZsZWV0U2V0dGluZ3MoKS5jb21tQ2hhbm5lbCA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXsodGhpcy5nZXRTZXR0aW5ncygpKSA/IHRoaXMuZ2V0U2V0dGluZ3MoKS5jb21tcyA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldEZsZWV0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxlZXRJZD17dGhpcy5zdGF0ZS5mbGVldElkfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cGUgdHlwZT17KHRoaXMuZ2V0RmxlZXRTZXR0aW5ncygpKSA/IHRoaXMuZ2V0RmxlZXRTZXR0aW5ncygpLnR5cGUgOiBcIlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17KHRoaXMuZ2V0U2V0dGluZ3MoKSkgPyB0aGlzLmdldFNldHRpbmdzKCkuZmxlZXRUeXBlcyA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldEZsZWV0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxlZXRJZD17dGhpcy5zdGF0ZS5mbGVldElkfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cyBwdWJsaWM9e3RoaXMuaXNQdWJsaWMoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RmxlZXREYXRhLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGVldElkPXt0aGlzLnN0YXRlLmZsZWV0SWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnRuQ2xvc2UgZmxlZXRJZD17dGhpcy5zdGF0ZS5mbGVldElkfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnRuQ2xlYXIgZmxlZXRJZD17dGhpcy5zdGF0ZS5mbGVldElkfSB1PXt0aGlzLmdldEZsZWV0RGF0YS5iaW5kKHRoaXMpIH0vPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ0bkludkFsbCBmbGVldElkPXt0aGlzLnN0YXRlLmZsZWV0SWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdG5JbnZGYXhlcyBmbGVldElkPXt0aGlzLnN0YXRlLmZsZWV0SWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L1NpZGVQYW5lbD5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPFNpZGVQYW5lbCBpZD1cImZsZWV0Q3lub3NcIiB0aXRsZT1cIkZsZWV0IEN5bm9zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEV4aXRDeW5vX0FkZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBteVBpbG90cz17dGhpcy5zdGF0ZS5mY09wdGlvbnMgIT1udWxsID8gdGhpcy5zdGF0ZS5mY09wdGlvbnMucGlsb3RzIDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxlZXRQaWxvdHM9e3RoaXMuc3RhdGUuZmxlZXQgIT0gbnVsbCA/IHRoaXMuc3RhdGUuZmxlZXQubWVtYmVycy5waWxvdHMgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldEZsZWV0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGVldElkPXt0aGlzLnN0YXRlLmZsZWV0SWR9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8RXhpdEN5bm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3lub3M9e3RoaXMuZmxlZXRDeW5vcygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldEZsZWV0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGVldElkPXt0aGlzLnN0YXRlLmZsZWV0SWR9IC8+XHJcbiAgICAgICAgICAgICAgICA8L1NpZGVQYW5lbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmxlZXRNYW5hZ2VtZW50JykpXHJcbiAgICByZW5kZXIoPEluZGV4IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmxlZXRNYW5hZ2VtZW50JykpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VyU2V0dGluZ3MgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgbm90aWZpY2F0aW9uc0VuYWJsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2V0dGluZ3MgJiYgdGhpcy5wcm9wcy5zZXR0aW5ncy5qYWJiZXJOb3RpZmljYXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNoZWNrYm94Q2xpY2soKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vamFiYmVyYCxcclxuICAgICAgICAgICAgZGF0YToge25vdGlmaWNhdGlvbnNFbmFibGVkOiAhdGhpcy5ub3RpZmljYXRpb25zRW5hYmxlZCgpfVxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUmVhY3QvVXNlclNldHRpbmdzXSBAaGFuZGxlQ2hlY2tib3hDbGljayAtIEVycm9yIHNldHRpbmcgdGhlIHVzZXJzIGphYmJlciBzZXR0aW5nc2AsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDM+U2V0dGluZ3M8L2gzPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibWwtNFwiPlRoZXNlIHNldHRpbmdzIGFsbG93IHlvdSB0byBjb25maWd1cmUgc3BlY2lmaWMgc2V0dGluZ3MgZm9yIHRoZSB3YWl0bGlzdDo8L3A+XHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC1ncm91cCBwdC0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3NOYW1lPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoZWNrYm94Q2xpY2suYmluZCh0aGlzKX0gZGVmYXVsdENoZWNrZWQ9e3RoaXMubm90aWZpY2F0aW9uc0VuYWJsZWQoKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImN1c3RvbS1jb250cm9sLWluZGljYXRvclwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImN1c3RvbS1jb250cm9sLWRlc2NyaXB0aW9uXCI+QWxsb3cgdGhlIHdhaXRsaXN0IHRvIHNlbmQgbWUgSmFiYmVyIFBNcyB3aGVuOjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LXVuc3R5bGVkIHB0LTFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzc05hbWU9XCJmYXMgZmEtY2FyZXQtcmlnaHRcIj48L2k+wqBJIGFtIGludml0ZWQgdG8gYSBmbGVldDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRleHRBcmVhIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xzJztcclxuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpdHRpbmdzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBrZXk6IDAsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEZpdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZml0cyB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVGaXQoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vZml0YCxcclxuICAgICAgICAgICAgZGF0YToge2ZpdFVybDogZS50YXJnZXRbMF0udmFsdWV9XHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBrZXk6IHRoaXMuc3RhdGUua2V5ICsgMSB9KTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUmVhY3QvRml0dGluZ3NdIEBzYXZlRml0IC0gRXJyb3Igc2F2aW5nIHlvdXIgbmV3IGZpdGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlRml0KGlkKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXHJcbiAgICAgICAgICAgIHVybDogYCR7dGhpcy5wcm9wcy5iYXNlVXJpfS9maXQvJHtpZH1gXHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L0ZpdHRpbmdzXSBAZGVsZXRlRml0IC0gRXJyb3IgZGVsZXRpbmcgeW91ciBmaXRgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgbmV3Rml0O1xyXG4gICAgICAgIGlmICh0aGlzLmdldEZpdHMoKSAmJiB0aGlzLmdldEZpdHMoKS5sZW5ndGggPCA1KSB7XHJcbiAgICAgICAgICAgIG5ld0ZpdCA9IDxTdWJtaXRGaXQgc2F2ZUZpdD17dGhpcy5zYXZlRml0LmJpbmQodGhpcyl9IGtleT17dGhpcy5zdGF0ZS5rZXl9Lz5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhY3RpdmVGaXRzO1xyXG4gICAgICAgIGlmICh0aGlzLmdldEZpdHMoKSkge1xyXG4gICAgICAgICAgICBhY3RpdmVGaXRzID0gdGhpcy5nZXRGaXRzKCkubWFwKChmaXQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8Rml0Um93IGZpdD17Zml0fSBkZWxldGVGaXQ9e3RoaXMuZGVsZXRlRml0LmJpbmQodGhpcywgZml0LmlkKX0gLz5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgzPk15IEZpdHM8L2gzPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibWwtNCBtYi0wXCI+WW91IHdpbGwgYmUgYXNrZWQgdG8gc2VsZWN0IHVwIHRvIGZpdmUgc2hpcHMgZnJvbSB0aGUgbGlzdCBiZWxvdywgd2hlbiB5b3Ugam9pbiB0aGUgd2FpdGxpc3QuPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibWwtNFwiPllvdSBjYW4gaGF2ZSB1cCB0byA1IHNoaXBzIHN0b3JlZCBiZWxvdyBhdCBhbnkgZ2l2ZW4gdGltZS48L3A+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZS1yZXNwb25zaXZlIHRhYmxlLWhvdmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+SHVsbCBUeXBlPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2FjdGl2ZUZpdHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge25ld0ZpdH1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxGaXR0aW5nc0hlbHBNb2RhbCAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGaXRSb3cgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgIDx0ZD48aW1nIHNyYz17YGh0dHBzOi8vaW1hZ2UuZXZlb25saW5lLmNvbS9SZW5kZXIvJHt0aGlzLnByb3BzLmZpdC5zaGlwVHlwZUlkfV8zMi5wbmdgfSAvPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+e3RoaXMucHJvcHMuZml0Lm5hbWV9PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5wcm9wcy5maXQuZGVzY3JpcHRpb259PC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZD48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMucHJvcHMuZGVsZXRlRml0fT5EZWxldGUgRml0wqA8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT48L2J1dHRvbj48L3RkPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZpdHRpbmdzSGVscE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8TW9kYWwgaWQ9XCJmaXR0aW5nc0hlbHBcIiBzaXplPVwibGdcIiBkaXNtaXNzPVwidHJ1ZVwiIHRpdGxlPVwiSG93IHRvIHNhdmUgYSBmaXQuXCI+XHJcbiAgICAgICAgICAgICAgICA8cD5UbyBhZGQgYSBmaXR0aW5nIHlvdSB3aWxsIG5lZWQgeW91ciBGaXQgRE5BIFVSTC4gVGhlIG5hbWUgb2YgeW91ciBmaXQgd2lsbCBiZSBzYXZlZCBhcyB0aGUgZml0IGRlc2NyaXB0aW9uLjwvcD5cclxuICAgICAgICAgICAgICAgIDxvbD5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+RHJhZyBhbmQgZHJvcCB5b3VyIGZpdCBpbnRvIGEgY2hhdCBjaGFubmVsIHRvIG1ha2UgYSBjbGlja2FibGUgbGluayBhbmQgcHJlc3MgZW50ZXI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5SaWdodCBjbGljayBuZXh0IHRvIHRoZSBsaW5rIGFuZCBjbGljayBjb3B5PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+UGFzdGUgaXQgaW4gdGhlIHRleHQgYm94IGFuZCBjbGljayAnU2F2ZSBGaXR0aW5nJzwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L29sPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbWJlZC1yZXNwb25zaXZlIGVtYmVkLXJlc3BvbnNpdmUtMTZieTlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dmlkZW8gYXV0b3BsYXk9XCJ0cnVlXCIgbG9vcD1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBjbGFzc05hbWU9XCJlbWJlZC1yZXNwb25zaXZlLWl0ZW1cIiBzcmM9XCIvaW1hZ2VzL3NhdmVmaXQubXA0XCIgdHlwZT1cInZpZGVvL21wNFwiLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvTW9kYWw+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN1Ym1pdEZpdCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGZvcm0gaWQ9XCJuZXdGaXR0aW5nRm9ybVwiIGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIiBvblN1Ym1pdD17dGhpcy5wcm9wcy5zYXZlRml0fT5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZml0RG5hXCI+QWRkIGEgbmV3IHNoaXA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC05XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0QXJlYSBpZD1cImZpdERuYVwiIHJlcXVpcmVkPVwidHJ1ZVwiIHBsYWNlaG9sZGVyPVwiWzAwOjI1OjI1XSBDYWl0bGluIFZpbGlhbmEgPiA8dXJsPWZpdHRpbmc6MTc3NDA6MjY0NDg7MToyNjQwMjsxOjE1MTQ0OzQ6MzE4Njs4OjE0NTEyOzE6NDEyMDE7MTozMzg0MjsyOjI2MzIyOzE6MTQ2NTA7Mjo0MzQ3OzI6Oj5WaW5kaWNhdG9yPC91cmw+XCIga2V5PXt0aGlzLnByb3BzLmtleX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZmxvYXQtcmlnaHQgcHQtMlwiIGRhdGEtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLXRhcmdldD1cIiNmaXR0aW5nc0hlbHBcIj4gSG93IGRvIEkgYWRkIGEgbmV3IGZpdD88L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMyB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tc3VjY2VzcyBkLWJsb2NrIG1iLTJcIiB0eXBlPVwic3VibWl0XCI+U2F2ZSBGaXR0aW5nPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBBbGVydCBmcm9tICcuL0NvbXBvbmVudHMvQWxlcnQnO1xyXG5pbXBvcnQgVXNlclNldHRpbmdzIGZyb20gJy4vQ29tcG9uZW50cy9Vc2VyU2V0dGluZ3MvVXNlclNldHRpbmdzJztcclxuaW1wb3J0IEZpdHRpbmdzIGZyb20gJy4vQ29tcG9uZW50cy9Vc2VyU2V0dGluZ3MvRml0dGluZ3MnO1xyXG5cclxuY29uc3QgYmFzZVVyaSA9IFwiL2FjY291bnQtc2V0dGluZ3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRTZXR0aW5ncyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc2V0dGluZ3M6IG51bGwsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQWpheCBjYWxsIHRvIEFQSSB0byBnZXQgZGF0YVxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHtiYXNlVXJpfS9kYXRhYCxcclxuICAgICAgICB9KS5kb25lKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IGRhdGFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC9BY2NvdW50U2V0dGluZ3NdIEBnZXREYXRhIC0gRXJyb3IgcmV0cmlldmluZyBhY2NvdW50IGluZm9ybWF0aW9uYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNiBjb2wtbWQtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFVzZXJTZXR0aW5ncyBzZXR0aW5ncz17dGhpcy5zdGF0ZS5zZXR0aW5nc30gZm9yY2VVcGRhdGU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfSBiYXNlVXJpPXtiYXNlVXJpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbGVhcmZpeFwiPjwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEZpdHRpbmdzIGZpdHM9e3RoaXMuc3RhdGUuc2V0dGluZ3MgPyB0aGlzLnN0YXRlLnNldHRpbmdzLmZpdHMgOiBudWxsfSBmb3JjZVVwZGF0ZT17dGhpcy5nZXREYXRhLmJpbmQodGhpcyl9IGJhc2VVcmk9e2Jhc2VVcml9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydCB0eXBlPVwiYWxlcnQtcHJpbWFyeVwiPjxib2xkPlBpbG90IFNraWxscyBnb2VzIGhlcmU6PC9ib2xkPiBUaGlzIG1vZHVsZSBpcyBjb21pbmcgc29vbi48L0FsZXJ0PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWNjb3VudFNldHRpbmdzJykpXHJcbiAgICByZW5kZXIoPEFjY291bnRTZXR0aW5ncyAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjY291bnRTZXR0aW5ncycpKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibWItMFwiPnt0aGlzLnByb3BzLmhlYWRpbmd9PC9oNT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgQ2FyZCBmcm9tICcuL0NvbXBvbmVudHMvQ2FyZCc7XHJcblxyXG5jb25zdCBiYXNlVXJpID0gXCIvYWRtaW4vc2V0dGluZ3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN5c3RlbVNldHRpbmdzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7c2V0dGluZ3M6IG51bGx9XHJcbiAgICAgICAgdGhpcy5zaGlwSW5wdXQgPSBSZWFjdC5jcmVhdGVSZWYoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmdldFNoaXBzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9BamF4IGNhbGwgdG8gQVBJIHRvIGdldCBkYXRhXHJcbiAgICBnZXRTaGlwcygpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHtiYXNlVXJpfS9kYXRhYCxcclxuICAgICAgICB9KS5kb25lKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IGRhdGFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L1N5c3RlbVNldHRpbmdzIHtTeXN0ZW1TZXR0aW5nc0BnZXRTaGlwc30gLSBFcnJvciBnZXR0aW5nIHRoZSBjdXJyZW50IHNoaXAgcXVldWVzYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBOZXdRdWV1ZUFzc2lnbm1lbnQocXVldWVfaWQpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vc2hpcHNgLFxyXG4gICAgICAgICAgICBkYXRhOiB7IHF1ZXVlX2lkOiBxdWV1ZV9pZCwgc2hpcF9uYW1lOiB0aGlzLnNoaXBJbnB1dC5jdXJyZW50LnZhbHVlfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdldFNoaXBzKCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L1N5c3RlbVNldHRpbmdzIHtTeXN0ZW1TZXR0aW5nc0BOZXdRdWV1ZUFzc2lnbm1lbnR9IC0gRXJyb3Igc2V0dGluZyBhIG5ldyBxdWV1ZSBhc3NpZ25tZW50YCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlU2hpcChlKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3B1dCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vc2hpcHNgLFxyXG4gICAgICAgICAgICBkYXRhOiB7IHNoaXBfaWQ6IGUudGFyZ2V0LnZhbHVlLnNwbGl0KCcsJylbMF0sIHF1ZXVlX2lkOiBlLnRhcmdldC52YWx1ZS5zcGxpdCgnLCcpWzFdfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdldFNoaXBzKCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFJlYWN0L1N5c3RlbVNldHRpbmdzIHtTeXN0ZW1TZXR0aW5nc0B1cGRhdGVTaGlwfSAtIEVycm9yIGdldHRpbmcgdGhlIGN1cnJlbnQgc2hpcCBxdWV1ZXNgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgc2hpcFF1ZXVlX1JvdztcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZXR0aW5ncyAmJiB0aGlzLnN0YXRlLnNldHRpbmdzLmh1bGwpIHtcclxuICAgICAgICAgICAgc2hpcFF1ZXVlX1JvdyA9IHRoaXMuc3RhdGUuc2V0dGluZ3MuaHVsbC5tYXAoKHNoaXApID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBvcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMuc3RhdGUuc2V0dGluZ3MucXVldWVzLm1hcCgocXVldWUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1NlbGVjdGVkID0gKHNoaXAucXVldWUgPT0ga2V5KSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPG9wdGlvbiB2YWx1ZT17YCR7c2hpcC5pZH0sJHtrZXl9YH0gc2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9PntxdWV1ZX08L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48aW1nIHNyYz17YGh0dHBzOi8vaW1hZ2UuZXZlb25saW5lLmNvbS9SZW5kZXIvJHtzaGlwLmlkfV8zMi5wbmdgfSBhbHQ9XCJTaGlwIFJlbmRlclwiIC8+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPntzaGlwLm5hbWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBvbkNoYW5nZT17dGhpcy51cGRhdGVTaGlwLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb25zfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2hpcFF1ZXVlX0Ryb3Bkb3duT3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZXR0aW5ncyAmJiB0aGlzLnN0YXRlLnNldHRpbmdzLnF1ZXVlcykge1xyXG4gICAgICAgICAgICBzaGlwUXVldWVfRHJvcGRvd25PcHRpb25zID0gdGhpcy5zdGF0ZS5zZXR0aW5ncy5xdWV1ZXMubWFwKChxdWV1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPGEgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIHJvbGU9XCJwcmVzZW50YXRpb25cIiBvbkNsaWNrPXt0aGlzLk5ld1F1ZXVlQXNzaWdubWVudC5iaW5kKHRoaXMsIGtleSl9PntxdWV1ZX08L2E+XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtNiBjb2wtc20tMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmQgaGVhZGluZz1cIlNoaXAgUXVldWVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5UaGlzIGxpc3QgZGVmaW5lcyB3aGF0IHF1ZXVlcyBhIHNoaXAgZ29lcyBpbnRvLCBzaGlwcyB0aGF0IGFyZSBub3Qgb24gdGhpcyBsaXN0IHdpbGwgZ28gaW50byBEUFMuIFRvIHJlbW92ZSBhIHNoaXAgYWRkIGl0IHRvIHRoZSBxdWV1ZSBcIm5vbmVcIjwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJzaGlwX3NlYXJjaFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgcGxhY2Vob2xkZXI9XCJFcmVidXNcIiByZWY9e3RoaXMuc2hpcElucHV0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24gYnRuLWdyb3VwXCIgcm9sZT1cImdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tZGFyayBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+QWRkIHdpdGggUm9sZSA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWVudVwiIHJvbGU9XCJtZW51XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3NoaXBRdWV1ZV9Ecm9wZG93bk9wdGlvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGUtcmVzcG9uc2l2ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlXCIgaWQ9XCJzaGlwUXVldWVzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VHlwZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlF1ZXVlPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzaGlwUXVldWVfUm93fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3lzdGVtU2V0dGluZ3MnKSlcclxuICAgIHJlbmRlcig8U3lzdGVtU2V0dGluZ3MgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzeXN0ZW1TZXR0aW5ncycpKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnXHJcblxyXG5jb25zdCBiYXNlVXJpID0gJy9waWxvdC1zZWxlY3QnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWxvdFNlbGVjdCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHBpbG90czogbnVsbFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdnZXQnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9L3BpbG90c2AsXHJcbiAgICAgICAgfSkuZG9uZSgocGlsb3RzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwaWxvdHM6IHBpbG90cyB9KTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L1BpbG90U2VsZWN0XSBAZ2V0RGF0YSAtIEVycm9yIHJldHJpZXZpbmcgYWNjb3VudCBpbmZvcm1hdGlvbmAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGlsb3RzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnBpbG90cztcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGxvZ2luQ2FyZHM7XHJcbiAgICAgICAgaWYgKCEhdGhpcy5nZXRQaWxvdHMoKSkge1xyXG4gICAgICAgICAgICBsb2dpbkNhcmRzID0gdGhpcy5nZXRQaWxvdHMoKS5tYXAoKHBpbG90LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxMb2dpbkNhcmQgcGlsb3Q9e3BpbG90fSBrZXk9e2luZGV4fSAvPlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudF9faW5uZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBwYi01XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPldlbGNvbWUgdG8gSW1wZXJpdW0gSW5jdXJzaW9uczwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlBsZWFzZSBzZWxlY3QgeW91ciBtYWluIHBpbG90IHRvIGNvbnRpbnVlLjwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtsb2dpbkNhcmRzfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8QWRkQWNjb3VudENhcmQgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWRkQWNjb3VudENhcmQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTMgY29sLW1kLTYgY29sLXNtLTEyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQgbG9naW4tY2FyZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwibG9naW4tYXZhdGFyXCIgc3JjPXtgaHR0cHM6Ly9pbWFnZS5ldmVvbmxpbmUuY29tL0NoYXJhY3Rlci8wXzI1Ni5qcGdgfSBhbHQ9XCJObyBhdmF0YXIgZm91bmQuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luLW5hbWUgbWItNFwiPk5lZWQgYW5vdGhlciBwaWxvdD88L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5IGQtYmxvY2sgbXgtYXV0byBteS00XCIgaHJlZj1cIi9hdXRoL2V2ZVwiPkxvZ2luIHdpdGggRXZlIFNTTzwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dpbkNhcmQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGdldElkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnBpbG90LmlkIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5waWxvdC5uYW1lIHx8IFwiXCJcclxuICAgIH1cclxuXHJcbiAgICBpc0VzaVZhaWxkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnBpbG90ICYmIHRoaXMucHJvcHMucGlsb3QuZXNpVmFsaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TWFpblBpbG90KGlkKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogYHBvc3RgLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9L3BpbG90cy8ke2lkfWAsXHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IHtcclxuICAgICAgICAgICAgICAgIDIwMDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSAnLyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlYWN0L1BpbG90U2VsZWN0XSBAc2V0TWFpblBpbG90IC0gRXJyb3Igc2V0dGluZyB5b3VyIG1haW4gcGlsb3RgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCBlc2kgPSB7fVxyXG4gICAgICAgIGlmICh0aGlzLmlzRXNpVmFpbGQoKSkge1xyXG4gICAgICAgICAgICBlc2kubGFiZWwgPSA8cCBjbGFzc05hbWU9XCJsb2dpbi1lc2kgdGV4dC1zdWNjZXNzXCI+RVNJIFZhbGlkPC9wPjtcclxuICAgICAgICAgICAgZXNpLmJ1dHRvbiA9IDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1zdWNjZXNzIGQtYmxvY2sgbXgtYXV0byBtYi00XCIgb25DbGljaz17dGhpcy5zZXRNYWluUGlsb3QuYmluZCh0aGlzLCB0aGlzLmdldElkKCkpfT5Qcm9jZWVkPC9idXR0b24+O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVzaS5sYWJlbCA9IDxwIGNsYXNzTmFtZT1cImxvZ2luLWVzaSB0ZXh0LWRhbmdlclwiIGRhdGEtbXVsdGlsaW5lPVwidHJ1ZVwiIGRhdGEtdGlwPVwiV2UgcmVxdWlyZSBhIHZhbGlkIEVTSSB0b2tlbiBiZWZvcmUgeW91IGNhbiB1c2UgdGhpcyBwaWxvdC48YnIvPlBsZWFzZSB1cGRhdGUgeW91ciBwaWxvdCBFU0kgdG8gY29udGludWUuXCI+RVNJIEludmFsaWQ8L3A+O1xyXG4gICAgICAgICAgICBlc2kuYnV0dG9uID0gPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kYW5nZXIgZC1ibG9jayBteC1hdXRvIG1iLTRcIiBocmVmPVwiL2F1dGgvZXZlXCI+VXBkYXRlIEVTSTwvYT5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTMgY29sLW1kLTQgY29sLXNtLTZcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZCBsb2dpbi1jYXJkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJsb2dpbi1hdmF0YXJcIiBzcmM9e2BodHRwczovL2ltYWdlLmV2ZW9ubGluZS5jb20vQ2hhcmFjdGVyLyR7dGhpcy5nZXRJZCgpfV8yNTYuanBnYH0gYWx0PXt0aGlzLmdldE5hbWUoKSArIFwiXFwncyBhdmF0YXIuXCJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpbi1uYW1lXCI+e3RoaXMuZ2V0TmFtZSgpfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7ZXNpLmxhYmVsfVxyXG4gICAgICAgICAgICAgICAgICAgIHtlc2kuYnV0dG9ufVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8UmVhY3RUb29sdGlwIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpbG90U2VsZWN0JykpXHJcbiAgICByZW5kZXIoPFBpbG90U2VsZWN0IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGlsb3RTZWxlY3QnKSk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVHFDbG9jayBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHRpbWU6IG5ldyBEYXRlKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbElEID0gc2V0SW50ZXJ2YWwoXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMudGljaygpLFxyXG4gICAgICAgICAgICAxMDAwXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJRCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGljaygpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgdGltZTogbmV3IERhdGUoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdERhdGUobikgeyByZXR1cm4gKG4gPCAxMCkgPyBcIjBcIiArIG4gOiBuOyB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xvY2sgX25vc2VsZWN0b3IgaGlkZGVuLW1kLWRvd25cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGltZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmZvcm1hdERhdGUodGhpcy5zdGF0ZS50aW1lLmdldFVUQ0hvdXJzKCkpfSA6XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZm9ybWF0RGF0ZSh0aGlzLnN0YXRlLnRpbWUuZ2V0VVRDTWludXRlcygpKX0gOlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmZvcm1hdERhdGUodGhpcy5zdGF0ZS50aW1lLmdldFVUQ1NlY29uZHMoKSl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cUNsb2NrJykpXHJcbiAgICByZW5kZXIoPFRxQ2xvY2sgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cUNsb2NrJykpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVHFTdGF0dXMgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHRxX3N0YXR1czogMFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICAvLyBJbml0aWFsIFRRIHN0YXR1c1xyXG4gICAgICAgIHRoaXMudGljaygpO1xyXG5cclxuICAgICAgICAvLyBQb2xsIFRRIHN0YXR1cyBldmVyeSA2MCBzZWNvbmRzLlxyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWxJRCA9IHNldEludGVydmFsKFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnRpY2soKSxcclxuICAgICAgICAgICAgNjAgKiAxMDAwXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJRCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGljaygpIHtcclxuICAgICAgICAkLmdldEpTT04oJ2h0dHBzOi8vZXNpLmV2ZXRlY2gubmV0L2xhdGVzdC9zdGF0dXMvP2RhdGFzb3VyY2U9dHJhbnF1aWxpdHknLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBJZiBWSVAgTW9kZVxyXG4gICAgICAgICAgICBpZiAoISFkYXRhLnBsYXllcnMgJiYgZGF0YS52aXAgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRxX3N0YXR1czogLTEgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHFfc3RhdHVzOiAoISFkYXRhLnBsYXllcnMpID8gZGF0YS5wbGF5ZXJzIDogMCAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLmZhaWwoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdHFfc3RhdHVzOiAwIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgc3RhdHVzID0ge307XHJcbiAgICAgICAgaWYgKCEhdGhpcy5zdGF0ZS50cV9zdGF0dXMgJiYgdGhpcy5zdGF0ZS50cV9zdGF0dXMgPiAwKSB7XHJcbiAgICAgICAgICAgIHN0YXR1cy52YWwgPSB0aGlzLnN0YXRlLnRxX3N0YXR1cy50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgICAgICAgICBzdGF0dXMuY2xhc3MgPSBcInRleHQtc3VjY2Vzc1wiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoISF0aGlzLnN0YXRlLnRxX3N0YXR1cyAmJiB0aGlzLnN0YXRlLnRxX3N0YXR1cyA9PSAtMSkge1xyXG4gICAgICAgICAgICBzdGF0dXMudmFsID0gXCJWSVAgTW9kZVwiO1xyXG4gICAgICAgICAgICBzdGF0dXMuY2xhc3MgPSBcInRleHQtd2FybmluZ1wiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXR1cy52YWwgPSBcIk9mZmxpbmVcIjtcclxuICAgICAgICAgICAgc3RhdHVzLmNsYXNzID0gXCJ0ZXh0LWRhbmdlclwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbG9jayBfbm9zZWxlY3RvciBoaWRkZW4tbWQtZG93biBkLWJsb2NrXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHRpbWUgJHtzdGF0dXMuY2xhc3N9YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgVFE6IHtzdGF0dXMudmFsfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHFTdGF0dXMnKSlcclxuICAgIHJlbmRlcig8VHFTdGF0dXMgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cVN0YXR1cycpKTsiLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuXHJcbi8qIEphdmFTY3JpcHQgQ29yZSAqL1xyXG5pbXBvcnQgJy4vanMvTGlicmFyaWVzL3BvcHBlci5taW4nO1xyXG4vL2ltcG9ydCAnLi9qcy9Cb290c3RyYXAvaW5kZXgnO1xyXG5cclxuLyogUmVhY3QgKi9cclxuaW1wb3J0ICcuL2pzL1JlYWN0L0Fubm91bmNlbWVudCc7XHJcbmltcG9ydCAnLi9qcy9SZWFjdC9CYW5zJztcclxuaW1wb3J0ICcuL2pzL1JlYWN0L0NvbW1hbmRlcnMnO1xyXG5pbXBvcnQgJy4vanMvUmVhY3QvSW5kZXgnO1xyXG5pbXBvcnQgJy4vanMvUmVhY3QvRmxlZXRNYW5hZ2VtZW50JztcclxuaW1wb3J0ICcuL2pzL1JlYWN0L0FjY291bnRTZXR0aW5ncyc7XHJcbmltcG9ydCAnLi9qcy9SZWFjdC9TeXN0ZW1TZXR0aW5ncyc7XHJcblxyXG4vKiBSRUFDVCAtPiBQaWxvdCBTZWxlY3QgUGFnZSAqL1xyXG5pbXBvcnQgJy4vanMvUmVhY3QvUGlsb3RTZWxlY3QnO1xyXG5cclxuLyogUkVBQ1QgLT4gTmF2YmFyICovXHJcbmltcG9ydCAnLi9qcy9SZWFjdC9UcUNsb2NrJztcclxuaW1wb3J0ICcuL2pzL1JlYWN0L1RxU3RhdHVzJztcclxuXHJcbi8qIFRoZW1lICovXHJcbmltcG9ydCAnLi9qcy9hcHAubWluJztcclxuaW1wb3J0ICcuL2pzL0xpYnJhcmllcy9UaGVtZS9hcHAnO1xyXG5pbXBvcnQgJy4vanMvTGlicmFyaWVzL1RoZW1lL3ZlbmRvcnMnO1xyXG5cclxuLy8gU2lkZWJhclxyXG4kKCcuc2lkZWJhckJ0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoJy5zaWRlYmFyLXNwZWNpYWwnKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKCcuc2lkZWJhckJ0bicpLnRvZ2dsZUNsYXNzKCd0b2dnbGUnKTtcclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=