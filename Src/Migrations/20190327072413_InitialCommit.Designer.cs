// <auto-generated />
using System;
using Imperium_Incursions_Waitlist.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imperium_Incursions_Waitlist.Migrations
{
    [DbContext(typeof(WaitlistDataContext))]
    [Migration("20190327072413_InitialCommit")]
    partial class InitialCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imperium_Incursions_Waitlist.Models.Account", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("LastLoginIP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("RegisteredAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Imperium_Incursions_Waitlist.Models.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminId");

                    b.Property<int>("BannedAccountId");

                    b.Property<DateTime?>("ExpiresAt");

                    b.Property<DateTime>("IssuedAt");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UpdatedByAdminId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BannedAccountId");

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("Imperium_Incursions_Waitlist.Models.Pilot", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("AccountId");

                    b.Property<long>("CorporationId");

                    b.Property<string>("ESIToken");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("RegisteredAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Pilots");
                });

            modelBuilder.Entity("Imperium_Incursions_Waitlist.Models.Ban", b =>
                {
                    b.HasOne("Imperium_Incursions_Waitlist.Models.Account", "CreatorAdmin")
                        .WithMany("CreatedBans")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Imperium_Incursions_Waitlist.Models.Account", "BannedAccount")
                        .WithMany("AccountBans")
                        .HasForeignKey("BannedAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Imperium_Incursions_Waitlist.Models.Account", "UpdatingAdmin")
                        .WithMany("UpdatedBans")
                        .HasForeignKey("UpdatedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Imperium_Incursions_Waitlist.Models.Pilot", b =>
                {
                    b.HasOne("Imperium_Incursions_Waitlist.Models.Account", "Account")
                        .WithMany("Pilots")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
